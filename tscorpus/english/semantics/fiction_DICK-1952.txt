# ::id 1_fiction_DICK-1952;AT1-1;NE
# ::snt THE GUN By PHILIP K. DICK
∃ EVENT[2] ENTITY[1] (GUN(ENTITY[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = ENTITY[1] ∧ By(EVENT[2]) = ENTITY[PHILIP_K.DICK])

# ::id 2_fiction_DICK-1952;AT2-1;NE
# ::snt Nothing moved or stirred .
¬ ∃ EVENT[2] EVENT[3] ENTITY[1] (
      thing(ENTITY[1]) ∧
       past(EVENT[2]) ∧
        past(EVENT[3]) ∧ CONJ_or(moved(EVENT[2], ENTITY[1]), stirred(EVENT[3], ENTITY[1])))

# ::id 3_fiction_DICK-1952;AT2-2;NE
# ::snt Everything was silent , dead .
∀ ENTITY[1] (thing(ENTITY[1]) →
 ∃ ATTRIB[3] ATTRIB[2] EVENT[4] EVENT[4] (
  silent(ATTRIB[2]) ∧
   dead(ATTRIB[3]) ∧
    past(EVENT[4]) ∧
     past(EVENT[4]) ∧ copula(EVENT[4], ENTITY[1], ATTRIB[2]) ∧ copula(EVENT[4], ENTITY[1], ATTRIB[3])))

# ::id 4_fiction_DICK-1952;AT2-3;NE
# ::snt Only the gun showed signs of life ...
∃ ENTITY[2] (
 gun(ENTITY[2]) ∧
  ONLY ENTITY[1] (is_of(ENTITY[1], ENTITY[2]),
   ∃ EVENT[5] ENTITY[4] GROUP[3] (
    life(ENTITY[4]) ∧
     is_signs_of(GROUP[3], ENTITY[4]) ∧ past(EVENT[5]) ∧ showed(EVENT[5], ENTITY[1], GROUP[3]))))

# ::id 5_fiction_DICK-1952;AT2-4;NE
# ::snt and the trespassers had wrecked that for all time .
∃ ENTITY[2] GROUP[1] (
 trespassers(GROUP[1]) ∧
  ALL ENTITY[3] (time(ENTITY[3]),
   ∃ EVENT[4] (past(EVENT[4]) ∧ had_wrecked(EVENT[4], GROUP[1], ENTITY[2]) ∧ for(EVENT[4]) = ENTITY[3])))

# ::id 6_fiction_DICK-1952;AT2-5;NE
# ::snt The return journey to pick up the treasure would be a cinch ...
∃ EVENT[3] ENTITY[2] ENTITY[1] (
 treasure(ENTITY[2]) ∧
  is_return_journey_to(ENTITY[1], pick_up(EVENT[3], _, ENTITY[2])) ∧
   MD_would(∃ EVENT[5] ENTITY[4] (cinch(ENTITY[4]) ∧ copula(EVENT[5], ENTITY[1], ENTITY[4]))))

# ::id 7_fiction_DICK-1952;AT2-6;NE
# ::snt they smiled .
∃ REF1[1] EVENT[2] (REF1[1] = they ∧ past(EVENT[2]) ∧ smiled(EVENT[2], REF1[1]))

# ::id 8_fiction_DICK-1952;AT3-1;NE
# ::snt The Captain peered into the eyepiece of the telescope .
∃ EVENT[4] ENTITY[3] ENTITY[2] ENTITY[1] (
 Captain(ENTITY[1]) ∧
  telescope(ENTITY[3]) ∧
   is_eyepiece_of(ENTITY[2], ENTITY[3]) ∧
    past(EVENT[4]) ∧ peered(EVENT[4], ENTITY[1]) ∧ into(EVENT[4]) = ENTITY[2])

# ::id 9_fiction_DICK-1952;AT3-2;NE
# ::snt He adjusted the focus quickly .
∃ REF1[1] EVENT[3] ENTITY[2] (
 focus(ENTITY[2]) ∧
  REF1[1] = he ∧ ADV_quickly(EVENT[3]) ∧ past(EVENT[3]) ∧ adjusted(EVENT[3], REF1[1], ENTITY[2]))

# ::id 10_fiction_DICK-1952;AT4-1;NE
# ::snt " It was an atomic fission we saw , all right , " he said presently .
∃ SITUATION[10] REF3[7] ATTRIB[5] REF2[3] REF1[1] EVENT[8] EVENT[9] EVENT[2] ENTITY[4] (
 REF1[1] = he ∧
  REF2[3] = it ∧
   atomic(ATTRIB[5]) ∧
    REF3[7] = we ∧
     saw(EVENT[8], REF3[7], ENTITY[4]) ∧ is_fission_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
      TMP_presently(SITUATION[10]) ∧
       is_before(EVENT[8], EVENT[2]) ∧
        is_before(EVENT[9], EVENT[2]) ∧
         past(EVENT[2]) ∧
          is_FACT_THAT(SITUATION[10], said(EVENT[2], REF1[1], copula(EVENT[9], REF2[3], ENTITY[4]))))

# ::id 11_fiction_DICK-1952;AT4-2;NE
# ::snt He sighed and pushed the eyepiece away .
∃ REF1[1] EVENT[2] EVENT[4] ENTITY[3] (
 eyepiece(ENTITY[3]) ∧
  REF1[1] = he ∧
   past(EVENT[2]) ∧
    DIR_away(EVENT[4]) ∧
     past(EVENT[4]) ∧ CONJ_and(sighed(EVENT[2], REF1[1]), pushed(EVENT[4], REF1[1], ENTITY[3])))

# ::id 12_fiction_DICK-1952;AT4-3;NE
# ::snt " Any of you who wants to look may do so .
ANY REF1[2] EVENT[5] EVENT[4] ENTITY[1] (
 (REF1[2] = you ∧ wants(EVENT[4], ENTITY[1], look(EVENT[5], ENTITY[1])) ∧ is_of(ENTITY[1], REF1[2])), MD_may(∃ EVENT[6] (ADV_so(EVENT[6]) ∧ do(EVENT[6], ENTITY[1]))))

# ::id 13_fiction_DICK-1952;AT4-4;NE
# ::snt But it 's not a pretty sight . "
∃ REF1[1] (
 REF1[1] = it ∧
  ¬ ∃ ATTRIB[3] EVENT[4] ENTITY[2] (pretty(ATTRIB[3]) ∧ is_sight_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧ copula(EVENT[4], REF1[1], ENTITY[2])))

# ::id 14_fiction_DICK-1952;AT5-1;NE
# ::snt " Let me look , " Tance the archeologist said .
∃ EVENT[2] ENTITY[1] (
 archeologist(ENTITY[1]) ∧
  is_-ENTITY-_namely(ENTITY[Tance], ENTITY[1]) ∧
   past(EVENT[2]) ∧
    said(EVENT[2], ENTITY[Tance],
     IMPERATIVE(∃ REF1[4] EVENT[5] EVENT[3] (REF1[4] = me ∧ let(EVENT[3], look(EVENT[5], REF1[4]))))))

# ::id 15_fiction_DICK-1952;AT5-2;NE
# ::snt He bent down to look , squinting .
∃ PRP[2] REF1[1] EVENT[3] EVENT[5] EVENT[4] (
 REF1[1] = he ∧
  is_FACT_THAT(PRP[2], look(EVENT[3], REF1[1])) ∧
   past(EVENT[5]) ∧
    CONJ_and(bent_down(EVENT[5], REF1[1]) ∧ PRP(EVENT[5]) = PRP[2], squinting(EVENT[4], REF1[1])))

# ::id 16_fiction_DICK-1952;AT5-3;NE
# ::snt " Good Lord ! "
∃ EVENT[1] xxx(EVENT[1])

# ::id 17_fiction_DICK-1952;AT5-4;NE
# ::snt He leaped violently back , knocking against Dorle , the Chief Navigator .
∃ SITUATION[6] SITUATION[7] ATTRIB[3] REF1[1] EVENT[5] EVENT[4] ENTITY[2] (
 REF1[1] = he ∧
  chief(ATTRIB[3]) ∧
   is_Navigator_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
    is_-ENTITY-_namely(ENTITY[Dorle], ENTITY[2]) ∧
     ADV_violently(SITUATION[7]) ∧
      DIR_back(SITUATION[6]) ∧
       past(EVENT[5]) ∧
        is_FACT_THAT(SITUATION[7],
         is_FACT_THAT(SITUATION[6],
          CONJ_and(leaped(EVENT[5], REF1[1]),
           knocking(EVENT[4], REF1[1]) ∧ against(EVENT[4]) = ENTITY[Dorle]))))

# ::id 18_fiction_DICK-1952;AT6-1;NE
# ::snt " Why did we come all this way , then ? " Dorle asked , looking around at the other men .
∃ ATTRIB[2] EVENT[5] EVENT[3] GROUP[1] (
 other(ATTRIB[2]) ∧
  is_men_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧
   past(EVENT[5]) ∧
    DIR_around(EVENT[3]) ∧
     CONJ_and(asked(EVENT[5], ENTITY[Dorle],
           QUEST(∃ SITUATION[11] REF1[7] ? ENTITY[6] (
                 REF1[7] = we ∧
                  is_ADV(SITUATION[11], ENTITY[6]) ∧
                   is_FACT_THAT(SITUATION[11],
                    ALL ENTITY[8] (way(ENTITY[8]),
                     ∃ EVENT[9] (
                      ADV_then(EVENT[9]) ∧
                       is_before(EVENT[9], EVENT[5]) ∧
                        did_come(EVENT[9], REF1[7], ENTITY[8]))))))),
      looking(EVENT[3], ENTITY[Dorle]) ∧ at(EVENT[3]) = GROUP[1]))

# ::id 19_fiction_DICK-1952;AT6-2;NE
# ::snt " There 's no point even in landing .
¬ ∃ ENTITY[3] ENTITY[1] (
      point(ENTITY[1]) ∧
       landing(ENTITY[3]) ∧
        EVEN ENTITY[2] (is_of(ENTITY[2], ENTITY[3]), ∃ EVENT[4] (copula(EVENT[4], ENTITY[1]) ∧ in(EVENT[4]) = ENTITY[2])))

# ::id 20_fiction_DICK-1952;AT6-3;NE
# ::snt Let 's go back at once . "
IMPERATIVE(∃ ATTRIB[3] REF1[2] EVENT[4] EVENT[1] (
      REF1[2] = 's ∧
       ADV_once(ATTRIB[3]) ∧
        DIR_back(EVENT[4]) ∧
         let(EVENT[1], go(EVENT[4], REF1[2]) ∧ at(EVENT[4]) = ATTRIB[3])))

# ::id 21_fiction_DICK-1952;AT7-1;NE
# ::snt " Perhaps he 's right , " the biologist murmured .
∃ ATTRIB[4] REF1[3] EVENT[5] EVENT[2] ENTITY[1] (
 biologist(ENTITY[1]) ∧
  REF1[3] = he ∧
   right(ATTRIB[4]) ∧
    ADV_perhaps(EVENT[5]) ∧ past(EVENT[2]) ∧ murmured(EVENT[2], ENTITY[1], copula(EVENT[5], REF1[3], ATTRIB[4])))

# ::id 22_fiction_DICK-1952;AT7-2;NE
# ::snt " But I 'd like to look for myself , if I may . "
∃ REF1[1] (
 REF1[1] = i ∧
  MD'd(∀ REF3[2] CND_if(REF3[2] = i ∧ MD_may(∃ EVENT[3] xxx(EVENT[3], REF3[2])), ∃ REF2[5] EVENT[6] EVENT[4] (
            REF2[5] = myself ∧
             like(EVENT[4], REF1[1], look(EVENT[6], REF1[1]) ∧ for(EVENT[6]) = REF2[5])))))

# ::id 23_fiction_DICK-1952;AT7-3;NE
# ::snt He pushed past Tance and peered into the sight .
∃ REF1[1] EVENT[2] EVENT[4] ENTITY[3] (
 sight(ENTITY[3]) ∧
  REF1[1] = he ∧
   past(EVENT[2]) ∧
    past(EVENT[4]) ∧
     CONJ_and(pushed(EVENT[2], REF1[1]) ∧ past(EVENT[2]) = ENTITY[Tance],
      peered(EVENT[4], REF1[1]) ∧ into(EVENT[4]) = ENTITY[3]))

# ::id 24_fiction_DICK-1952;AT8-1;NE
# ::snt He saw a vast expanse , an endless surface of gray , stretching to the edge of the planet .
∃ ATTRIB[5] ATTRIB[3] ATTRIB[11] REF1[1] EVENT[9] EVENT[12] ENTITY[4] ENTITY[2] ENTITY[10] ENTITY[8] ENTITY[7] (
 planet(ENTITY[8]) ∧
  is_edge_of(ENTITY[7], ENTITY[8]) ∧
   REF1[1] = he ∧
    vast(ATTRIB[11]) ∧
     is_expanse_ATTRIBUTE(ENTITY[10], ATTRIB[11]) ∧
      endless(ATTRIB[3]) ∧
       gray(ATTRIB[5]) ∧
        is_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
         stretching(EVENT[9], ENTITY[2]) ∧ to(EVENT[9]) = ENTITY[7] ∧
          is_surface_of(ENTITY[2], ENTITY[4]) ∧ is_surface_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
          is_-ENTITY-_namely(ENTITY[10], ENTITY[2]) ∧ past(EVENT[12]) ∧ saw(EVENT[12], REF1[1], ENTITY[10]))

# ::id 25_fiction_DICK-1952;AT8-2;NE
# ::snt At first he thought it was water
∃ REF2[4] REF1[2] ATTRIB[1] EVENT[6] EVENT[3] ENTITY[5] (
 ADV_first(ATTRIB[1]) ∧
  REF1[2] = he ∧
   REF2[4] = it ∧
    water(ENTITY[5]) ∧
     is_before(EVENT[6], EVENT[3]) ∧
      past(EVENT[3]) ∧
       thought(EVENT[3], REF1[2], copula(EVENT[6], REF2[4], ENTITY[5])) ∧ At(EVENT[3]) = ATTRIB[1])

# ::id 26_fiction_DICK-1952;AT8-3;NE
# ::snt but after a moment he realized that it was slag , pitted , fused slag , broken only by hills of rock jutting up at intervals .
∃ ATTRIB[7] ATTRIB[6] REF2[4] REF1[2] EVENT[14] EVENT[17] EVENT[3] GROUP[13] ENTITY[11] GROUP[10] ENTITY[5] ENTITY[16] ENTITY[1] (
 moment(ENTITY[1]) ∧
  REF1[2] = he ∧
   REF2[4] = it ∧
    slag(ENTITY[16]) ∧
     pitted(ATTRIB[6]) ∧
      fused(ATTRIB[7]) ∧
       rock(ENTITY[11]) ∧
        intervals(GROUP[13]) ∧
         jutting_up(EVENT[14], GROUP[10]) ∧ at(EVENT[14]) = GROUP[13] ∧ is_hills_of(GROUP[10], ENTITY[11]) ∧
          ONLY ENTITY[9] (is_element_of(ENTITY[9], GROUP[10]), ∃ EVENT[15] broken(EVENT[15], ENTITY[9], ENTITY[5])) ∧
           is_slag_ATTRIBUTE(ENTITY[5], ATTRIB[7]) ∧ is_slag_ATTRIBUTE(ENTITY[5], ATTRIB[6]) ∧
           is_-ENTITY-_namely(ENTITY[16], ENTITY[5]) ∧
            is_before(EVENT[17], EVENT[3]) ∧
             past(EVENT[3]) ∧
              realized(EVENT[3], REF1[2], copula(EVENT[17], REF2[4], ENTITY[16])) ∧
               after(EVENT[3]) = ENTITY[1])

# ::id 27_fiction_DICK-1952;AT8-4;NE
# ::snt Nothing moved or stirred .
¬ ∃ EVENT[2] EVENT[3] ENTITY[1] (
      thing(ENTITY[1]) ∧
       past(EVENT[2]) ∧
        past(EVENT[3]) ∧ CONJ_or(moved(EVENT[2], ENTITY[1]), stirred(EVENT[3], ENTITY[1])))

# ::id 28_fiction_DICK-1952;AT8-5;N
# ::snt Everything was silent , dead .
∀ ENTITY[1] (thing(ENTITY[1]) →
 ∃ ATTRIB[3] ATTRIB[2] EVENT[4] EVENT[4] (
  silent(ATTRIB[2]) ∧
   dead(ATTRIB[3]) ∧
    past(EVENT[4]) ∧
     past(EVENT[4]) ∧ copula(EVENT[4], ENTITY[1], ATTRIB[2]) ∧ copula(EVENT[4], ENTITY[1], ATTRIB[3])))

# ::id 29_fiction_DICK-1952;AT9-1;NE
# ::snt " I see , " Fomar said , backing away from the eyepiece .
∃ REF1[5] EVENT[6] EVENT[4] EVENT[2] ENTITY[1] (
 eyepiece(ENTITY[1]) ∧
  past(EVENT[4]) ∧
   DIR_away(EVENT[2]) ∧
    REF1[5] = i ∧
     CONJ_and(said(EVENT[4], ENTITY[Fomar], see(EVENT[6], REF1[5])),
      backing(EVENT[2], ENTITY[Fomar]) ∧ from(EVENT[2]) = ENTITY[1]))

# ::id 30_fiction_DICK-1952;AT9-2;NE
# ::snt " Well , I wo n't find any legumes there . "
∃ REF1[1] (
 REF1[1] = i ∧
  MD_wo(¬ ANY GROUP[2] (legumes(GROUP[2]), ∃ EVENT[3] (LOC_there(EVENT[3]) ∧ find(EVENT[3], REF1[1], GROUP[2])))))

# ::id 31_fiction_DICK-1952;AT9-3;NE
# ::snt He tried to smile ,
∃ REF1[1] EVENT[3] EVENT[2] (REF1[1] = he ∧ past(EVENT[2]) ∧ tried(EVENT[2], REF1[1], smile(EVENT[3], REF1[1])))

# ::id 32_fiction_DICK-1952;AT9-4;NE
# ::snt but his lips stayed unmoved .
∃ ATTRIB[3] REF1[2] EVENT[5] EVENT[4] GROUP[1] (
 REF1[2] = his ∧
  is_lips_POS(GROUP[1], REF1[2]) ∧
   unmoved(ATTRIB[3]) ∧
    past(EVENT[5]) ∧ CONJ_and(stayed(EVENT[5], GROUP[1]), xxx(EVENT[4], GROUP[1], ATTRIB[3])))

# ::id 33_fiction_DICK-1952;AT9-5;NE
# ::snt He stepped away and stood by himself , staring past the others .
∃ REF2[6] REF1[1] EVENT[4] EVENT[7] EVENT[3] GROUP[2] (
 others(GROUP[2]) ∧
  REF1[1] = he ∧
   REF2[6] = himself ∧
    DIR_away(EVENT[4]) ∧
     past(EVENT[4]) ∧
      past(EVENT[7]) ∧
       CONJ_and(CONJ_and(stepped(EVENT[4], REF1[1]), stood(EVENT[7], REF1[1]) ∧ by(EVENT[7]) = REF2[6]),
        staring(EVENT[3], REF1[1]) ∧ past(EVENT[3]) = GROUP[2]))

# ::id 34_fiction_DICK-1952;AT10-1;NE
# ::snt " I wonder what the atmospheric sample will show , " Tance said .
∃ REF1[2] ATTRIB[6] EVENT[3] EVENT[1] ENTITY[5] (
 atmospheric(ATTRIB[6]) ∧
  is_sample_ATTRIBUTE(ENTITY[5], ATTRIB[6]) ∧
   REF1[2] = i ∧
    past(EVENT[1]) ∧
     said(EVENT[1], ENTITY[Tance],
      wonder(EVENT[3], REF1[2], QUEST(? ENTITY[4] MD_will(∃ EVENT[7] show(EVENT[7], ENTITY[5], ENTITY[4]))))))

# ::id 35_fiction_DICK-1952;AT11-1;NE
# ::snt " I think I can guess , " the Captain answered .
∃ REF2[5] REF1[3] EVENT[4] EVENT[2] ENTITY[1] (
 Captain(ENTITY[1]) ∧
  REF1[3] = i ∧
   REF2[5] = i ∧
    past(EVENT[2]) ∧
     answered(EVENT[2], ENTITY[1], think(EVENT[4], REF1[3], MD_can(∃ EVENT[6] guess(EVENT[6], REF2[5])))))

# ::id 36_fiction_DICK-1952;AT11-2;NE
# ::snt " Most of the atmosphere is poisoned .
∃ ENTITY[2] (atmosphere(ENTITY[2]) ∧ MOST ENTITY[1] (is_of(ENTITY[1], ENTITY[2]), ∃ EVENT[3] poisoned(EVENT[3], _, ENTITY[1])))

# ::id 37_fiction_DICK-1952;AT11-3;NE
# ::snt But did n't we expect all this ?
QUEST(¬ ∃ REF1[1] (REF1[1] = we ∧ ALL ENTITY[2] ∃ EVENT[3] (past(EVENT[3]) ∧ did_expect(EVENT[3], REF1[1], ENTITY[2]))))

# ::id 38_fiction_DICK-1952;AT11-4;NE
# ::snt I do n't see why we 're so surprised .
∃ REF1[1] (
 REF1[1] = i ∧
  ¬ ∃ EVENT[2] do_see(EVENT[2], REF1[1],
        QUEST(∃ ATTRIB[5] REF2[4] EVENT[6] ? ENTITY[3] (
              REF2[4] = we ∧
               so_surprised(ATTRIB[5]) ∧
                is_ADV(EVENT[6], ENTITY[3]) ∧ copula(EVENT[6], REF2[4], ATTRIB[5])))))

# ::id 39_fiction_DICK-1952;AT11-5;NE
# ::snt A fission visible as far away as our system must be a terrible thing . "
∃ REF1[6] ATTRIB[4] ATTRIB[2] ENTITY[5] DEGREE[3] ENTITY[1] (
 as_far(ATTRIB[4]) ∧
  is_ATTRIBUTE(DEGREE[3], ATTRIB[4]) ∧
   REF1[6] = our ∧
    is_system_POS(ENTITY[5], REF1[6]) ∧
     is_LOC_away_as(ATTRIB[2], ENTITY[5]) ∧ is_LOC_away_MSR(ATTRIB[2], DEGREE[3]) ∧ visible(ATTRIB[2]) ∧
      is_fission_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
       MD_must(∃ ATTRIB[8] EVENT[9] ENTITY[7] (terrible(ATTRIB[8]) ∧ is_thing_ATTRIBUTE(ENTITY[7], ATTRIB[8]) ∧ copula(EVENT[9], ENTITY[1], ENTITY[7]))))

# ::id 40_fiction_DICK-1952;AT12-1;NE
# ::snt He strode off down the corridor , dignified and expressionless .
∃ ATTRIB[1] REF1[2] EVENT[4] ENTITY[3] (
 corridor(ENTITY[3]) ∧
  REF1[2] = he ∧
   dignified_expressionless(ATTRIB[1]) ∧
    is_ATTRIBUTE(REF1[2], ATTRIB[1]) ∧
     past(EVENT[4]) ∧ strode_off(EVENT[4], REF1[2]) ∧ down(EVENT[4]) = ENTITY[3])

# ::id 41_fiction_DICK-1952;AT12-2;NE
# ::snt They watched him disappear into the control room .
∃ REF2[3] REF1[1] EVENT[5] EVENT[2] ENTITY[4] (
 control_room(ENTITY[4]) ∧
  REF1[1] = they ∧
   REF2[3] = him ∧
    past(EVENT[2]) ∧
     watched(EVENT[2], REF1[1], disappear(EVENT[5], REF2[3]) ∧ into(EVENT[5]) = ENTITY[4]))

# ::id 42_fiction_DICK-1952;AT13-1;NE
# ::snt As the Captain closed the door the young woman turned .
∃ ATTRIB[5] EVENT[3] EVENT[6] ENTITY[2] ENTITY[1] ENTITY[4] (
 Captain(ENTITY[1]) ∧
  door(ENTITY[2]) ∧
   young(ATTRIB[5]) ∧
    is_woman_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
     past(EVENT[3]) ∧
      past(EVENT[6]) ∧ CRD_As(closed(EVENT[3], ENTITY[1], ENTITY[2]), turned(EVENT[6], ENTITY[4])))

# ::id 43_fiction_DICK-1952;AT13-2;NE
# ::snt " What did the telescope show ?
∃ ENTITY[2] (telescope(ENTITY[2]) ∧ QUEST(∃ EVENT[3] ? ENTITY[1] (past(EVENT[3]) ∧ did_show(EVENT[3], ENTITY[2], ENTITY[1]))))

# ::id 44_fiction_DICK-1952;AT13-3;NE
# ::snt Good or bad ? "
QUEST(∃ ATTRIB[2] ATTRIB[1] EVENT[3] EVENT[3] (
      good(ATTRIB[1]) ∧
       bad(ATTRIB[2]) ∧
        CONJ_or(xxx(EVENT[3], _, ATTRIB[1]), xxx(EVENT[3], _, ATTRIB[2]))))

# ::id 45_fiction_DICK-1952;AT14-1;NE
# ::snt " Bad . No life could possibly exist .
¬ ∃ ENTITY[1] (life(ENTITY[1]) ∧ MD_could(∃ EVENT[2] (ADV_possibly(EVENT[2]) ∧ exist(EVENT[2], ENTITY[1]))))

# ::id 46_fiction_DICK-1952;AT14-2;NE
# ::snt Atmosphere poisoned ,
∃ EVENT[2] ENTITY[1] (Atmosphere(ENTITY[1]) ∧ poisoned(EVENT[2], _, ENTITY[1]))

# ::id 47_fiction_DICK-1952;AT14-3;NE
# ::snt water vaporized ,
∃ EVENT[2] ENTITY[1] (water(ENTITY[1]) ∧ vaporized(EVENT[2], _, ENTITY[1]))

# ::id 48_fiction_DICK-1952;AT14-4;NE
# ::snt all the land fused . "
ALL ENTITY[1] (land(ENTITY[1]), ∃ EVENT[2] fused(EVENT[2], _, ENTITY[1]))

# ::id 49_fiction_DICK-1952;AT15-1;NE
# ::snt " Could they have gone underground ? "
QUEST(MD_could(∃ REF1[1] EVENT[2] (REF1[1] = they ∧ LOC_underground(EVENT[2]) ∧ have_gone(EVENT[2], REF1[1]))))

# ::id 50_fiction_DICK-1952;AT16-1;NE
# ::snt The Captain slid back the port window so that the surface of the planet under them was visible .
∃ SITUATION[9] ATTRIB[6] REF1[5] EVENT[7] EVENT[8] ENTITY[4] ENTITY[3] ENTITY[2] ENTITY[1] (
 Captain(ENTITY[1]) ∧
  port_window(ENTITY[2]) ∧
   REF1[5] = them ∧
    is_planet_under(ENTITY[4], REF1[5]) ∧
     is_surface_of(ENTITY[3], ENTITY[4]) ∧
      visible(ATTRIB[6]) ∧
       DIR_back(SITUATION[9]) ∧
        past(EVENT[7]) ∧
         past(EVENT[8]) ∧
          is_FACT_THAT(SITUATION[9], CRD_so(copula(EVENT[7], ENTITY[3], ATTRIB[6]), slid(EVENT[8], ENTITY[1], ENTITY[2]))))

# ::id 51_fiction_DICK-1952;AT16-2;NE
# ::snt The two of them stared down , silent and disturbed .
∃ ATTRIB[4] ATTRIB[3] REF1[2] EVENT[6] EVENT[5] EVENT[5] ENTITY[1] (
 REF1[2] = them ∧
  (CD_two(ENTITY[1]), is_of(ENTITY[1], REF1[2])) ∧
   silent(ATTRIB[3]) ∧
    disturbed(ATTRIB[4]) ∧
     past(EVENT[6]) ∧
      CONJ_and(stared_down(EVENT[6], ENTITY[1]),
       CONJ_and(xxx(EVENT[5], ENTITY[1], ATTRIB[3]), xxx(EVENT[5], ENTITY[1], ATTRIB[4]))))

# ::id 52_fiction_DICK-1952;AT16-3;NE
# ::snt Mile after mile of unbroken ruin stretched out , blackened slag , pitted and scarred , and occasional heaps of rock .
∃ ATTRIB[13] EVENT[14] GROUP[3] ENTITY[12] ENTITY[2] ENTITY[1] (
 mile(ENTITY[2]) ∧
  unbroken(ATTRIB[13]) ∧
   is_ruin_ATTRIBUTE(ENTITY[12], ATTRIB[13]) ∧
    ∃ ATTRIB[5] EVENT[7] EVENT[8] ENTITY[4] (
     blackened(ATTRIB[5]) ∧
      CONJ_and(pitted(EVENT[7], _, ENTITY[4]), scarred(EVENT[8], _, ENTITY[4])) ∧
       is_slag_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧ is_element_of(ENTITY[4], GROUP[3])) ∧
     ∃ ATTRIB[10] ENTITY[11] GROUP[9] (
      occasional(ATTRIB[10]) ∧
       rock(ENTITY[11]) ∧
        is_heaps_ATTRIBUTE(GROUP[9], ATTRIB[10]) ∧ is_heaps_of(GROUP[9], ENTITY[11]) ∧ is_subset_of_or_equal_to(GROUP[9], GROUP[3])) ∧
     is_-ENTITY-_namely(ENTITY[12], GROUP[3]) ∧
      is_Mile_of(ENTITY[1], ENTITY[12]) ∧ is_Mile_after(ENTITY[1], ENTITY[2]) ∧
       past(EVENT[14]) ∧ stretched_out(EVENT[14], ENTITY[1]))

# ::id 53_fiction_DICK-1952;AT17-1;NE
# ::snt Suddenly Nasha jumped .
∃ EVENT[1] (ADV_suddenly(EVENT[1]) ∧ past(EVENT[1]) ∧ jumped(EVENT[1], ENTITY[Nasha]))

# ::id 54_fiction_DICK-1952;AT17-2;NE
# ::snt " Look ! Over there , at the edge .
∃ ENTITY[1] (
 edge(ENTITY[1]) ∧ IMPERATIVE(∃ EVENT[2] (LOC_over_there(EVENT[2]) ∧ look(EVENT[2]) ∧ at(EVENT[2]) = ENTITY[1])))

# ::id 55_fiction_DICK-1952;AT17-3;NE
# ::snt Do you see it ? "
QUEST(∃ REF2[2] REF1[1] EVENT[3] (REF1[1] = you ∧ REF2[2] = it ∧ do_see(EVENT[3], REF1[1], REF2[2])))

# ::id 56_fiction_DICK-1952;AT18-1;NE
# ::snt They stared .
∃ REF1[1] EVENT[2] (REF1[1] = they ∧ past(EVENT[2]) ∧ stared(EVENT[2], REF1[1]))

# ::id 57_fiction_DICK-1952;AT18-2;NE
# ::snt Something rose up ,
SOME ENTITY[1] (thing(ENTITY[1]), ∃ EVENT[2] (past(EVENT[2]) ∧ rose_up(EVENT[2], ENTITY[1])))

# ::id 58_fiction_DICK-1952;AT18-3;NE
# ::snt not rock ,
¬ ∃ EVENT[2] ENTITY[1] (rock(ENTITY[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = ENTITY[1])

# ::id 59_fiction_DICK-1952;AT18-4;NE
# ::snt not an accidental formation .
¬ ∃ ATTRIB[2] EVENT[3] ENTITY[1] (
      accidental(ATTRIB[2]) ∧ is_formation_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[1])

# ::id 60_fiction_DICK-1952;AT18-5;NE
# ::snt It was round ,
∃ REF1[1] EVENT[3] ENTITY[2] (REF1[1] = it ∧ round(ENTITY[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], REF1[1], ENTITY[2]))

# ::id 61_fiction_DICK-1952;AT18-5;NE
# ::snt a circle of dots ,
∃ EVENT[3] GROUP[2] ENTITY[1] (dots(GROUP[2]) ∧ is_circle_of(ENTITY[1], GROUP[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[1])

# ::id 62_fiction_DICK-1952;AT18-5;NE
# ::snt white pellets on the dead skin of the planet .
∃ ATTRIB[2] ATTRIB[4] EVENT[6] GROUP[1] ENTITY[5] ENTITY[3] (
 dead(ATTRIB[4]) ∧
  planet(ENTITY[5]) ∧
   is_skin_of(ENTITY[3], ENTITY[5]) ∧ is_skin_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
    white(ATTRIB[2]) ∧
     is_pellets_on(GROUP[1], ENTITY[3]) ∧ is_pellets_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧
      xxx(EVENT[6]) ∧ LINK(EVENT[6]) = GROUP[1])

# ::id 63_fiction_DICK-1952;AT18-6;NE
# ::snt A city ?
QUEST(∃ EVENT[2] ENTITY[1] (city(ENTITY[1]) ∧ xxx(EVENT[2], ENTITY[1])))

# ::id 64_fiction_DICK-1952;AT18-7;NE
# ::snt Buildings of some kind ?
QUEST(∃ EVENT[3] GROUP[1] (SOME ENTITY[2] (kind(ENTITY[2]), is_Buildings_of(GROUP[1], ENTITY[2])) ∧ xxx(EVENT[3], GROUP[1])))

# ::id 65_fiction_DICK-1952;AT19-1;NE
# ::snt " Please turn the ship , " Nasha said excitedly .
∃ EVENT[2] EVENT[1] ENTITY[3] (
 ship(ENTITY[3]) ∧
  ADV_excitedly(EVENT[2]) ∧
   is_before(EVENT[2], EVENT[1]) ∧
    please(EVENT[1], said(EVENT[2], ENTITY[Nasha], IMPERATIVE(∃ EVENT[4] turn(EVENT[4], _, ENTITY[3])))))

# ::id 66_fiction_DICK-1952;AT19-2;NE
# ::snt She pushed her dark hair from her face .
∃ REF3[6] ATTRIB[4] REF2[3] REF1[1] EVENT[7] ENTITY[5] ENTITY[2] (
 REF1[1] = she ∧
  REF2[3] = her ∧
   dark(ATTRIB[4]) ∧
    is_hair_POS(ENTITY[2], REF2[3]) ∧ is_hair_ATTRIBUTE(ENTITY[2], ATTRIB[4]) ∧
     REF3[6] = her ∧
      is_face_POS(ENTITY[5], REF3[6]) ∧
       past(EVENT[7]) ∧ pushed(EVENT[7], REF1[1], ENTITY[2]) ∧ from(EVENT[7]) = ENTITY[5])

# ::id 67_fiction_DICK-1952;AT19-3;NE
# ::snt " Turn the ship
∃ ENTITY[1] (ship(ENTITY[1]) ∧ IMPERATIVE(∃ EVENT[2] turn(EVENT[2], _, ENTITY[1])))

# ::id 68_fiction_DICK-1952;AT19-4;NE
# ::snt and let 's see what it is ! "
IMPERATIVE(∃ REF1[2] EVENT[3] EVENT[1] (
      REF1[2] = 's ∧
       let(EVENT[1],
        see(EVENT[3], REF1[2],
         QUEST(∃ REF2[5] EVENT[6] ? ENTITY[4] (REF2[5] = it ∧ copula(EVENT[6], REF2[5], ENTITY[4])))))))

# ::id 69_fiction_DICK-1952;AT20-1;NE
# ::snt The ship turned , changing its course .
∃ REF1[3] EVENT[5] EVENT[4] ENTITY[2] ENTITY[1] (
 ship(ENTITY[1]) ∧
  REF1[3] = its ∧
   is_course_POS(ENTITY[2], REF1[3]) ∧
    past(EVENT[5]) ∧ CONJ_and(turned(EVENT[5], ENTITY[1]), changing(EVENT[4], ENTITY[1], ENTITY[2])))

# ::id 70_fiction_DICK-1952;AT20-2;NE
# ::snt As they came over the white dots the Captain lowered the ship , dropping it down as much as he dared .
∃ REF2[8] REF1[2] SITUATION[1] ATTRIB[4] EVENT[5] EVENT[15] GROUP[3] ENTITY[7] ENTITY[6] (
 white(ATTRIB[4]) ∧
  is_dots_ATTRIBUTE(GROUP[3], ATTRIB[4]) ∧
   Captain(ENTITY[6]) ∧
    ship(ENTITY[7]) ∧
     REF1[2] = they ∧
      is_FACT_THAT(SITUATION[1], came(EVENT[5], REF1[2]) ∧ over(EVENT[5]) = GROUP[3]) ∧
       REF2[8] = it ∧
        past(EVENT[5]) ∧
         past(EVENT[15]) ∧
          CONJ_and(lowered(EVENT[15], ENTITY[6], ENTITY[7]) ∧ As(EVENT[15]) = SITUATION[1],
           AS_MUCH REF3[12] EVENT[13] DEGREE[10] DEGREE[9] (
            (REF3[12] = he ∧ dared(EVENT[13], REF3[12]) ∧ MSR(EVENT[13]) = DEGREE[10] ∧
             is_as(DEGREE[9], DEGREE[10]) ∧ past(EVENT[13])),
            ∃ EVENT[14] (dropping_down(EVENT[14], ENTITY[7], REF2[8]) ∧ MSR(EVENT[14]) = DEGREE[9]))))

# ::id 71_fiction_DICK-1952;AT20-3;NE
# ::snt " Piers , " he said .
∃ REF1[1] EVENT[4] EVENT[2] GROUP[3] (
 REF1[1] = he ∧
  Piers(GROUP[3]) ∧
   past(EVENT[2]) ∧ said(EVENT[2], REF1[1], xxx(EVENT[4]) ∧ LINK(EVENT[4]) = GROUP[3]))

# ::id 72_fiction_DICK-1952;AT20-4;NE
# ::snt " Piers of some sort of stone .
∃ EVENT[4] GROUP[1] (
 SOME ENTITY[3] ENTITY[2] ((stone(ENTITY[3]) ∧ is_sort_of(ENTITY[2], ENTITY[3])), is_Piers_of(GROUP[1], ENTITY[2])) ∧
  xxx(EVENT[4]) ∧ LINK(EVENT[4]) = GROUP[1])

# ::id 73_fiction_DICK-1952;AT20-5;NE
# ::snt Perhaps poured artificial stone .
∃ ATTRIB[3] ATTRIB[2] EVENT[4] ENTITY[1] (
 poured(ATTRIB[2]) ∧
  artificial(ATTRIB[3]) ∧
   is_stone_ATTRIBUTE(ENTITY[1], ATTRIB[3]) ∧ is_stone_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
    ADV_perhaps(EVENT[4]) ∧ xxx(EVENT[4], _, ENTITY[1]))

# ::id 74_fiction_DICK-1952;AT20-6;NE
# ::snt The remains of a city . "
∃ EVENT[3] ENTITY[2] GROUP[1] (city(ENTITY[2]) ∧ is_remains_of(GROUP[1], ENTITY[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[1])

# ::id 75_fiction_DICK-1952;AT21-1;NE
# ::snt " Oh , dear , " Nasha murmured .
∃ EVENT[1] (past(EVENT[1]) ∧ murmured(EVENT[1], ENTITY[Nasha]))

# ::id 76_fiction_DICK-1952;AT21-2;NE
# ::snt " How awful . "
QUEST(∃ ENTITY[2] ? ENTITY[1] (awful(ENTITY[2]) ∧ is_ADV(ENTITY[2], ENTITY[1]) ∧ xxx(ENTITY[2])))

# ::id 77_fiction_DICK-1952;AT21-3;NE
# ::snt She watched the ruins disappear behind them .
∃ REF2[4] REF1[1] EVENT[5] EVENT[2] GROUP[3] (
 ruins(GROUP[3]) ∧
  REF1[1] = she ∧
   REF2[4] = them ∧
    past(EVENT[2]) ∧
     watched(EVENT[2], REF1[1], disappear(EVENT[5], GROUP[3]) ∧ behind(EVENT[5]) = REF2[4]))

# ::id 78_fiction_DICK-1952;AT21-4;NE
# ::snt In a half-circle the white squares jutted from the slag , chipped and cracked , like broken teeth .
∃ ATTRIB[8] ATTRIB[6] ATTRIB[5] ATTRIB[8] ATTRIB[6] ATTRIB[4] ATTRIB[3] EVENT[10] ENTITY[1] GROUP[7] GROUP[7] ENTITY[9] GROUP[2] (
 white(ATTRIB[3]) ∧
  chipped(ATTRIB[4]) ∧
   broken(ATTRIB[8]) ∧
    is_teeth_ATTRIBUTE(GROUP[7], ATTRIB[8]) ∧
     is_like_comp(ATTRIB[6], GROUP[7]) ∧
      cracked(ATTRIB[5]) ∧
       broken(ATTRIB[8]) ∧
        is_teeth_ATTRIBUTE(GROUP[7], ATTRIB[8]) ∧
         is_like_comp(ATTRIB[6], GROUP[7]) ∧
          CONJ_and(is_squares_ATTRIBUTE(GROUP[2], ATTRIB[4]) ∧ is_squares_ATTRIBUTE(GROUP[2], ATTRIB[6]) ∧ is_squares_ATTRIBUTE(GROUP[2], ATTRIB[3]),
           is_squares_ATTRIBUTE(GROUP[2], ATTRIB[5]) ∧ is_squares_ATTRIBUTE(GROUP[2], ATTRIB[6]) ∧ is_squares_ATTRIBUTE(GROUP[2], ATTRIB[3])) ∧
           slag(ENTITY[9]) ∧
            half-circle(ENTITY[1]) ∧
             past(EVENT[10]) ∧
              jutted(EVENT[10], GROUP[2]) ∧ from(EVENT[10]) = ENTITY[9] ∧ In(EVENT[10]) = ENTITY[1])

# ::id 79_fiction_DICK-1952;AT22-1;NE
# ::snt " There 's nothing alive , " the Captain said at last .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (
 Captain(ENTITY[1]) ∧
  ADV_last(ATTRIB[2]) ∧
   past(EVENT[3]) ∧
    said(EVENT[3], ENTITY[1],
     ¬ ∃ ATTRIB[5] EVENT[6] ENTITY[4] (alive(ATTRIB[5]) ∧ is_thing_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧ copula(EVENT[6], ENTITY[4]))) ∧
     at(EVENT[3]) = ATTRIB[2])

# ::id 80_fiction_DICK-1952;AT22-2;NE
# ::snt " I think we 'll go right back ;
∃ REF2[3] REF1[1] EVENT[2] (
 REF1[1] = i ∧
  REF2[3] = we ∧
   think(EVENT[2], REF1[1], MD'll(∃ EVENT[4] (DIR_right_back(EVENT[4]) ∧ go(EVENT[4], REF2[3])))))

# ::id 81_fiction_DICK-1952;AT22-3;NE
# ::snt I know most of the crew want to .
∃ REF1[1] EVENT[2] ENTITY[4] (
 crew(ENTITY[4]) ∧
  REF1[1] = i ∧ know(EVENT[2], REF1[1], MOST ENTITY[3] (is_of(ENTITY[3], ENTITY[4]), ∃ EVENT[5] want(EVENT[5], ENTITY[3]))))

# ::id 82_fiction_DICK-1952;AT22-4;NE
# ::snt Get the Government Receiving Station on the sender
∃ ENTITY[1] (sender(ENTITY[1]) ∧ IMPERATIVE(∃ EVENT[2] (get(EVENT[2], _, ENTITY[Government_Receiving_Station]) ∧ on(EVENT[2]) = ENTITY[1])))

# ::id 83_fiction_DICK-1952;AT22-5;NE
# ::snt and tell them what we found , and that we --
CONJ_and(IMPERATIVE(∃ REF1[1] EVENT[2] (
           REF1[1] = them ∧
            tell(EVENT[2], _, REF1[1],
             QUEST(∃ REF2[4] EVENT[5] ? ENTITY[3] (
                   REF2[4] = we ∧
                    is_before(EVENT[5], EVENT[2]) ∧ found(EVENT[5], REF2[4], ENTITY[3])))))),
 IMPERATIVE(∃ REF3[8] REF4[6] EVENT[9] EVENT[7] (
       REF4[6] = them ∧
        REF3[8] = we ∧ tell(EVENT[7], _, REF4[6], xxx(EVENT[9], REF3[8])))))

# ::id 84_fiction_DICK-1952;AT23-1;NE
# ::snt He staggered .
∃ REF1[1] EVENT[2] (REF1[1] = he ∧ past(EVENT[2]) ∧ staggered(EVENT[2], REF1[1]))

# ::id 85_fiction_DICK-1952;AT24-1;NE
# ::snt The first atomic shell had struck the ship , spinning it around .
∃ REF1[4] ATTRIB[2] EVENT[7] EVENT[5] ENTITY[3] ENTITY[1] (
 first(ATTRIB[2]) ∧
  is_atomic_shell_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
   ship(ENTITY[3]) ∧
    REF1[4] = it ∧
     past(EVENT[7]) ∧
      ADV_around(EVENT[5]) ∧ CONJ_and(had_struck(EVENT[7], ENTITY[1], ENTITY[3]), spinning(EVENT[5], ENTITY[3], REF1[4])))

# ::id 86_fiction_DICK-1952;AT24-2;NE
# ::snt The Captain fell to the floor , crashing into the control table .
∃ EVENT[5] EVENT[4] ENTITY[3] ENTITY[2] ENTITY[1] (
 Captain(ENTITY[1]) ∧
  floor(ENTITY[2]) ∧
   control_table(ENTITY[3]) ∧
    past(EVENT[5]) ∧
     CONJ_and(fell(EVENT[5], ENTITY[1]) ∧ to(EVENT[5]) = ENTITY[2],
      crashing(EVENT[4], ENTITY[1]) ∧ into(EVENT[4]) = ENTITY[3]))

# ::id 87_fiction_DICK-1952;AT24-3;NE
# ::snt Papers and instruments rained down on him .
∃ REF1[4] EVENT[5] GROUP[1] (
 ∃ GROUP[2] (Papers(GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[2], GROUP[1])) ∧
  ∃ GROUP[3] (instruments(GROUP[3]) ∧ is_subset_of_or_equal_to(GROUP[3], GROUP[1])) ∧
  REF1[4] = him ∧ past(EVENT[5]) ∧ rained_down(EVENT[5], GROUP[1]) ∧ on(EVENT[5]) = REF1[4])

# ::id 88_fiction_DICK-1952;AT24-4;NE
# ::snt As he started to his feet the second shell struck .
∃ REF2[4] REF1[2] SITUATION[1] ATTRIB[7] EVENT[5] EVENT[8] GROUP[3] ENTITY[6] (
 second(ATTRIB[7]) ∧
  is_shell_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧
   REF1[2] = he ∧
    REF2[4] = his ∧
     is_feet_POS(GROUP[3], REF2[4]) ∧
      is_FACT_THAT(SITUATION[1], started(EVENT[5], REF1[2]) ∧ to(EVENT[5]) = GROUP[3]) ∧
       past(EVENT[5]) ∧
        past(EVENT[8]) ∧ struck(EVENT[8], ENTITY[6]) ∧ As(EVENT[8]) = SITUATION[1])

# ::id 89_fiction_DICK-1952;AT24-5;NE
# ::snt The ceiling cracked open ,
∃ EVENT[2] ENTITY[1] (ceiling(ENTITY[1]) ∧ past(EVENT[2]) ∧ cracked_open(EVENT[2], ENTITY[1]))

# ::id 90_fiction_DICK-1952;AT24-6;NE
# ::snt struts and girders twisted and bent .
∃ EVENT[4] EVENT[5] GROUP[1] (
 ∃ GROUP[2] (struts(GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[2], GROUP[1])) ∧
  ∃ GROUP[3] (girders(GROUP[3]) ∧ is_subset_of_or_equal_to(GROUP[3], GROUP[1])) ∧
  past(EVENT[4]) ∧ past(EVENT[5]) ∧ CONJ_and(twisted(EVENT[4], GROUP[1]), bent(EVENT[5], GROUP[1])))

# ::id 91_fiction_DICK-1952;AT24-7;NE
# ::snt The ship shuddered , falling suddenly down , then righting itself as automatic controls took over .
∃ ATTRIB[7] SITUATION[5] REF1[4] SITUATION[10] GROUP[6] EVENT[11] EVENT[8] EVENT[9] EVENT[2] ENTITY[1] (
 ship(ENTITY[1]) ∧
  past(EVENT[11]) ∧
   TMP_then(SITUATION[10]) ∧
    past(EVENT[8]) ∧
     ADV_suddenly(EVENT[2]) ∧
      REF1[4] = itself ∧
       automatic(ATTRIB[7]) ∧
        is_controls_ATTRIBUTE(GROUP[6], ATTRIB[7]) ∧
         is_FACT_THAT(SITUATION[5], took_over(EVENT[8], GROUP[6])) ∧
          CONJ_and(CONJ_and(shuddered(EVENT[11], ENTITY[1]),
                is_FACT_THAT(SITUATION[10], righting(EVENT[9], ENTITY[1], REF1[4]) ∧ as(EVENT[9]) = SITUATION[5])),
           falling_down(EVENT[2], ENTITY[1])))

# ::id 92_fiction_DICK-1952;AT25-1;NE
# ::snt The Captain lay on the floor by the smashed control board .
∃ ATTRIB[4] EVENT[5] ENTITY[3] ENTITY[2] ENTITY[1] (
 Captain(ENTITY[1]) ∧
  floor(ENTITY[2]) ∧
   smashed(ATTRIB[4]) ∧
    is_control_board_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
     past(EVENT[5]) ∧
      lay(EVENT[5], ENTITY[1]) ∧ by(EVENT[5]) = ENTITY[3] ∧ on(EVENT[5]) = ENTITY[2])

# ::id 93_fiction_DICK-1952;AT25-2;NE
# ::snt In the corner Nasha struggled to free herself from the debris .
∃ REF1[3] PRP[2] EVENT[5] EVENT[6] ENTITY[4] ENTITY[1] (
 corner(ENTITY[1]) ∧
  debris(ENTITY[4]) ∧
   REF1[3] = herself ∧
    is_FACT_THAT(PRP[2], free(EVENT[5], ENTITY[Nasha], REF1[3]) ∧ from(EVENT[5]) = ENTITY[4]) ∧
     past(EVENT[6]) ∧
      struggled(EVENT[6], ENTITY[Nasha]) ∧ PRP(EVENT[6]) = PRP[2] ∧ In(EVENT[6]) = ENTITY[1])

# ::id 94_fiction_DICK-1952;AT26-1;NE
# ::snt Outside the men were already sealing the gaping leaks in the side of the ship , through which the precious air was rushing , dissipating into the void beyond .
∃ ATTRIB[8] ATTRIB[3] EVENT[12] EVENT[11] EVENT[10] ENTITY[5] ENTITY[9] ENTITY[7] ENTITY[4] GROUP[2] GROUP[1] (
 men(GROUP[1]) ∧
  gaping(ATTRIB[3]) ∧
   ship(ENTITY[5]) ∧
    is_side_of(ENTITY[4], ENTITY[5]) ∧
     precious(ATTRIB[8]) ∧
      is_air_ATTRIBUTE(ENTITY[7], ATTRIB[8]) ∧
       void(ENTITY[9]) ∧
        CONJ_and(was_rushing(EVENT[11], ENTITY[7]) ∧ through(EVENT[11]) = GROUP[2],
         dissipating(EVENT[10], ENTITY[7]) ∧ into_beyond(EVENT[10]) = ENTITY[9]) ∧
         is_leaks_in(GROUP[2], ENTITY[4]) ∧ is_leaks_ATTRIBUTE(GROUP[2], ATTRIB[3]) ∧
         past(EVENT[11]) ∧
          LOC_outside(EVENT[12]) ∧
           TMP_already(EVENT[12]) ∧ past(EVENT[12]) ∧ were_sealing(EVENT[12], GROUP[1], GROUP[2]))

# ::id 95_fiction_DICK-1952;AT26-2;NE
# ::snt " Help me ! " Dorle was shouting .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  was_shouting(EVENT[1], ENTITY[Dorle], IMPERATIVE(∃ REF1[2] EVENT[3] (REF1[2] = me ∧ help(EVENT[3], _, REF1[2])))))

# ::id 96_fiction_DICK-1952;AT26-4;NE
# ::snt " Fire over here , wiring ignited . "
∃ EVENT[3] EVENT[4] ENTITY[2] ENTITY[1] (
 Fire(ENTITY[1]) ∧
  wiring(ENTITY[2]) ∧
   CONJ_and(ignited(EVENT[3], _, ENTITY[2]), xxx(EVENT[4]) ∧ LINK(EVENT[4]) = ENTITY[1]))

# ::id 97_fiction_DICK-1952;AT26-5;NE
# ::snt Two men came running .
∃ EVENT[3] EVENT[2] GROUP[1] (
 (CD_two(GROUP[1]), men(GROUP[1])) ∧
  past(EVENT[3]) ∧ CONJ_and(came(EVENT[3], GROUP[1]), running(EVENT[2], GROUP[1])))

# ::id 98_fiction_DICK-1952;AT26-6;NE
# ::snt Tance watched helplessly , his eyeglasses broken and bent .
∃ SITUATION[7] ATTRIB[4] ATTRIB[3] REF1[2] EVENT[5] EVENT[5] EVENT[6] GROUP[1] (
 REF1[2] = his ∧
  is_eyeglasses_POS(GROUP[1], REF1[2]) ∧
   broken(ATTRIB[3]) ∧
    bent(ATTRIB[4]) ∧
     ADV_helplessly(SITUATION[7]) ∧
      past(EVENT[6]) ∧
       is_FACT_THAT(SITUATION[7],
        CONJ_and(CONJ_and(xxx(EVENT[5], GROUP[1], ATTRIB[3]), xxx(EVENT[5], GROUP[1], ATTRIB[4])),
         watched(EVENT[6], ENTITY[Tance]))))

# ::id 99_fiction_DICK-1952;AT27-1;NE
# ::snt " So there is life here , after all , " he said , half to himself .
∃ SITUATION[7] SITUATION[8] REF2[2] REF1[1] EVENT[3] ENTITY[4] (
 REF1[1] = he ∧
  REF2[2] = himself ∧
   life(ENTITY[4]) ∧
    ADV_so(SITUATION[8]) ∧
     LOC_here(SITUATION[7]) ∧
      past(EVENT[3]) ∧
       said(EVENT[3], REF1[1],
        is_FACT_THAT(SITUATION[8],
         is_FACT_THAT(SITUATION[7], ALL ENTITY[5] ∃ EVENT[6] (copula(EVENT[6], ENTITY[4]) ∧ after(EVENT[6]) = ENTITY[5])))) ∧
        half_to(EVENT[3]) = REF2[2])

# ::id 100_fiction_DICK-1952;AT27-2;NE
# ::snt " But how could -- "
QUEST(∃ SITUATION[3] ? ENTITY[1] (is_ADV(SITUATION[3], ENTITY[1]) ∧ is_FACT_THAT(SITUATION[3], MD_could(∃ EVENT[2] xxx(EVENT[2])))))

# ::id 101_fiction_DICK-1952;AT27-3;NE
# ::snt " Give us a hand , " Fomar said , hurrying past .
∃ EVENT[2] EVENT[1] (
 past(EVENT[2]) ∧
  CONJ_and(said(EVENT[2], ENTITY[Fomar],
        IMPERATIVE(∃ REF1[3] EVENT[5] ENTITY[4] (
              REF1[3] = us ∧
               hand(ENTITY[4]) ∧ give(EVENT[5], _, ENTITY[4], REF1[3])))),
   hurrying_past(EVENT[1], ENTITY[Fomar])))

# ::id 102_fiction_DICK-1952;AT28-1;NE
# ::snt " Give us a hand ,
IMPERATIVE(∃ REF1[1] EVENT[3] ENTITY[2] (REF1[1] = us ∧ hand(ENTITY[2]) ∧ give(EVENT[3], _, ENTITY[2], REF1[1])))

# ::id 103_fiction_DICK-1952;AT28-2;NE
# ::snt we 've got to land the ship ! "
∃ REF1[1] EVENT[4] EVENT[2] ENTITY[3] (ship(ENTITY[3]) ∧ REF1[1] = we ∧ 've_got(EVENT[2], REF1[1], land(EVENT[4], REF1[1], ENTITY[3])))

# ::id 104_fiction_DICK-1952;AT28-3;NE
# ::snt It was night .
∃ REF1[1] EVENT[3] ENTITY[2] (REF1[1] = it ∧ night(ENTITY[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], REF1[1], ENTITY[2]))

# ::id 105_fiction_DICK-1952;AT29-1;NE
# ::snt A few stars glinted above them , winking through the drifting silt that blew across the surface of the planet .
∃ ATTRIB[4] EVENT[8] ENTITY[7] ENTITY[6] ENTITY[3] (
 drifting(ATTRIB[4]) ∧
  planet(ENTITY[7]) ∧
   is_surface_of(ENTITY[6], ENTITY[7]) ∧
    blew(EVENT[8], ENTITY[3]) ∧ across(EVENT[8]) = ENTITY[6] ∧ is_silt_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
     past(EVENT[8]) ∧
      FEW GROUP[1] (stars(GROUP[1]),
       ∃ REF1[2] EVENT[10] EVENT[9] (
        REF1[2] = them ∧
         past(EVENT[10]) ∧
          CONJ_and(glinted(EVENT[10], GROUP[1]) ∧ above(EVENT[10]) = REF1[2],
           winking(EVENT[9], GROUP[1]) ∧ through(EVENT[9]) = ENTITY[3]))))

# ::id 106_fiction_DICK-1952;AT29-2;NE
# ::snt Dorle peered out , frowning .
∃ EVENT[2] EVENT[1] (past(EVENT[2]) ∧ CONJ_and(peered_out(EVENT[2], ENTITY[Dorle]), frowning(EVENT[1], ENTITY[Dorle])))

# ::id 107_fiction_DICK-1952;AT30-1;NE
# ::snt " What a place to be stuck in . "
QUEST(∃ EVENT[2] ? ENTITY[1] (place(ENTITY[1]) ∧ be_stuck_in(EVENT[2], _, ENTITY[1])))

# ::id 108_fiction_DICK-1952;AT30-2;NE
# ::snt He resumed his work , hammering the bent metal hull of the ship back into place .
∃ REF2[3] REF1[1] ATTRIB[5] EVENT[10] EVENT[8] ENTITY[7] ENTITY[2] ENTITY[6] ENTITY[4] (
 bent(ATTRIB[5]) ∧
  ship(ENTITY[6]) ∧
   is_metal_hull_of(ENTITY[4], ENTITY[6]) ∧ is_metal_hull_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
    REF1[1] = he ∧
     REF2[3] = his ∧
      is_work_POS(ENTITY[2], REF2[3]) ∧
       place(ENTITY[7]) ∧
        past(EVENT[10]) ∧
         is_DIR_back_into(EVENT[8], ENTITY[7]) ∧
          CONJ_and(resumed(EVENT[10], REF1[1], ENTITY[2]), hammering(EVENT[8], ENTITY[2], ENTITY[4])))

# ::id 109_fiction_DICK-1952;AT31-1;NE
# ::snt He was wearing a pressure suit ;
∃ REF1[1] EVENT[3] ENTITY[2] (REF1[1] = he ∧ pressure_suit(ENTITY[2]) ∧ past(EVENT[3]) ∧ was_wearing(EVENT[3], REF1[1], ENTITY[2]))

# ::id 110_fiction_DICK-1952;AT31-2;NE
# ::snt there were still many small leaks ,
MANY ATTRIB[2] GROUP[1] ((small(ATTRIB[2]) ∧ is_leaks_ATTRIBUTE(GROUP[1], ATTRIB[2])),
 ∃ EVENT[3] (TMP_still(EVENT[3]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], GROUP[1])))

# ::id 111_fiction_DICK-1952;AT31-3;NE
# ::snt and radioactive particles from the atmosphere had already found their way into the ship .
∃ REF1[5] ATTRIB[2] EVENT[7] ENTITY[4] GROUP[1] ENTITY[3] ENTITY[6] (
 atmosphere(ENTITY[3]) ∧
  ship(ENTITY[6]) ∧
   radioactive(ATTRIB[2]) ∧
    is_particles_from(GROUP[1], ENTITY[3]) ∧ is_particles_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧
     REF1[5] = their ∧
      is_way_POS(ENTITY[4], REF1[5]) ∧
       TMP_already(EVENT[7]) ∧
        past(EVENT[7]) ∧ had_found(EVENT[7], GROUP[1], ENTITY[4]) ∧ into(EVENT[7]) = ENTITY[6])

# ::id 112_fiction_DICK-1952;AT32-1;NE
# ::snt Nasha and Fomar were sitting at the table in the control room , pale and solemn , studying the inventory lists .
∃ EVENT[8] EVENT[7] GROUP[1] GROUP[6] ENTITY[5] ENTITY[4] (
 table(ENTITY[4]) ∧
  control_room(ENTITY[5]) ∧
   inventory_lists(GROUP[6]) ∧
    ∃ ATTRIB[2] (pale_solemn(ATTRIB[2]) ∧ is_ATTRIBUTE(ENTITY[Nasha], ATTRIB[2]) ∧ is_element_of(ENTITY[Nasha], GROUP[1])) ∧
     ∃ ATTRIB[3] (pale_solemn(ATTRIB[3]) ∧ is_ATTRIBUTE(ENTITY[Fomar], ATTRIB[3]) ∧ is_element_of(ENTITY[Fomar], GROUP[1])) ∧
     past(EVENT[8]) ∧
      CONJ_and(were_sitting(EVENT[8], GROUP[1]) ∧ in(EVENT[8]) = ENTITY[5] ∧ at(EVENT[8]) = ENTITY[4],
       studying(EVENT[7], GROUP[1], GROUP[6])))

# ::id 113_fiction_DICK-1952;AT33-1;NE
# ::snt " Low on carbohydrates , " Fomar said . " We can break down the stored fats if we want to , but -- "
∃ SITUATION[9] REF1[3] ATTRIB[5] EVENT[1] GROUP[2] GROUP[4] (
 stored(ATTRIB[5]) ∧
  is_fats_ATTRIBUTE(GROUP[4], ATTRIB[5]) ∧
   carbohydrates(GROUP[2]) ∧
    REF1[3] = we ∧
     is_ADV_low_on(SITUATION[9], GROUP[2]) ∧
      past(EVENT[1]) ∧
       said(EVENT[1], ENTITY[Fomar],
        is_FACT_THAT(SITUATION[9],
         MD_can(∀ REF2[6] EVENT[7] CND_if(REF2[6] = we ∧ want(EVENT[7], REF2[6]), ∃ EVENT[8] break_down(EVENT[8], REF1[3], GROUP[4]))))))

# ::id 114_fiction_DICK-1952;AT33-2;NE
# ::snt " I wonder if we could find anything outside . "
∃ REF1[1] EVENT[2] (
 REF1[1] = i ∧
  wonder(EVENT[2], REF1[1],
   QUEST(∃ REF2[3] (
         REF2[3] = we ∧
          MD_could(ANY ENTITY[4] (thing(ENTITY[4]),
                ∃ EVENT[5] (DIR_outside(EVENT[5]) ∧ find(EVENT[5], REF2[3], ENTITY[4]))))))))

# ::id 115_fiction_DICK-1952;AT33-3;NE
# ::snt Nasha went to the window .
∃ EVENT[2] ENTITY[1] (window(ENTITY[1]) ∧ past(EVENT[2]) ∧ went(EVENT[2], ENTITY[Nasha]) ∧ to(EVENT[2]) = ENTITY[1])

# ::id 116_fiction_DICK-1952;AT33-4;NE
# ::snt " How uninviting it looks . "
QUEST(∃ REF1[2] EVENT[3] ? ATTRIB[1] (uninviting(ATTRIB[1]) ∧ REF1[2] = it ∧ looks(EVENT[3], REF1[2], ATTRIB[1])))

# ::id 117_fiction_DICK-1952;AT33-5;NE
# ::snt She paced back and forth , very slender and small , her face dark with fatigue .
∃ ATTRIB[5] REF2[4] ATTRIB[1] REF1[2] EVENT[7] ENTITY[6] ENTITY[3] (
 REF1[2] = she ∧
  very_slender_small(ATTRIB[1]) ∧
   is_ATTRIBUTE(REF1[2], ATTRIB[1]) ∧
    REF2[4] = her ∧
     fatigue(ENTITY[6]) ∧
      is_dark_with(ATTRIB[5], ENTITY[6]) ∧
       is_face_ATTRIBUTE(ENTITY[3], ATTRIB[5]) ∧ is_face_POS(ENTITY[3], REF2[4]) ∧
        CONJ_and(DIR_back(EVENT[7]), DIR_forth(EVENT[7])) ∧
         past(EVENT[7]) ∧ paced(EVENT[7], REF1[2]) ∧ ADV(EVENT[7]) = ENTITY[3])

# ::id 118_fiction_DICK-1952;AT33-6;NE
# ::snt " What do you suppose an exploring party would find ? "
QUEST(∃ ATTRIB[5] REF1[2] EVENT[3] ENTITY[4] ? ENTITY[1] (
      REF1[2] = you ∧
       exploring(ATTRIB[5]) ∧
        is_party_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
         do_suppose(EVENT[3], REF1[2], MD_would(∃ EVENT[6] find(EVENT[6], ENTITY[4], ENTITY[1])))))

# ::id 119_fiction_DICK-1952;AT34-1;NE
# ::snt Fomar shrugged .
∃ EVENT[1] (past(EVENT[1]) ∧ shrugged(EVENT[1], ENTITY[Fomar]))

# ::id 120_fiction_DICK-1952;AT34-2;NE
# ::snt " Not much .
NOT_MUCH ENTITY[1] ∃ EVENT[2] (xxx(EVENT[2]) ∧ LINK(EVENT[2]) = ENTITY[1])

# ::id 121_fiction_DICK-1952;AT34-3;NE
# ::snt Maybe a few weeds growing in cracks here and there .
∃ SITUATION[5] (
 ADV_maybe(SITUATION[5]) ∧
  is_FACT_THAT(SITUATION[5],
   FEW GROUP[1] (weeds(GROUP[1]),
    ∃ EVENT[3] GROUP[2] (
     cracks(GROUP[2]) ∧
      LOC_here_there(EVENT[3]) ∧ growing(EVENT[3], GROUP[1]) ∧ in(EVENT[3]) = GROUP[2]))))

# ::id 122_fiction_DICK-1952;AT34-4;NE
# ::snt Nothing we could use .
¬ ∃ REF1[3] EVENT[5] ENTITY[1] (
      REF1[3] = we ∧
       MD_could(∃ EVENT[4] use(EVENT[4], REF1[3], ENTITY[1])) ∧ thing(ENTITY[1]) ∧
        xxx(EVENT[5]) ∧ LINK(EVENT[5]) = ENTITY[1])

# ::id 123_fiction_DICK-1952;AT34-5;NE
# ::snt Anything that would adapt to this environment would be toxic , lethal . "
∃ ENTITY[3] (
 environment(ENTITY[3]) ∧
  ANY ENTITY[1] (MD_would(∃ EVENT[4] (adapt(EVENT[4], ENTITY[1]) ∧ to(EVENT[4]) = ENTITY[3])) ∧ thing(ENTITY[1]),
   MD_would(∃ ATTRIB[6] ATTRIB[5] EVENT[7] EVENT[7] (
         toxic(ATTRIB[5]) ∧
          lethal(ATTRIB[6]) ∧
           copula(EVENT[7], ENTITY[1], ATTRIB[5]) ∧ copula(EVENT[7], ENTITY[1], ATTRIB[6])))))

# ::id 124_fiction_DICK-1952;AT35-1;NE
# ::snt Nasha paused , rubbing her cheek .
∃ REF1[2] EVENT[4] EVENT[3] ENTITY[1] (
 REF1[2] = her ∧
  is_cheek_POS(ENTITY[1], REF1[2]) ∧
   past(EVENT[4]) ∧ CONJ_and(paused(EVENT[4], ENTITY[Nasha]), rubbing(EVENT[3], ENTITY[Nasha], ENTITY[1])))

# ::id 125_fiction_DICK-1952;AT35-2;NE
# ::snt There was a deep scratch there , still red and swollen .
∃ ATTRIB[4] ATTRIB[3] ATTRIB[2] EVENT[5] ENTITY[1] (
 deep(ATTRIB[2]) ∧
  still_red(ATTRIB[3]) ∧
   swollen(ATTRIB[4]) ∧
    CONJ_and(is_scratch_ATTRIBUTE(ENTITY[1], ATTRIB[3]) ∧ is_scratch_ATTRIBUTE(ENTITY[1], ATTRIB[2]),
     is_scratch_ATTRIBUTE(ENTITY[1], ATTRIB[4]) ∧ is_scratch_ATTRIBUTE(ENTITY[1], ATTRIB[2])) ∧
     LOC_there(EVENT[5]) ∧ past(EVENT[5]) ∧ copula(EVENT[5], ENTITY[1]))

# ::id 126_fiction_DICK-1952;AT35-3;NE
# ::snt " Then how do you explain it ?
QUEST(∃ REF2[3] REF1[2] EVENT[4] ? ENTITY[1] (
      REF1[2] = you ∧
       REF2[3] = it ∧ is_ADV_then_ADV(EVENT[4], ENTITY[1]) ∧ do_explain(EVENT[4], REF1[2], REF2[3])))

# ::id 127_fiction_DICK-1952;AT35-4;NE
# ::snt According to your theory the inhabitants must have died in their skins , fried like yams .
∃ REF1[3] EVENT[4] ENTITY[2] GROUP[1] (
 inhabitants(GROUP[1]) ∧
  REF1[3] = your ∧
   is_theory_POS(ENTITY[2], REF1[3]) ∧
    CONJ_and(according(EVENT[4], GROUP[1]) ∧ to(EVENT[4]) = ENTITY[2],
     MD_must(∃ ATTRIB[7] REF2[6] EVENT[11] EVENT[10] EVENT[9] GROUP[8] GROUP[5] (
           REF2[6] = their ∧
            is_skins_POS(GROUP[5], REF2[6]) ∧
             yams(GROUP[8]) ∧
              is_like_comp(ATTRIB[7], GROUP[8]) ∧
               CONJ_and(have_died(EVENT[11], GROUP[1]) ∧ in(EVENT[11]) = GROUP[5],
                CONJ_and(fried(EVENT[10], _, GROUP[1]), xxx(EVENT[9], GROUP[1], ATTRIB[7])))))))

# ::id 128_fiction_DICK-1952;AT35-5;NE
# ::snt But who fired on us ?
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (
      REF1[2] = us ∧
       past(EVENT[3]) ∧ fired(EVENT[3], ENTITY[1]) ∧ on(EVENT[3]) = REF1[2]))

# ::id 129_fiction_DICK-1952;AT35-6;NE
# ::snt Somebody detected us , made a decision , aimed a gun . "
SOME ENTITY[1] (body(ENTITY[1]),
 ∃ REF1[2] EVENT[3] EVENT[5] EVENT[7] ENTITY[4] ENTITY[6] (
  REF1[2] = us ∧
   decision(ENTITY[4]) ∧
    gun(ENTITY[6]) ∧
     past(EVENT[3]) ∧
      past(EVENT[5]) ∧
       past(EVENT[7]) ∧
        detected(EVENT[3], ENTITY[1], REF1[2]) ∧ made(EVENT[5], ENTITY[1], ENTITY[4]) ∧
         aimed(EVENT[7], ENTITY[1], ENTITY[6])))

# ::id 130_fiction_DICK-1952;AT36-1;NE
# ::snt " And gauged distance , " the Captain said feebly from the cot in the corner .
∃ SITUATION[8] REF1[5] EVENT[7] EVENT[4] ENTITY[6] ENTITY[3] ENTITY[2] ENTITY[1] (
 Captain(ENTITY[1]) ∧
  corner(ENTITY[3]) ∧
   is_cot_in(ENTITY[2], ENTITY[3]) ∧
    REF1[5] = *pro* ∧
     distance(ENTITY[6]) ∧
      ADV_feebly(SITUATION[8]) ∧
       is_before(EVENT[7], EVENT[4]) ∧
        past(EVENT[4]) ∧
         is_FACT_THAT(SITUATION[8],
          said(EVENT[4], ENTITY[1], gauged(EVENT[7], REF1[5], ENTITY[6])) ∧ from(EVENT[4]) = ENTITY[2]))

# ::id 131_fiction_DICK-1952;AT36-2;NE
# ::snt He turned toward them .
∃ REF2[2] REF1[1] EVENT[3] (
 REF1[1] = he ∧
  REF2[2] = them ∧ past(EVENT[3]) ∧ turned(EVENT[3], REF1[1]) ∧ toward(EVENT[3]) = REF2[2])

# ::id 132_fiction_DICK-1952;AT36-3;NE
# ::snt " That 's the part that worries me .
∃ REF1[4] EVENT[6] EVENT[5] ENTITY[2] ENTITY[1] (
 REF1[4] = me ∧
  worries(EVENT[5], ENTITY[2], REF1[4]) ∧ part(ENTITY[2]) ∧ copula(EVENT[6], ENTITY[1], ENTITY[2]))

# ::id 133_fiction_DICK-1952;AT36-4;NE
# ::snt The first shell put us out of commission ,
∃ REF1[3] ATTRIB[2] EVENT[5] ENTITY[4] ENTITY[1] (
 first(ATTRIB[2]) ∧
  is_shell_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
   REF1[3] = us ∧
    commission(ENTITY[4]) ∧
     past(EVENT[5]) ∧ put_out(EVENT[5], ENTITY[1], REF1[3]) ∧ of(EVENT[5]) = ENTITY[4])

# ::id 134_fiction_DICK-1952;AT36-5;NE
# ::snt the second almost destroyed us .
∃ REF1[2] EVENT[3] ENTITY[1] (
 second(ENTITY[1]) ∧
  REF1[2] = us ∧ ADV_almost(EVENT[3]) ∧ past(EVENT[3]) ∧ destroyed(EVENT[3], ENTITY[1], REF1[2]))

# ::id 135_fiction_DICK-1952;AT36-6;NE
# ::snt They were well aimed , perfectly aimed .
∃ ATTRIB[3] ATTRIB[2] REF1[1] EVENT[4] EVENT[4] (
 REF1[1] = they ∧
  well_aimed(ATTRIB[2]) ∧
   perfectly_aimed(ATTRIB[3]) ∧
    past(EVENT[4]) ∧
     past(EVENT[4]) ∧ copula(EVENT[4], REF1[1], ATTRIB[2]) ∧ copula(EVENT[4], REF1[1], ATTRIB[3]))

# ::id 136_fiction_DICK-1952;AT36-7;NE
# ::snt We 're not such an easy target . "
∃ REF1[1] (
 REF1[1] = we ∧
  ¬ ∃ ATTRIB[4] ATTRIB[3] EVENT[5] ENTITY[2] (
        such(ATTRIB[3]) ∧
         easy(ATTRIB[4]) ∧
          is_target_ATTRIBUTE(ENTITY[2], ATTRIB[4]) ∧ is_target_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧ copula(EVENT[5], REF1[1], ENTITY[2])))

# ::id 137_fiction_DICK-1952;AT37-1;NE
# ::snt " True . "
∃ ATTRIB[1] EVENT[2] (true(ATTRIB[1]) ∧ xxx(EVENT[2], _, ATTRIB[1]))

# ::id 138_fiction_DICK-1952;AT37-2;NE
# ::snt Fomar nodded .
∃ EVENT[1] (past(EVENT[1]) ∧ nodded(EVENT[1], ENTITY[Fomar]))

# ::id 139_fiction_DICK-1952;AT37-3;NE
# ::snt " Well , perhaps we 'll know the answer before we leave here .
∃ SITUATION[8] REF1[1] ENTITY[2] (
 answer(ENTITY[2]) ∧
  REF1[1] = we ∧
   ADV_perhaps(SITUATION[8]) ∧
    is_FACT_THAT(SITUATION[8],
     MD'll(∃ REF2[4] SITUATION[3] EVENT[5] EVENT[7] (
           REF2[4] = we ∧
            is_FACT_THAT(SITUATION[3], leave(EVENT[5], REF2[4])) ∧
             LOC_here(EVENT[5]) ∧
              know(EVENT[7], REF1[1], ENTITY[2]) ∧ before(EVENT[7]) = SITUATION[3]))))

# ::id 140_fiction_DICK-1952;AT37-4;NE
# ::snt What a strange situation !
EXCLAMATIVE(∃ ATTRIB[2] ENTITY[1] ENTITY[3] (
      strange(ATTRIB[2]) ∧
       is_situation_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ xxx(ENTITY[3]) ∧ T(ENTITY[3]) = ENTITY[1]))

# ::id 141_fiction_DICK-1952;AT37-5;NE
# ::snt All our reasoning tells us that no life could exist ;
ALL REF1[2] ENTITY[1] ((REF1[2] = our ∧ is_reasoning_POS(ENTITY[1], REF1[2])), ∃ REF2[3] EVENT[4] (
  REF2[3] = us ∧
   tells(EVENT[4], ENTITY[1], REF2[3], ¬ ∃ ENTITY[5] (life(ENTITY[5]) ∧ MD_could(∃ EVENT[6] exist(EVENT[6], ENTITY[5]))))))

# ::id 142_fiction_DICK-1952;AT37-6;NE
# ::snt the whole planet burned dry ,
∃ ATTRIB[3] ATTRIB[2] EVENT[4] ENTITY[1] (
 whole(ATTRIB[2]) ∧
  is_planet_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ dry(ATTRIB[3]) ∧ past(EVENT[4]) ∧ burned(EVENT[4], ENTITY[1], ATTRIB[3]))

# ::id 143_fiction_DICK-1952;AT37-7;NE
# ::snt the atmosphere itself gone , completely poisoned . "
∃ REF1[2] EVENT[5] EVENT[3] ENTITY[1] (
 REF1[2] = itself ∧
  is_atmosphere_RFL(ENTITY[1], REF1[2]) ∧
   ADV_completely(EVENT[3]) ∧ CONJ_and(gone(EVENT[5], ENTITY[1]), poisoned(EVENT[3], _, ENTITY[1])))

# ::id 144_fiction_DICK-1952;AT38-1;NE
# ::snt " The gun that fired the projectiles survived , " Nasha said .
∃ EVENT[6] EVENT[1] EVENT[5] GROUP[4] ENTITY[2] (
 projectiles(GROUP[4]) ∧
  fired(EVENT[5], ENTITY[2], GROUP[4]) ∧ gun(ENTITY[2]) ∧
   is_before(EVENT[5], EVENT[1]) ∧
    is_before(EVENT[6], EVENT[1]) ∧ past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Nasha], survived(EVENT[6], ENTITY[2])))

# ::id 145_fiction_DICK-1952;AT38-2;NE
# ::snt " Why not people ? "
QUEST(∃ SITUATION[4] ? ENTITY[1] (
      is_ADV(SITUATION[4], ENTITY[1]) ∧
       is_FACT_THAT(SITUATION[4], ¬ ∃ EVENT[3] GROUP[2] (people(GROUP[2]) ∧ xxx(EVENT[3], _, GROUP[2])))))

# ::id 146_fiction_DICK-1952;AT39-1;NE
# ::snt " It 's not the same .
∃ REF1[1] ATTRIB[3] ENTITY[2] (
 same(ATTRIB[3]) ∧
  is_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧ REF1[1] = it ∧ ¬ ∃ EVENT[4] copula(EVENT[4], REF1[1], ENTITY[2]))

# ::id 147_fiction_DICK-1952;AT39-2;NE
# ::snt Metal does n't need air to breathe .
∃ PRP[2] EVENT[3] ENTITY[1] (
 Metal(ENTITY[1]) ∧
  is_FACT_THAT(PRP[2], breathe(EVENT[3], ENTITY[1])) ∧
   ¬ ∃ EVENT[5] ENTITY[4] (air(ENTITY[4]) ∧ does_need(EVENT[5], ENTITY[1], ENTITY[4]) ∧ PRP(EVENT[5]) = PRP[2]))

# ::id 148_fiction_DICK-1952;AT39-3;NE
# ::snt Metal does n't get leukemia from radioactive particles .
∃ ENTITY[1] (
 Metal(ENTITY[1]) ∧
  ¬ ∃ ATTRIB[4] EVENT[5] GROUP[3] ENTITY[2] (
        leukemia(ENTITY[2]) ∧
         radioactive(ATTRIB[4]) ∧
          is_particles_ATTRIBUTE(GROUP[3], ATTRIB[4]) ∧
           does_get(EVENT[5], ENTITY[1], ENTITY[2]) ∧ from(EVENT[5]) = GROUP[3]))

# ::id 149_fiction_DICK-1952;AT39-4;NE
# ::snt Metal does n't need food and water . "
∃ ENTITY[1] (
 Metal(ENTITY[1]) ∧
  ¬ ∃ EVENT[5] GROUP[2] (
        ∃ ENTITY[3] (food(ENTITY[3]) ∧ is_element_of(ENTITY[3], GROUP[2])) ∧
         ∃ ENTITY[4] (water(ENTITY[4]) ∧ is_element_of(ENTITY[4], GROUP[2])) ∧ does_need(EVENT[5], ENTITY[1], GROUP[2])))

# ::id 150_fiction_DICK-1952;AT40-1;NE
# ::snt There was silence .
∃ EVENT[2] ENTITY[1] (silence(ENTITY[1]) ∧ past(EVENT[2]) ∧ copula(EVENT[2], ENTITY[1]))

# ::id 151_fiction_DICK-1952;AT41-1;NE
# ::snt " A paradox , " Nasha said .
∃ EVENT[3] EVENT[1] ENTITY[2] (
 paradox(ENTITY[2]) ∧
  past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Nasha], xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[2]))

# ::id 152_fiction_DICK-1952;AT41-2;NE
# ::snt " Anyhow , in the morning I think we should send out a search party .
∃ REF2[4] REF1[2] EVENT[3] ENTITY[1] (
 morning(ENTITY[1]) ∧
  REF1[2] = i ∧
   REF2[4] = we ∧
    think(EVENT[3], REF1[2], MD_should(∃ EVENT[6] ENTITY[5] (search_party(ENTITY[5]) ∧ send_out(EVENT[6], REF2[4], ENTITY[5])))) ∧
     in(EVENT[3]) = ENTITY[1])

# ::id 153_fiction_DICK-1952;AT41-3;NE
# ::snt And meanwhile we should keep on trying to get the ship in condition for the trip back . "
∃ REF1[2] TIME[1] ENTITY[7] ENTITY[5] (
 ship(ENTITY[5]) ∧
  DIR_back(ENTITY[7]) ∧ trip(ENTITY[7]) ∧
   meanwhile(TIME[1]) ∧
    REF1[2] = we ∧
     MD_should(∃ SITUATION[3] EVENT[8] EVENT[4] EVENT[9] ENTITY[6] (
           is_condition_for(ENTITY[6], ENTITY[7]) ∧
            is_FACT_THAT(SITUATION[3],
             trying(EVENT[4], REF1[2],
              get(EVENT[8], REF1[2], ENTITY[5]) ∧ in(EVENT[8]) = ENTITY[6])) ∧
             keep_on(EVENT[9], REF1[2], SITUATION[3]) ∧ is_contained_in(TMP(EVENT[9]), TIME[1]))))

# ::id 154_fiction_DICK-1952;AT42-1;NE
# ::snt " It 'll be days before we can take off , " Fomar said .
∃ REF1[2] EVENT[1] (
 REF1[2] = it ∧
  past(EVENT[1]) ∧
   said(EVENT[1], ENTITY[Fomar],
    MD'll(∃ REF2[5] SITUATION[4] EVENT[7] GROUP[3] (
          days(GROUP[3]) ∧
           REF2[5] = we ∧
            is_FACT_THAT(SITUATION[4], MD_can(∃ EVENT[6] take_off(EVENT[6], REF2[5]))) ∧
             copula(EVENT[7], REF1[2], GROUP[3]) ∧ before(EVENT[7]) = SITUATION[4]))))

# ::id 155_fiction_DICK-1952;AT42-2;NE
# ::snt " We should keep every man working here .
∃ REF1[1] (
 REF1[1] = we ∧
  MD_should(∃ SITUATION[2] EVENT[6] (
        is_FACT_THAT(SITUATION[2],
         ∀ ENTITY[3] (man(ENTITY[3]) → ∃ EVENT[4] (LOC_here(EVENT[4]) ∧ working(EVENT[4], ENTITY[3])))) ∧
         keep(EVENT[6], REF1[1], SITUATION[2]))))

# ::id 156_fiction_DICK-1952;AT42-3;NE
# ::snt We can n't afford to send out a party . "
∃ REF1[1] (
 REF1[1] = we ∧
  MD_can(¬ ∃ EVENT[4] EVENT[2] ENTITY[3] (party(ENTITY[3]) ∧ afford(EVENT[2], REF1[1], send_out(EVENT[4], REF1[1], ENTITY[3])))))

# ::id 157_fiction_DICK-1952;AT43-1;NE
# ::snt Nasha smiled a little .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (little(ATTRIB[2]) ∧ is_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ past(EVENT[3]) ∧ smiled(EVENT[3], ENTITY[Nasha], ENTITY[1]))

# ::id 158_fiction_DICK-1952;AT43-2;NE
# ::snt " We 'll send you in the first party .
∃ REF1[1] ATTRIB[4] ENTITY[3] (
 first(ATTRIB[4]) ∧
  is_party_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
   REF1[1] = we ∧
    MD'll(∃ REF2[2] EVENT[5] (REF2[2] = you ∧ send(EVENT[5], REF1[1], REF2[2]) ∧ in(EVENT[5]) = ENTITY[3])))

# ::id 159_fiction_DICK-1952;AT43-3;NE
# ::snt Maybe you can discover --
∃ SITUATION[3] REF1[1] (REF1[1] = you ∧ ADV_maybe(SITUATION[3]) ∧ is_FACT_THAT(SITUATION[3], MD_can(∃ EVENT[2] discover(EVENT[2], REF1[1]))))

# ::id 160_fiction_DICK-1952;AT43-4;NE
# ::snt what was it you were so interested in ? "
QUEST(∃ REF1[4] EVENT[5] EVENT[7] ENTITY[2] ? ENTITY[1] (
      REF1[4] = you ∧
       were_interested(EVENT[5], REF1[4]) ∧ in(EVENT[5]) = ENTITY[2] ∧
        ADV_so(EVENT[5]) ∧
         past(EVENT[5]) ∧
          past(EVENT[7]) ∧ copula(EVENT[7], ENTITY[2]) ∧ HIGH(EVENT[7]) = ENTITY[1]))

# ::id 161_fiction_DICK-1952;AT44-1;NE
# ::snt " Legumes .
∃ EVENT[2] GROUP[1] (Legumes(GROUP[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = GROUP[1])

# ::id 162_fiction_DICK-1952;AT44-2;NE
# ::snt Edible legumes . "
∃ ATTRIB[2] EVENT[3] GROUP[1] (edible(ATTRIB[2]) ∧ is_legumes_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[1])

# ::id 163_fiction_DICK-1952;AT45-1;NE
# ::snt " Maybe you can find some of them .
∃ SITUATION[5] REF1[1] (
 REF1[1] = you ∧
  ADV_maybe(SITUATION[5]) ∧
   is_FACT_THAT(SITUATION[5],
    MD_can(SOME REF2[3] ENTITY[2] ((REF2[3] = them ∧ is_of(ENTITY[2], REF2[3])), ∃ EVENT[4] find(EVENT[4], REF1[1], ENTITY[2])))))

# ::id 164_fiction_DICK-1952;AT45-2;NE
# ::snt Only -- "
∃ EVENT[1] xxx(EVENT[1])

# ::id 165_fiction_DICK-1952;AT46-1;NE
# ::snt " Only what ? "
QUEST(? ENTITY[2] ONLY ENTITY[1] (is_of(ENTITY[1], ENTITY[2]), ∃ ENTITY[3] (xxx(ENTITY[3]) ∧ T(ENTITY[3]) = ENTITY[1])))

# ::id 166_fiction_DICK-1952;AT47-1;NE
# ::snt " Only watch out .
IMPERATIVE(∃ EVENT[1] (Only(EVENT[1]) ∧ watch_out(EVENT[1])))

# ::id 167_fiction_DICK-1952;AT47-2;NE
# ::snt They fired on us once without even knowing who we were or what we came for .
∃ SITUATION[13] SITUATION[3] REF2[2] REF1[1] EVENT[4] EVENT[12] (
 REF1[1] = they ∧
  REF2[2] = us ∧
   is_FACT_THAT(SITUATION[3],
    knowing(EVENT[4], REF1[1],
     CONJ_or(QUEST(∃ REF3[6] EVENT[7] ? ENTITY[5] (
                REF3[6] = we ∧
                 is_before(EVENT[7], EVENT[4]) ∧ copula(EVENT[7], REF3[6], ENTITY[5]))),
      QUEST(∃ REF4[9] EVENT[10] ? ENTITY[8] (
            REF4[9] = we ∧
             is_before(EVENT[10], EVENT[4]) ∧
              came(EVENT[10], REF4[9]) ∧ for(EVENT[10]) = ENTITY[8]))))) ∧
    TMP_once(SITUATION[13]) ∧
     even(EVENT[4]) ∧
      past(EVENT[12]) ∧
       is_FACT_THAT(SITUATION[13],
        fired(EVENT[12], REF1[1]) ∧ without(EVENT[12]) = SITUATION[3] ∧ on(EVENT[12]) = REF2[2]))

# ::id 168_fiction_DICK-1952;AT47-3;NE
# ::snt Do you suppose that they fought with each other ?
QUEST(∃ REF2[3] REF1[1] EVENT[2] (
      REF1[1] = you ∧
       REF2[3] = they ∧
        do_suppose(EVENT[2], REF1[1],
         EACH ATTRIB[5] ENTITY[4] ((other(ATTRIB[5]) ∧ is_ATTRIBUTE(ENTITY[4], ATTRIB[5])),
          ∃ EVENT[6] (
           is_before(EVENT[6], EVENT[2]) ∧
            fought(EVENT[6], REF2[3]) ∧ with(EVENT[6]) = ENTITY[4])))))

# ::id 169_fiction_DICK-1952;AT47-4;NE
# ::snt Perhaps they could n't imagine anyone being friendly , under any circumstances .
∃ SITUATION[8] REF1[1] (
 REF1[1] = they ∧
  ADV_perhaps(SITUATION[8]) ∧
   is_FACT_THAT(SITUATION[8],
    MD_could(¬ ∃ SITUATION[2] (
               is_FACT_THAT(SITUATION[2],
                ANY ENTITY[3] (one(ENTITY[3]),
                 ∃ ATTRIB[4] EVENT[5] (friendly(ATTRIB[4]) ∧ being(EVENT[5], ENTITY[3], ATTRIB[4])))) ∧
                ANY GROUP[6] (circumstances(GROUP[6]),
                 ∃ EVENT[7] (imagine(EVENT[7], REF1[1], SITUATION[2]) ∧ under(EVENT[7]) = GROUP[6]))))))

# ::id 170_fiction_DICK-1952;AT47-5;NE
# ::snt What a strange evolutionary trait , inter-species warfare .
EXCLAMATIVE(∃ ATTRIB[4] ATTRIB[2] ENTITY[1] EVENT[5] ENTITY[3] (
      strange(ATTRIB[2]) ∧
       inter-species(ATTRIB[4]) ∧
        is_warfare_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧ is_evolutionary_trait_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ copula(EVENT[5], ENTITY[3], ENTITY[1])))

# ::id 171_fiction_DICK-1952;AT47-6;NE
# ::snt Fighting within the race ! "
∃ ATTRIB[1] EVENT[3] ENTITY[2] (race(ENTITY[2]) ∧ is_fighting_within(ATTRIB[1], ENTITY[2]) ∧ xxx(EVENT[3], _, ATTRIB[1]))

# ::id 172_fiction_DICK-1952;AT48-1;NE
# ::snt " We 'll know in the morning , " Fomar said .
∃ REF1[2] EVENT[1] ENTITY[3] (
 morning(ENTITY[3]) ∧
  REF1[2] = we ∧
   past(EVENT[1]) ∧
    said(EVENT[1], ENTITY[Fomar], MD'll(∃ EVENT[4] (know(EVENT[4], REF1[2]) ∧ in(EVENT[4]) = ENTITY[3]))))

# ::id 173_fiction_DICK-1952;AT48-2;NE
# ::snt " Let 's get some sleep . "
IMPERATIVE(∃ REF1[2] EVENT[1] (REF1[2] = 's ∧ let(EVENT[1], SOME ENTITY[3] (sleep(ENTITY[3]), ∃ EVENT[4] get(EVENT[4], REF1[2], ENTITY[3])))))

# ::id 174_fiction_DICK-1952;AT49-1;NE
# ::snt The sun came up chill and austere .
∃ ATTRIB[3] ATTRIB[2] EVENT[5] EVENT[4] EVENT[4] ENTITY[1] (
 sun(ENTITY[1]) ∧
  chill(ATTRIB[2]) ∧
   austere(ATTRIB[3]) ∧
    past(EVENT[5]) ∧
     CONJ_and(came_up(EVENT[5], ENTITY[1]),
      CONJ_and(xxx(EVENT[4], ENTITY[1], ATTRIB[2]), xxx(EVENT[4], ENTITY[1], ATTRIB[3]))))

# ::id 175_fiction_DICK-1952;AT49-2;NE
# ::snt The three people , two men and a woman , stepped through the port , dropping down on the hard ground below .
∃ ATTRIB[7] EVENT[9] EVENT[8] GROUP[2] ENTITY[3] GROUP[1] ENTITY[6] ENTITY[5] GROUP[4] (
 (CD_three(GROUP[4]), people(GROUP[4])) ∧
  (CD_two(GROUP[2]), men(GROUP[2])) ∧
   woman(ENTITY[3]) ∧
    is_subset_of_or_equal_to(GROUP[2], GROUP[1]) ∧ is_element_of(ENTITY[3], GROUP[1]) ∧
     is_-GROUP-_namely(GROUP[4], GROUP[1]) ∧
      port(ENTITY[5]) ∧
       hard(ATTRIB[7]) ∧
        ADV_below(ENTITY[6]) ∧ is_ground_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧
         past(EVENT[9]) ∧
          CONJ_and(stepped(EVENT[9], GROUP[4]) ∧ through(EVENT[9]) = ENTITY[5],
           dropping_down(EVENT[8], GROUP[4]) ∧ on(EVENT[8]) = ENTITY[6]))

# ::id 176_fiction_DICK-1952;AT50-1;NE
# ::snt " What a day , " Dorle said grumpily .
∃ EVENT[1] (
 ADV_grumpily(EVENT[1]) ∧
  past(EVENT[1]) ∧
   said(EVENT[1], ENTITY[Dorle],
    EXCLAMATIVE(∃ ENTITY[2] EVENT[3] (day(ENTITY[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[2]))))

# ::id 177_fiction_DICK-1952;AT50-2;NE
# ::snt " I said how glad I 'd be to walk on firm ground again , but -- "
∃ REF1[1] EVENT[2] (
 REF1[1] = i ∧
  past(EVENT[2]) ∧
   said(EVENT[2], REF1[1],
    QUEST(∃ REF2[4] ? ATTRIB[3] (
          glad(ATTRIB[3]) ∧
           REF2[4] = i ∧
            MD'd(∃ ATTRIB[7] EVENT[8] EVENT[5] ENTITY[6] (
                  firm(ATTRIB[7]) ∧
                   is_ground_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧
                    ADV_again(EVENT[8]) ∧
                     copula(EVENT[5], REF2[4], ATTRIB[3],
                      walk(EVENT[8], REF2[4]) ∧ on(EVENT[8]) = ENTITY[6])))))))

# ::id 178_fiction_DICK-1952;AT51-1;NE
# ::snt " Come on , " Nasha said . " Up beside me .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  said(EVENT[1], ENTITY[Nasha],
   IMPERATIVE(∃ REF1[2] EVENT[3] (REF1[2] = me ∧ come_on(EVENT[3]) ∧ Up_beside(EVENT[3]) = REF1[2]))))

# ::id 179_fiction_DICK-1952;AT51-2;NE
# ::snt I want to say something to you .
∃ REF1[1] EVENT[2] (
 REF1[1] = i ∧
  want(EVENT[2], REF1[1],
   SOME ENTITY[3] (thing(ENTITY[3]),
    ∃ REF2[4] EVENT[5] (REF2[4] = you ∧ say(EVENT[5], REF1[1], ENTITY[3]) ∧ to(EVENT[5]) = REF2[4]))))

# ::id 180_fiction_DICK-1952;AT51-3;NE
# ::snt Will you excuse us , Tance ? "
QUEST(MD_will(∃ REF2[2] REF1[1] EVENT[3] (
           REF1[1] = you ∧
            REF2[2] = us ∧ excuse(EVENT[3], REF1[1], REF2[2]) ∧ VOC(EVENT[3]) = ENTITY[Tance])))

# ::id 181_fiction_DICK-1952;AT51-4;NE
# ::snt Tance nodded gloomily .
∃ EVENT[1] (ADV_gloomily(EVENT[1]) ∧ past(EVENT[1]) ∧ nodded(EVENT[1], ENTITY[Tance]))

# ::id 182_fiction_DICK-1952;AT52-1;NE
# ::snt Dorle caught up with Nasha .
∃ EVENT[1] (past(EVENT[1]) ∧ caught_up(EVENT[1], ENTITY[Dorle]) ∧ with(EVENT[1]) = ENTITY[Nasha])

# ::id 183_fiction_DICK-1952;AT52-2;NE
# ::snt They walked together ,
∃ REF1[1] EVENT[2] (REF1[1] = they ∧ ADV_together(EVENT[2]) ∧ past(EVENT[2]) ∧ walked(EVENT[2], REF1[1]))

# ::id 184_fiction_DICK-1952;AT52-3;NE
# ::snt their metal shoes crunching the ground underfoot .
∃ REF1[2] EVENT[4] GROUP[1] ENTITY[3] (ground_underfoot(ENTITY[3]) ∧ REF1[2] = their ∧ is_metal_shoes_POS(GROUP[1], REF1[2]) ∧ crunching(EVENT[4], GROUP[1], ENTITY[3]))

# ::id 185_fiction_DICK-1952;AT52-4;NE
# ::snt Nasha glanced at him .
∃ REF1[1] EVENT[2] (REF1[1] = him ∧ past(EVENT[2]) ∧ glanced(EVENT[2], ENTITY[Nasha]) ∧ at(EVENT[2]) = REF1[1])

# ::id 186_fiction_DICK-1952;AT52-5;NE
# ::snt " Listen .
IMPERATIVE(∃ EVENT[1] listen(EVENT[1]))

# ::id 187_fiction_DICK-1952;AT53-1;NE
# ::snt The Captain is dying .
∃ EVENT[2] ENTITY[1] (Captain(ENTITY[1]) ∧ is_dying(EVENT[2], ENTITY[1]))

# ::id 188_fiction_DICK-1952;AT53-2;NE
# ::snt No one knows except the two of us .
∃ REF1[3] ENTITY[2] (
 REF1[3] = us ∧
  (CD_two(ENTITY[2]), is_of(ENTITY[2], REF1[3])) ∧
   ¬ ∃ EVENT[4] ENTITY[1] (one(ENTITY[1]) ∧ knows(EVENT[4], ENTITY[1]) ∧ except(EVENT[4]) = ENTITY[2]))

# ::id 189_fiction_DICK-1952;AT53-3;NE
# ::snt By the end of the day-period of this planet he 'll be dead .
∃ REF1[4] ENTITY[3] ENTITY[2] ENTITY[1] (
 planet(ENTITY[3]) ∧
  is_day-period_of(ENTITY[2], ENTITY[3]) ∧
   is_end_of(ENTITY[1], ENTITY[2]) ∧
    REF1[4] = he ∧
     MD'll(∃ ATTRIB[5] EVENT[6] (dead(ATTRIB[5]) ∧ copula(EVENT[6], REF1[4], ATTRIB[5]) ∧ By(EVENT[6]) = ENTITY[1])))

# ::id 190_fiction_DICK-1952;AT53-4;NE
# ::snt The shock did something to his heart .
∃ ENTITY[1] (
 shock(ENTITY[1]) ∧
  SOME ENTITY[2] (thing(ENTITY[2]),
   ∃ REF1[4] EVENT[5] ENTITY[3] (
    REF1[4] = his ∧
     is_heart_POS(ENTITY[3], REF1[4]) ∧
      past(EVENT[5]) ∧ did(EVENT[5], ENTITY[1], ENTITY[2]) ∧ to(EVENT[5]) = ENTITY[3])))

# ::id 191_fiction_DICK-1952;AT53-5;NE
# ::snt He was almost sixty , you know . "
∃ REF1[3] REF2[1] EVENT[5] EVENT[2] ENTITY[4] (
 REF2[1] = you ∧
  REF1[3] = he ∧
   CD_almost_sixty(ENTITY[4]) ∧
    is_before(EVENT[5], EVENT[2]) ∧ know(EVENT[2], REF2[1], copula(EVENT[5], REF1[3], ENTITY[4])))

# ::id 192_fiction_DICK-1952;AT54-1;NE
# ::snt Dorle nodded .
∃ EVENT[1] (past(EVENT[1]) ∧ nodded(EVENT[1], ENTITY[Dorle]))

# ::id 193_fiction_DICK-1952;AT54-2;NE
# ::snt " That 's bad .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (bad(ATTRIB[2]) ∧ copula(EVENT[3], ENTITY[1], ATTRIB[2]))

# ::id 194_fiction_DICK-1952;AT54-3;NE
# ::snt I have a great deal of respect for him .
∃ REF2[5] ATTRIB[3] REF1[1] EVENT[6] ENTITY[4] ENTITY[2] (
 REF1[1] = i ∧
  great(ATTRIB[3]) ∧
   REF2[5] = him ∧
    is_respect_for(ENTITY[4], REF2[5]) ∧
     is_deal_of(ENTITY[2], ENTITY[4]) ∧ is_deal_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧ have(EVENT[6], REF1[1], ENTITY[2]))

# ::id 195_fiction_DICK-1952;AT54-4;NE
# ::snt You will be captain in his place , of course . Since you 're vice-captain now -- "
∃ REF1[1] (
 REF1[1] = you ∧
  MD_will(∃ REF3[6] REF2[4] EVENT[8] EVENT[10] ENTITY[3] ENTITY[7] ENTITY[5] ENTITY[2] (
        REF2[4] = his ∧
         is_place_POS(ENTITY[3], REF2[4]) ∧
          is_captain_in(ENTITY[2], ENTITY[3]) ∧
           course(ENTITY[5]) ∧
            REF3[6] = you ∧
             vice-captain(ENTITY[7]) ∧
              TMP_now(EVENT[8]) ∧
               CRD_Since(copula(EVENT[8], REF3[6], ENTITY[7]),
                copula(EVENT[10], REF1[1], ENTITY[2]) ∧ of(EVENT[10]) = ENTITY[5]))))

# ::id 196_fiction_DICK-1952;AT55-1;NE
# ::snt " No .
¬ ∃ EVENT[2] ENTITY[1] (xxx(EVENT[2]) ∧ LINK(EVENT[2]) = ENTITY[1])

# ::id 197_fiction_DICK-1952;AT55-2;NE
# ::snt I prefer to see someone else lead ,
∃ REF1[1] EVENT[3] EVENT[2] (
 REF1[1] = i ∧
  prefer(EVENT[2], REF1[1],
   see(EVENT[3], REF1[1], SOME ENTITY[4] (ADV_else(ENTITY[4]) ∧ one(ENTITY[4]), ∃ EVENT[5] lead(EVENT[5], ENTITY[4])))))

# ::id 198_fiction_DICK-1952;AT55-3;NE
# ::snt perhaps you or Fomar .
∃ EVENT[3] GROUP[1] (
 CONJ_or(∃ REF1[2] (REF1[2] = you ∧ is_element_of(REF1[2], GROUP[1])), is_element_of(ENTITY[Fomar], GROUP[1])) ∧
  ADV_perhaps(EVENT[3]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[1])

# ::id 199_fiction_DICK-1952;AT55-4;NE
# ::snt I 've been thinking over the situation
∃ REF1[1] EVENT[3] ENTITY[2] (situation(ENTITY[2]) ∧ REF1[1] = i ∧ 've_been_thinking(EVENT[3], REF1[1]) ∧ over(EVENT[3]) = ENTITY[2])

# ::id 200_fiction_DICK-1952;AT55-5;NE
# ::snt and it seems to me that I should declare myself mated to one of you , whichever of you wants to be captain .
∃ REF2[3] REF1[1] EVENT[2] (
 REF1[1] = me ∧
  REF2[3] = i ∧
   seems(EVENT[2],
    MD_should(∃ REF5[8] REF4[13] REF3[5] EVENT[11] EVENT[9] EVENT[14] EVENT[4] ENTITY[10] ENTITY[6] ENTITY[12] (
          REF3[5] = myself ∧
           REF4[13] = you ∧
            (CD_one(ENTITY[12]), is_of(ENTITY[12], REF4[13])) ∧
             REF5[8] = you ∧
              captain(ENTITY[10]) ∧
               wants(EVENT[9], ENTITY[6], copula(EVENT[11], ENTITY[6], ENTITY[10])) ∧
                is_-ENTITY-_namely(ENTITY[12], ENTITY[6]) ∧
                 declare(EVENT[4], REF2[3],
                  mated(EVENT[14], REF3[5]) ∧ to(EVENT[14]) = ENTITY[12])))) ∧
    to(EVENT[2]) = REF1[1])

# ::id 201_fiction_DICK-1952;AT55-6;NE
# ::snt Then I could devolve the responsibility . "
∃ SITUATION[4] REF1[1] ENTITY[2] (
 responsibility(ENTITY[2]) ∧
  REF1[1] = i ∧ TMP_then(SITUATION[4]) ∧ is_FACT_THAT(SITUATION[4], MD_could(∃ EVENT[3] devolve(EVENT[3], REF1[1], ENTITY[2]))))

# ::id 202_fiction_DICK-1952;AT56-1;NE
# ::snt " Well , I do n't want to be captain .
∃ REF1[1] (
 REF1[1] = i ∧
  ¬ ∃ EVENT[4] EVENT[2] ENTITY[3] (captain(ENTITY[3]) ∧ do_want(EVENT[2], REF1[1], copula(EVENT[4], REF1[1], ENTITY[3]))))

# ::id 203_fiction_DICK-1952;AT56-2;NE
# ::snt Let Fomar do it . "
IMPERATIVE(∃ REF1[2] EVENT[3] EVENT[1] (REF1[2] = it ∧ let(EVENT[1], do(EVENT[3], ENTITY[Fomar], REF1[2]))))

# ::id 204_fiction_DICK-1952;AT57-1;NE
# ::snt Nasha studied him , tall and blond , striding along beside her in his pressure suit .
∃ REF3[4] REF2[2] ATTRIB[8] ATTRIB[7] REF1[10] EVENT[9] EVENT[9] EVENT[5] EVENT[11] ENTITY[3] (
 REF1[10] = him ∧
  tall(ATTRIB[7]) ∧
   blond(ATTRIB[8]) ∧
    CONJ_and(xxx(EVENT[9], REF1[10], ATTRIB[7]), xxx(EVENT[9], REF1[10], ATTRIB[8])) ∧
     REF2[2] = her ∧
      REF3[4] = his ∧
       is_pressure_suit_POS(ENTITY[3], REF3[4]) ∧
        striding_along(EVENT[5], REF1[10]) ∧ in(EVENT[5]) = ENTITY[3] ∧ beside(EVENT[5]) = REF2[2] ∧
         past(EVENT[11]) ∧ studied(EVENT[11], ENTITY[Nasha], REF1[10]))

# ::id 205_fiction_DICK-1952;AT57-2;NE
# ::snt " I 'm rather partial to you , " she said .
∃ REF3[5] ATTRIB[4] REF2[3] REF1[1] EVENT[6] EVENT[2] (
 REF1[1] = she ∧
  REF2[3] = i ∧
   REF3[5] = you ∧
    is_rather_partial_to(ATTRIB[4], REF3[5]) ∧
     past(EVENT[2]) ∧ said(EVENT[2], REF1[1], copula(EVENT[6], REF2[3], ATTRIB[4])))

# ::id 206_fiction_DICK-1952;AT57-3;NE
# ::snt " We might try it for a time , at least .
∃ REF1[1] (
 REF1[1] = we ∧
  MD_might(∃ REF2[2] ENTITY[3] (
        REF2[2] = it ∧
         time(ENTITY[3]) ∧
          LEAST ENTITY[4] ∃ EVENT[5] (
           try(EVENT[5], REF1[1], REF2[2]) ∧
            at(EVENT[5]) = ENTITY[4] ∧ for(EVENT[5]) = ENTITY[3]))))

# ::id 207_fiction_DICK-1952;AT57-4;NE
# ::snt But do as you like .
IMPERATIVE(∃ ATTRIB[3] REF1[2] SITUATION[1] EVENT[4] EVENT[5] (
      REF1[2] = you ∧
       like(ATTRIB[3]) ∧
        is_SMC-FACT_THAT(SITUATION[1], xxx(EVENT[4], REF1[2], ATTRIB[3])) ∧
         do(EVENT[5]) ∧ as(EVENT[5]) = SITUATION[1]))

# ::id 208_fiction_DICK-1952;AT57-5;NE
# ::snt Look ,
IMPERATIVE(∃ EVENT[1] look(EVENT[1]))

# ::id 209_fiction_DICK-1952;AT57-6;NE
# ::snt we 're coming to something . "
∃ REF1[1] (
 REF1[1] = we ∧ SOME ENTITY[2] (thing(ENTITY[2]), ∃ EVENT[3] ('re_coming(EVENT[3], REF1[1]) ∧ to(EVENT[3]) = ENTITY[2])))

# ::id 210_fiction_DICK-1952;AT58-1;NE
# ::snt They stopped walking , letting Tance catch up .
∃ SITUATION[2] REF1[1] EVENT[3] EVENT[6] EVENT[5] EVENT[4] (
 REF1[1] = they ∧
  is_FACT_THAT(SITUATION[2], walking(EVENT[3], REF1[1])) ∧
   past(EVENT[6]) ∧
    CONJ_and(stopped(EVENT[6], REF1[1], SITUATION[2]), letting(EVENT[4], SITUATION[2], catch_up(EVENT[5], ENTITY[Tance]))))

# ::id 211_fiction_DICK-1952;AT58-2;NE
# ::snt In front of them was some sort of a ruined building .
∃ REF1[2] ENTITY[1] (
 REF1[2] = them ∧
  is_front_of(ENTITY[1], REF1[2]) ∧
   SOME ATTRIB[5] ENTITY[4] ENTITY[3] ((ruined(ATTRIB[5]) ∧ is_building_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧ is_sort_of(ENTITY[3], ENTITY[4])),
    ∃ EVENT[6] (past(EVENT[6]) ∧ copula(EVENT[6], ENTITY[3]) ∧ In(EVENT[6]) = ENTITY[1])))

# ::id 212_fiction_DICK-1952;AT58-3;NE
# ::snt Dorle stared around thoughtfully .
∃ EVENT[1] (ADV_thoughtfully(EVENT[1]) ∧ past(EVENT[1]) ∧ stared_around(EVENT[1], ENTITY[Dorle]))

# ::id 213_fiction_DICK-1952;AT59-1;NE
# ::snt " Do you see ?
QUEST(∃ REF1[1] EVENT[2] (REF1[1] = you ∧ do_see(EVENT[2], REF1[1])))

# ::id 214_fiction_DICK-1952;AT59-2;NE
# ::snt This whole place is a natural bowl , a huge valley .
∃ ATTRIB[4] ATTRIB[6] ATTRIB[2] EVENT[7] ENTITY[3] ENTITY[5] ENTITY[1] (
 whole(ATTRIB[2]) ∧
  is_place_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
   natural(ATTRIB[6]) ∧
    is_bowl_ATTRIBUTE(ENTITY[5], ATTRIB[6]) ∧
     huge(ATTRIB[4]) ∧
      is_valley_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧ is_-ENTITY-_namely(ENTITY[5], ENTITY[3]) ∧ copula(EVENT[7], ENTITY[1], ENTITY[5]))

# ::id 215_fiction_DICK-1952;AT59-3;NE
# ::snt See how the rock formations rise up on all sides , protecting the floor .
∃ ENTITY[5] GROUP[3] (
 rock_formations(GROUP[3]) ∧
  floor(ENTITY[5]) ∧
   IMPERATIVE(∃ EVENT[1] see(EVENT[1],
         QUEST(∃ SITUATION[8] ? ENTITY[2] (
               is_ADV(SITUATION[8], ENTITY[2]) ∧
                is_FACT_THAT(SITUATION[8],
                 ALL GROUP[4] (sides(GROUP[4]),
                  ∃ EVENT[7] EVENT[6] CONJ_and(rise_up(EVENT[7], GROUP[3]) ∧ on(EVENT[7]) = GROUP[4],
                   protecting(EVENT[6], GROUP[3], ENTITY[5])))))))))

# ::id 216_fiction_DICK-1952;AT59-4;NE
# ::snt Maybe some of the great blast was deflected here . "
∃ SITUATION[6] ATTRIB[3] ENTITY[2] (
 great(ATTRIB[3]) ∧
  is_blast_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
   ADV_maybe(SITUATION[6]) ∧
    is_FACT_THAT(SITUATION[6],
     SOME ENTITY[1] (is_of(ENTITY[1], ENTITY[2]),
      ∃ EVENT[4] (LOC_here(EVENT[4]) ∧ past(EVENT[4]) ∧ deflected(EVENT[4], _, ENTITY[1])))))

# ::id 217_fiction_DICK-1952;AT60-1;NE
# ::snt They wandered around the ruins , picking up rocks and fragments .
∃ REF1[1] EVENT[7] EVENT[6] GROUP[3] GROUP[2] (
 ruins(GROUP[2]) ∧
  REF1[1] = they ∧
   ∃ GROUP[4] (rocks(GROUP[4]) ∧ is_subset_of_or_equal_to(GROUP[4], GROUP[3])) ∧
    ∃ GROUP[5] (fragments(GROUP[5]) ∧ is_subset_of_or_equal_to(GROUP[5], GROUP[3])) ∧
    past(EVENT[7]) ∧ CONJ_and(wandered_around(EVENT[7], REF1[1], GROUP[2]), picking_up(EVENT[6], GROUP[2], GROUP[3])))

# ::id 218_fiction_DICK-1952;AT60-2;NE
# ::snt " I think this was a farm , " Tance said , examining a piece of wood .
∃ REF1[5] EVENT[9] EVENT[6] EVENT[4] EVENT[3] ENTITY[8] ENTITY[2] ENTITY[1] ENTITY[7] (
 REF1[5] = i ∧
  farm(ENTITY[8]) ∧
   wood(ENTITY[2]) ∧
    is_piece_of(ENTITY[1], ENTITY[2]) ∧
     is_before(EVENT[9], EVENT[6]) ∧
      past(EVENT[4]) ∧
       CONJ_and(said(EVENT[4], ENTITY[Tance], think(EVENT[6], REF1[5], copula(EVENT[9], ENTITY[7], ENTITY[8]))),
        examining(EVENT[3], ENTITY[Tance], ENTITY[1])))

# ::id 219_fiction_DICK-1952;AT60-3;NE
# ::snt " This was part of a tower windmill . "
∃ EVENT[4] ENTITY[3] ENTITY[2] ENTITY[1] (tower_windmill(ENTITY[3]) ∧ is_part_of(ENTITY[2], ENTITY[3]) ∧ past(EVENT[4]) ∧ copula(EVENT[4], ENTITY[1], ENTITY[2]))

# ::id 220_fiction_DICK-1952;AT61-1;NE
# ::snt " Really ? "
∃ ATTRIB[1] EVENT[2] (really(ATTRIB[1]) ∧ xxx(EVENT[2], _, ATTRIB[1]))

# ::id 221_fiction_DICK-1952;AT61-2;NE
# ::snt Nasha took the stick and turned it over .
∃ REF1[3] EVENT[2] EVENT[4] ENTITY[1] (
 stick(ENTITY[1]) ∧
  past(EVENT[2]) ∧
   past(EVENT[4]) ∧
    REF1[3] = it ∧ CONJ_and(took(EVENT[2], ENTITY[Nasha], ENTITY[1]), turned_over(EVENT[4], ENTITY[Nasha], REF1[3])))

# ::id 222_fiction_DICK-1952;AT61-3;NE
# ::snt " Interesting .
∃ ATTRIB[1] EVENT[2] (interesting(ATTRIB[1]) ∧ xxx(EVENT[2], _, ATTRIB[1]))

# ::id 223_fiction_DICK-1952;AT61-4;NE
# ::snt But let 's go ;
IMPERATIVE(∃ REF1[2] EVENT[3] EVENT[1] (REF1[2] = 's ∧ let(EVENT[1], go(EVENT[3], REF1[2]))))

# ::id 224_fiction_DICK-1952;AT61-5;NE
# ::snt we do n't have much time . "
∃ REF1[1] (REF1[1] = we ∧ ¬ MUCH ENTITY[2] (time(ENTITY[2]), ∃ EVENT[3] do_have(EVENT[3], REF1[1], ENTITY[2])))

# ::id 225_fiction_DICK-1952;AT62-1;NE
# ::snt " Look , " Dorle said suddenly . off there , a long way off .
∃ EVENT[1] (
 ADV_suddenly(EVENT[1]) ∧
  past(EVENT[1]) ∧
   said(EVENT[1], ENTITY[Dorle],
    IMPERATIVE(∃ ATTRIB[3] EVENT[4] DEGREE[2] (
          long(ATTRIB[3]) ∧
           is_way_ATTRIBUTE(DEGREE[2], ATTRIB[3]) ∧
            LOC_off_there(EVENT[4]) ∧ is_LOC_off_MSR(EVENT[4], DEGREE[2]) ∧ look(EVENT[4])))))

# ::id 226_fiction_DICK-1952;AT62-2;NE
# ::snt Is n't that something ? "
∃ ENTITY[1] QUEST(¬ SOME ENTITY[2] (thing(ENTITY[2]), ∃ EVENT[3] copula(EVENT[3], ENTITY[1], ENTITY[2])))

# ::id 227_fiction_DICK-1952;AT62-3;NE
# ::snt He pointed .
∃ REF1[1] EVENT[2] (REF1[1] = he ∧ past(EVENT[2]) ∧ pointed(EVENT[2], REF1[1]))

# ::id 228_fiction_DICK-1952;AT63-1;NE
# ::snt Nasha sucked in her breath .
∃ REF1[2] EVENT[3] ENTITY[1] (REF1[2] = her ∧ is_breath_POS(ENTITY[1], REF1[2]) ∧ past(EVENT[3]) ∧ sucked_in(EVENT[3], ENTITY[Nasha], ENTITY[1]))

# ::id 229_fiction_DICK-1952;AT63-2;NE
# ::snt " The white stones . "
∃ ATTRIB[2] EVENT[3] GROUP[1] (white(ATTRIB[2]) ∧ is_stones_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[1])

# ::id 230_fiction_DICK-1952;AT64-1;NE
# ::snt " What ? "
QUEST(∃ ENTITY[2] ? ENTITY[1] (xxx(ENTITY[2]) ∧ T(ENTITY[2]) = ENTITY[1]))

# ::id 231_fiction_DICK-1952;AT65-1;NE
# ::snt Nasha looked up at Dorle .
∃ EVENT[1] (past(EVENT[1]) ∧ looked_up(EVENT[1], ENTITY[Nasha]) ∧ at(EVENT[1]) = ENTITY[Dorle])

# ::id 232_fiction_DICK-1952;AT65-2;NE
# ::snt " The white stones ,
∃ ATTRIB[2] EVENT[3] GROUP[1] (white(ATTRIB[2]) ∧ is_stones_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[1])

# ::id 233_fiction_DICK-1952;AT65-3;NE
# ::snt the great broken teeth .
∃ ATTRIB[2] EVENT[3] GROUP[1] (great(ATTRIB[2]) ∧ is_broken_teeth_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[1])

# ::id 234_fiction_DICK-1952;AT65-4;NE
# ::snt We saw them , the Captain and I , from the control room . "
∃ REF3[5] REF1[4] EVENT[7] GROUP[1] ENTITY[2] ENTITY[6] (
 Captain(ENTITY[2]) ∧
  control_room(ENTITY[6]) ∧
   REF1[4] = we ∧
    is_element_of(ENTITY[2], GROUP[1]) ∧ ∃ REF2[3] (REF2[3] = i ∧ is_element_of(REF2[3], GROUP[1])) ∧
     is_-REF1-_namely(REF1[4], GROUP[1]) ∧
      REF3[5] = them ∧
       past(EVENT[7]) ∧ saw(EVENT[7], REF1[4], REF3[5]) ∧ from(EVENT[7]) = ENTITY[6])

# ::id 235_fiction_DICK-1952;AT65-5;NE
# ::snt She touched Dorle 's arm gently .
∃ REF1[1] EVENT[3] ENTITY[2] (
 REF1[1] = she ∧
  is_arm_POS(ENTITY[2], ENTITY[Dorle]) ∧ ADV_gently(EVENT[3]) ∧ past(EVENT[3]) ∧ touched(EVENT[3], REF1[1], ENTITY[2]))

# ::id 236_fiction_DICK-1952;AT65-6;NE
# ::snt " That 's where they fired from .
∃ SITUATION[7] REF1[3] EVENT[4] EVENT[6] ENTITY[1] (
 REF1[3] = they ∧
  is_LOC(EVENT[4], SITUATION[7]) ∧
   past(EVENT[4]) ∧ fired_from(EVENT[4], REF1[3]) ∧ is_FACT_THAT(SITUATION[7], copula(EVENT[6], ENTITY[1])))

# ::id 237_fiction_DICK-1952;AT65-7;NE
# ::snt I did n't think we had landed so close . "
∃ REF1[1] (
 REF1[1] = i ∧
  ¬ ∃ ATTRIB[4] REF2[3] EVENT[5] EVENT[2] (
        REF2[3] = we ∧
         so_close(ATTRIB[4]) ∧
          is_before(EVENT[5], EVENT[2]) ∧
           past(EVENT[2]) ∧
            did_think(EVENT[2], REF1[1], had_landed(EVENT[5], REF2[3]) ∧ LOC(EVENT[5]) = ATTRIB[4])))

# ::id 238_fiction_DICK-1952;AT66-1;NE
# ::snt " What is it ? " Tance said , coming up to them .
∃ REF2[1] EVENT[3] EVENT[2] (
 REF2[1] = them ∧
  past(EVENT[3]) ∧
   CONJ_and(said(EVENT[3], ENTITY[Tance], QUEST(∃ REF1[5] EVENT[6] ? ENTITY[4] (REF1[5] = it ∧ copula(EVENT[6], REF1[5], ENTITY[4])))), coming_up(EVENT[2], ENTITY[Tance]) ∧ to(EVENT[2]) = REF2[1]))

# ::id 239_fiction_DICK-1952;AT66-2;NE
# ::snt " I 'm almost blind without my glasses .
∃ REF2[4] ATTRIB[2] REF1[1] EVENT[5] GROUP[3] (
 REF1[1] = i ∧
  REF2[4] = my ∧
   is_glasses_POS(GROUP[3], REF2[4]) ∧ is_almost_blind_without(ATTRIB[2], GROUP[3]) ∧ copula(EVENT[5], REF1[1], ATTRIB[2]))

# ::id 240_fiction_DICK-1952;AT66-3;NE
# ::snt What do you see ? "
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = you ∧ do_see(EVENT[3], REF1[2], ENTITY[1])))

# ::id 241_fiction_DICK-1952;AT67-1;NE
# ::snt " The city .
∃ EVENT[2] ENTITY[1] (city(ENTITY[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = ENTITY[1])

# ::id 242_fiction_DICK-1952;AT67-2;NE
# ::snt Where they fired from . "
∃ SITUATION[6] REF1[2] EVENT[3] EVENT[5] (
 REF1[2] = they ∧
  is_LOC(EVENT[3], SITUATION[6]) ∧
   past(EVENT[3]) ∧ fired_from(EVENT[3], REF1[2]) ∧ is_FACT_THAT(SITUATION[6], xxx(EVENT[5])))

# ::id 243_fiction_DICK-1952;AT68-1;NE
# ::snt " Oh . "
∃ EVENT[1] xxx(EVENT[1])

# ::id 244_fiction_DICK-1952;AT68-2;NE
# ::snt All three of them stood together .
∃ REF1[2] EVENT[3] ENTITY[1] (
 REF1[2] = them ∧
  (CD_all_three(ENTITY[1]), is_of(ENTITY[1], REF1[2])) ∧
   ADV_together(EVENT[3]) ∧ past(EVENT[3]) ∧ stood(EVENT[3], ENTITY[1]))

# ::id 245_fiction_DICK-1952;AT68-3;NE
# ::snt " Well , let 's go , " Tance said .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  said(EVENT[1], ENTITY[Tance], IMPERATIVE(∃ REF1[3] EVENT[4] EVENT[2] (REF1[3] = 's ∧ let(EVENT[2], go(EVENT[4], REF1[3]))))))

# ::id 246_fiction_DICK-1952;AT68-4;NE
# ::snt " There 's no telling what we 'll find there . "
∃ REF1[3] EVENT[6] ENTITY[1] (
 REF1[3] = we ∧
  MD'll(∃ EVENT[4] (LOC_there(EVENT[4]) ∧ find(EVENT[4], REF1[3], ENTITY[1]))) ∧
   ADV_no(EVENT[6]) ∧ 's_telling(EVENT[6], ENTITY[1]))

# ::id 247_fiction_DICK-1952;AT68-5;NE
# ::snt Dorle frowned at him .
∃ REF1[1] EVENT[2] (REF1[1] = him ∧ past(EVENT[2]) ∧ frowned(EVENT[2], ENTITY[Dorle]) ∧ at(EVENT[2]) = REF1[1])

# ::id 248_fiction_DICK-1952;AT69-1;NE
# ::snt " Wait .
IMPERATIVE(∃ EVENT[1] wait(EVENT[1]))

# ::id 249_fiction_DICK-1952;AT69-2;NE
# ::snt We do n't know what we would be getting into .
∃ REF1[1] (
 REF1[1] = we ∧
  ¬ ∃ EVENT[2] do_know(EVENT[2], REF1[1],
        QUEST(∃ REF2[4] ? ENTITY[3] (
              REF2[4] = we ∧
               MD_would(∃ EVENT[5] (be_getting(EVENT[5], REF2[4]) ∧ into(EVENT[5]) = ENTITY[3]))))))

# ::id 250_fiction_DICK-1952;AT69-3;NE
# ::snt They must have patrols .
∃ REF1[1] (REF1[1] = they ∧ MD_must(∃ EVENT[3] GROUP[2] (patrols(GROUP[2]) ∧ have(EVENT[3], REF1[1], GROUP[2]))))

# ::id 251_fiction_DICK-1952;AT69-4;NE
# ::snt They probably have seen us already , for that matter . "
∃ REF2[2] REF1[1] EVENT[4] ENTITY[3] (
 matter(ENTITY[3]) ∧
  REF1[1] = they ∧
   REF2[2] = us ∧
    ADV_probably(EVENT[4]) ∧
     TMP_already(EVENT[4]) ∧ have_seen(EVENT[4], REF1[1], REF2[2]) ∧ for(EVENT[4]) = ENTITY[3])

# ::id 252_fiction_DICK-1952;AT70-1;NE
# ::snt " They probably have seen the ship itself , " Tance said .
∃ REF1[2] REF2[4] EVENT[5] EVENT[1] ENTITY[3] (
 REF2[4] = itself ∧
  is_ship_RFL(ENTITY[3], REF2[4]) ∧
   REF1[2] = they ∧
    ADV_probably(EVENT[5]) ∧ past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Tance], have_seen(EVENT[5], REF1[2], ENTITY[3])))

# ::id 253_fiction_DICK-1952;AT70-2;NE
# ::snt " They probably know right now where they can find it , where they can blow it up .
∃ SITUATION[11] SITUATION[6] REF4[8] REF2[3] REF1[1] EVENT[12] (
 REF1[1] = they ∧
  REF2[3] = they ∧
   REF4[8] = they ∧
    ADV_probably(EVENT[12]) ∧
     TMP_right_now(EVENT[12]) ∧
      is_LOC(SITUATION[6], EVENT[12]) ∧
       is_LOC(SITUATION[11], EVENT[12]) ∧
        is_FACT_THAT(SITUATION[6], MD_can(∃ REF3[4] EVENT[5] (REF3[4] = it ∧ find(EVENT[5], REF2[3], REF3[4])))) ∧
         is_FACT_THAT(SITUATION[11], MD_can(∃ REF5[9] EVENT[10] (REF5[9] = it ∧ blow_up(EVENT[10], REF4[8], REF5[9])))) ∧
         know(EVENT[12], REF1[1]))

# ::id 254_fiction_DICK-1952;AT70-3;NE
# ::snt So what difference does it make whether we go closer or not ? "
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (
      difference(ENTITY[1]) ∧
       REF1[2] = it ∧
        ADV_so(EVENT[3]) ∧
         does_make(EVENT[3], REF1[2], ENTITY[1],
          QUEST(∃ REF3[7] ATTRIB[5] REF2[4] EVENT[6] (
                REF2[4] = we ∧
                 closer(ATTRIB[5]) ∧
                  REF3[7] = we ∧
                   CONJ_or(go(EVENT[6], REF2[4]) ∧ LOC(EVENT[6]) = ATTRIB[5],
                    ¬ ∃ ATTRIB[8] EVENT[9] (
                          closer(ATTRIB[8]) ∧
                           go(EVENT[9], REF3[7]) ∧
                            LOC(EVENT[9]) = ATTRIB[8])))))))

# ::id 255_fiction_DICK-1952;AT71-1;NE
# ::snt " That 's true , " Nasha said .
∃ ATTRIB[3] EVENT[4] EVENT[1] ENTITY[2] (true(ATTRIB[3]) ∧ past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Nasha], copula(EVENT[4], ENTITY[2], ATTRIB[3])))

# ::id 256_fiction_DICK-1952;AT71-2;NE
# ::snt " If they really want to get us we have n't a chance .
∀ SITUATION[5] REF2[3] REF1[1] EVENT[4] EVENT[2] CND_If(
    REF1[1] = they ∧ REF2[3] = us ∧ ADV_really(SITUATION[5]) ∧
     is_FACT_THAT(SITUATION[5], want(EVENT[2], REF1[1], get(EVENT[4], REF1[1], REF2[3]))),
    ∃ REF3[6] (REF3[6] = we ∧ ¬ ∃ EVENT[8] ENTITY[7] (chance(ENTITY[7]) ∧ have(EVENT[8], REF3[6], ENTITY[7]))))

# ::id 257_fiction_DICK-1952;AT71-3;NE
# ::snt We have no armaments at all ;
∃ REF1[1] (REF1[1] = we ∧ ¬ ∃ EVENT[4] GROUP[2] (ALL ENTITY[3] is_armaments_at(GROUP[2], ENTITY[3]) ∧ have(EVENT[4], REF1[1], GROUP[2])))

# ::id 258_fiction_DICK-1952;AT71-4;NE
# ::snt you know that . "
∃ REF1[1] EVENT[3] ENTITY[2] (REF1[1] = you ∧ know(EVENT[3], REF1[1], ENTITY[2]))

# ::id 259_fiction_DICK-1952;AT72-1;NE
# ::snt " I have a hand weapon . "
∃ REF1[1] EVENT[3] ENTITY[2] (REF1[1] = i ∧ hand_weapon(ENTITY[2]) ∧ have(EVENT[3], REF1[1], ENTITY[2]))

# ::id 260_fiction_DICK-1952;AT72-2;NE
# ::snt Dorle nodded .
∃ EVENT[1] (past(EVENT[1]) ∧ nodded(EVENT[1], ENTITY[Dorle]))

# ::id 261_fiction_DICK-1952;AT72-3;NE
# ::snt " Well , let 's go on , then .
IMPERATIVE(∃ REF1[2] EVENT[3] EVENT[1] (REF1[2] = 's ∧ ADV_then(EVENT[3]) ∧ let(EVENT[1], go_on(EVENT[3], REF1[2]))))

# ::id 262_fiction_DICK-1952;AT72-4;NE
# ::snt I suppose you 're right , Tance . "
∃ ATTRIB[4] REF2[3] REF1[1] EVENT[5] EVENT[2] (
 REF1[1] = i ∧
  REF2[3] = you ∧
   right(ATTRIB[4]) ∧
    suppose(EVENT[2], REF1[1], copula(EVENT[5], REF2[3], ATTRIB[4])) ∧ VOC(EVENT[2]) = ENTITY[Tance])

# ::id 263_fiction_DICK-1952;AT73-1;NE
# ::snt " But let 's stay together , " Tance said nervously .
∃ EVENT[1] (
 ADV_nervously(EVENT[1]) ∧
  past(EVENT[1]) ∧
   said(EVENT[1], ENTITY[Tance],
    IMPERATIVE(∃ REF1[3] EVENT[4] EVENT[2] (REF1[3] = 's ∧ ADV_together(EVENT[4]) ∧ let(EVENT[2], stay(EVENT[4], REF1[3]))))))

# ::id 264_fiction_DICK-1952;AT73-2;NE
# ::snt " Nasha , you 're going too fast . "
∃ REF1[1] EVENT[2] (REF1[1] = you ∧ ADV_too_fast(EVENT[2]) ∧ 're_going(EVENT[2], REF1[1]) ∧ VOC(EVENT[2]) = ENTITY[Nasha])

# ::id 265_fiction_DICK-1952;AT74-1;NE
# ::snt Nasha looked back .
∃ EVENT[1] (DIR_back(EVENT[1]) ∧ past(EVENT[1]) ∧ looked(EVENT[1], ENTITY[Nasha]))

# ::id 266_fiction_DICK-1952;AT74-2;NE
# ::snt She laughed .
∃ REF1[1] EVENT[2] (REF1[1] = she ∧ past(EVENT[2]) ∧ laughed(EVENT[2], REF1[1]))

# ::id 267_fiction_DICK-1952;AT74-3;NE
# ::snt " If we expect to get there by nightfall we must go fast . "
∀ REF1[1] EVENT[4] EVENT[2] ENTITY[3] CND_If(
    REF1[1] = we ∧ nightfall(ENTITY[3]) ∧ LOC_there(EVENT[4]) ∧
     expect(EVENT[2], REF1[1], get(EVENT[4], REF1[1]) ∧ by(EVENT[4]) = ENTITY[3]),
    ∃ REF2[6] (REF2[6] = we ∧ MD_must(∃ EVENT[7] (ADV_fast(EVENT[7]) ∧ go(EVENT[7], REF2[6])))))

# ::id 268_fiction_DICK-1952;AT75-1;NE
# ::snt They reached the outskirts of the city at about the middle of the afternoon .
∃ REF1[1] EVENT[6] ENTITY[3] ENTITY[5] ENTITY[4] GROUP[2] (
 city(ENTITY[3]) ∧
  is_outskirts_of(GROUP[2], ENTITY[3]) ∧
   afternoon(ENTITY[5]) ∧
    ADV_about(ENTITY[4]) ∧ is_middle_of(ENTITY[4], ENTITY[5]) ∧
     REF1[1] = they ∧
      past(EVENT[6]) ∧ reached(EVENT[6], REF1[1], GROUP[2]) ∧ at(EVENT[6]) = ENTITY[4])

# ::id 269_fiction_DICK-1952;AT75-2;NE
# ::snt The sun , cold and yellow , hung above them in the colorless sky .
∃ REF1[6] ATTRIB[8] ATTRIB[4] ATTRIB[3] EVENT[9] EVENT[5] EVENT[5] ENTITY[7] ENTITY[1] (
 cold(ATTRIB[3]) ∧
  yellow(ATTRIB[4]) ∧
   CONJ_and(xxx(EVENT[5], ENTITY[1], ATTRIB[3]), xxx(EVENT[5], ENTITY[1], ATTRIB[4])) ∧ sun(ENTITY[1]) ∧
    colorless(ATTRIB[8]) ∧
     is_sky_ATTRIBUTE(ENTITY[7], ATTRIB[8]) ∧
      REF1[6] = them ∧
       past(EVENT[9]) ∧
        hung(EVENT[9], ENTITY[1]) ∧ in(EVENT[9]) = ENTITY[7] ∧ above(EVENT[9]) = REF1[6])

# ::id 270_fiction_DICK-1952;AT75-3;NE
# ::snt Dorle stopped at the top of a ridge overlooking the city .
∃ EVENT[6] EVENT[5] ENTITY[4] ENTITY[2] ENTITY[1] (
 city(ENTITY[4]) ∧
  overlooking(EVENT[5], ENTITY[2], ENTITY[4]) ∧ ridge(ENTITY[2]) ∧
   is_top_of(ENTITY[1], ENTITY[2]) ∧
    past(EVENT[6]) ∧ stopped(EVENT[6], ENTITY[Dorle]) ∧ at(EVENT[6]) = ENTITY[1])

# ::id 271_fiction_DICK-1952;AT76-1;NE
# ::snt " Well , there it is .
∃ REF1[1] EVENT[2] (REF1[1] = it ∧ LOC_there(EVENT[2]) ∧ copula(EVENT[2], REF1[1]))

# ::id 272_fiction_DICK-1952;AT76-2;NE
# ::snt What 's left of it . "
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = it ∧ left(EVENT[3], _, ENTITY[1]) ∧ of(EVENT[3]) = REF1[2]))

# ::id 273_fiction_DICK-1952;AT77-1;NE
# ::snt There was not much left .
NOT_MUCH ENTITY[1] ∃ EVENT[2] (past(EVENT[2]) ∧ left(EVENT[2], _, ENTITY[1]))

# ::id 274_fiction_DICK-1952;AT77-2;NE
# ::snt The huge concrete piers which they had noticed were not piers at all , but the ruined foundations of buildings .
∃ ATTRIB[10] REF1[4] ATTRIB[2] EVENT[12] EVENT[5] GROUP[11] GROUP[9] GROUP[1] (
 huge(ATTRIB[2]) ∧
  REF1[4] = they ∧
   had_noticed(EVENT[5], REF1[4], GROUP[1]) ∧ is_concrete_piers_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧
    ruined(ATTRIB[10]) ∧
     buildings(GROUP[11]) ∧
      is_foundations_of(GROUP[9], GROUP[11]) ∧ is_foundations_ATTRIBUTE(GROUP[9], ATTRIB[10]) ∧
       past(EVENT[5]) ∧
        past(EVENT[12]) ∧
         CONJ_but(¬ ∃ GROUP[6] (
                    piers(GROUP[6]) ∧
                     ALL ENTITY[7] ∃ EVENT[8] (
                      past(EVENT[8]) ∧
                       copula(EVENT[8], GROUP[1], GROUP[6]) ∧ at(EVENT[8]) = ENTITY[7])),
          copula(EVENT[12], GROUP[1], GROUP[9])))

# ::id 275_fiction_DICK-1952;AT77-3;NE
# ::snt They had been baked by the searing heat , baked and charred almost to the ground .
∃ REF1[1] ATTRIB[3] EVENT[7] EVENT[5] EVENT[6] ENTITY[4] ENTITY[2] (
 searing(ATTRIB[3]) ∧
  is_heat_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
   ground(ENTITY[4]) ∧
    REF1[1] = they ∧
     past(EVENT[7]) ∧
      CONJ_and(had_baked(EVENT[7], ENTITY[2], REF1[1]),
       CONJ_and(baked(EVENT[5], _, ENTITY[2]) ∧ almost_to(EVENT[5]) = ENTITY[4],
        charred(EVENT[6], _, ENTITY[2]) ∧ almost_to(EVENT[6]) = ENTITY[4])))

# ::id 276_fiction_DICK-1952;AT77-4;NE
# ::snt Nothing else remained ,
¬ ∃ EVENT[2] ENTITY[1] (ADV_else(ENTITY[1]) ∧ thing(ENTITY[1]) ∧ past(EVENT[2]) ∧ remained(EVENT[2], ENTITY[1]))

# ::id 277_fiction_DICK-1952;AT77-4;NE
# ::snt only this irregular circle of white squares , perhaps four miles in diameter .
∃ ATTRIB[5] ATTRIB[3] ENTITY[7] GROUP[6] GROUP[4] ENTITY[2] (
 irregular(ATTRIB[3]) ∧
  white(ATTRIB[5]) ∧
   is_squares_ATTRIBUTE(GROUP[4], ATTRIB[5]) ∧
    diameter(ENTITY[7]) ∧
     (CD_four(GROUP[6]), is_miles_in(GROUP[6], ENTITY[7])) ∧
      is_ADV_perhaps_MSR(ENTITY[2], GROUP[6]) ∧ is_circle_of(ENTITY[2], GROUP[4]) ∧ is_circle_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
       ONLY ENTITY[1] (is_of(ENTITY[1], ENTITY[2]), ∃ EVENT[8] (xxx(EVENT[8]) ∧ LINK(EVENT[8]) = ENTITY[1])))

# ::id 278_fiction_DICK-1952;AT78-1;NE
# ::snt Dorle spat in disgust .
∃ EVENT[2] ENTITY[1] (disgust(ENTITY[1]) ∧ past(EVENT[2]) ∧ spat(EVENT[2], ENTITY[Dorle]) ∧ in(EVENT[2]) = ENTITY[1])

# ::id 279_fiction_DICK-1952;AT78-2;NE
# ::snt " More wasted time .
MORE ATTRIB[2] ENTITY[1] ((wasted(ATTRIB[2]) ∧ is_time_ATTRIBUTE(ENTITY[1], ATTRIB[2])),
 ∃ EVENT[3] (xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[1]))

# ::id 280_fiction_DICK-1952;AT78-3;NE
# ::snt A dead skeleton of a city ,
∃ ATTRIB[2] EVENT[4] ENTITY[3] ENTITY[1] (
 dead(ATTRIB[2]) ∧
  city(ENTITY[3]) ∧
   is_skeleton_of(ENTITY[1], ENTITY[3]) ∧ is_skeleton_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
    xxx(EVENT[4]) ∧ LINK(EVENT[4]) = ENTITY[1])

# ::id 281_fiction_DICK-1952;AT78-4;NE
# ::snt that 's all . "
∃ ENTITY[1] ALL ENTITY[2] ∃ EVENT[3] copula(EVENT[3], ENTITY[1], ENTITY[2])

# ::id 282_fiction_DICK-1952;AT79-1;NE
# ::snt " But it was from here that the firing came , " Tance murmured .
∃ ENTITY[6] ENTITY[2] EVENT[5] EVENT[7] EVENT[1] ENTITY[4] (
 firing(ENTITY[4]) ∧
  is_before(EVENT[5], EVENT[1]) ∧
   is_before(EVENT[7], EVENT[1]) ∧
    past(EVENT[1]) ∧
     came(EVENT[5], ENTITY[4]) ∧ from(EVENT[5]) = ENTITY[2] ∧
      here(ENTITY[6]) ∧
       murmured(EVENT[1], ENTITY[Tance], copula(EVENT[7], ENTITY[2]) ∧ from(EVENT[7]) = ENTITY[6]))

# ::id 283_fiction_DICK-1952;AT79-2;NE
# ::snt " Do n't forget that . "
∃ ENTITY[1] IMPERATIVE(¬ ∃ EVENT[2] do_forget(EVENT[2], _, ENTITY[1]))

# ::id 284_fiction_DICK-1952;AT80-1;NE
# ::snt " And by someone with a good eye and a great deal of experience , " Nasha added .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  added(EVENT[1], ENTITY[Nasha],
   SOME GROUP[3] ENTITY[2] (
    (∃ ATTRIB[5] ENTITY[4] (good(ATTRIB[5]) ∧ is_eye_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧ is_element_of(ENTITY[4], GROUP[3])) ∧
       ∃ ATTRIB[7] ENTITY[8] ENTITY[6] (
        great(ATTRIB[7]) ∧
         experience(ENTITY[8]) ∧
          is_deal_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧ is_deal_of(ENTITY[6], ENTITY[8]) ∧ is_element_of(ENTITY[6], GROUP[3])) ∧
     is_one_with(ENTITY[2], GROUP[3])), ∃ EVENT[9] (xxx(EVENT[9]) ∧ by(EVENT[9]) = ENTITY[2]))))

# ::id 285_fiction_DICK-1952;AT80-2;NE
# ::snt " Let 's go . "
IMPERATIVE(∃ REF1[2] EVENT[3] EVENT[1] (REF1[2] = 's ∧ let(EVENT[1], go(EVENT[3], REF1[2]))))

# ::id 286_fiction_DICK-1952;AT81-1;NE
# ::snt They walked into the city between the ruined buildings .
∃ REF1[1] ATTRIB[4] EVENT[5] GROUP[3] ENTITY[2] (
 city(ENTITY[2]) ∧
  ruined(ATTRIB[4]) ∧
   is_buildings_ATTRIBUTE(GROUP[3], ATTRIB[4]) ∧
    REF1[1] = they ∧
     past(EVENT[5]) ∧
      walked(EVENT[5], REF1[1]) ∧ between(EVENT[5]) = GROUP[3] ∧ into(EVENT[5]) = ENTITY[2])

# ::id 287_fiction_DICK-1952;AT81-2;NE
# ::snt No one spoke .
¬ ∃ EVENT[2] ENTITY[1] (one(ENTITY[1]) ∧ past(EVENT[2]) ∧ spoke(EVENT[2], ENTITY[1]))

# ::id 288_fiction_DICK-1952;AT81-3;NE
# ::snt They walked in silence , listening to the echo of their footsteps .
∃ REF1[1] REF2[5] EVENT[7] EVENT[6] ENTITY[2] GROUP[4] ENTITY[3] (
 REF2[5] = their ∧
  is_footsteps_POS(GROUP[4], REF2[5]) ∧
   is_echo_of(ENTITY[3], GROUP[4]) ∧
    REF1[1] = they ∧
     silence(ENTITY[2]) ∧
      past(EVENT[7]) ∧
       CONJ_and(walked(EVENT[7], REF1[1]) ∧ in(EVENT[7]) = ENTITY[2],
        listening(EVENT[6], REF1[1]) ∧ to(EVENT[6]) = ENTITY[3]))

# ::id 289_fiction_DICK-1952;AT82-1;NE
# ::snt " It 's macabre , " Dorle muttered .
∃ ATTRIB[3] REF1[2] EVENT[4] EVENT[1] (
 REF1[2] = it ∧
  macabre(ATTRIB[3]) ∧ past(EVENT[1]) ∧ muttered(EVENT[1], ENTITY[Dorle], copula(EVENT[4], REF1[2], ATTRIB[3])))

# ::id 290_fiction_DICK-1952;AT82-2;NE
# ::snt " I 've seen ruined cities before but they died of old age , old age and fatigue .
∃ ATTRIB[12] REF2[6] ATTRIB[3] REF1[1] EVENT[4] EVENT[13] GROUP[2] GROUP[7] ENTITY[11] (
 REF1[1] = i ∧
  ruined(ATTRIB[3]) ∧
   is_cities_ATTRIBUTE(GROUP[2], ATTRIB[3]) ∧
    REF2[6] = they ∧
     old(ATTRIB[12]) ∧
      is_age_ATTRIBUTE(ENTITY[11], ATTRIB[12]) ∧
       ∃ ATTRIB[9] ENTITY[8] (old(ATTRIB[9]) ∧ is_age_ATTRIBUTE(ENTITY[8], ATTRIB[9]) ∧ is_element_of(ENTITY[8], GROUP[7])) ∧
        ∃ ENTITY[10] (fatigue(ENTITY[10]) ∧ is_element_of(ENTITY[10], GROUP[7])) ∧
        is_-ENTITY-_namely(ENTITY[11], GROUP[7]) ∧
         TMP_before(EVENT[4]) ∧
          past(EVENT[4]) ∧
           past(EVENT[13]) ∧
            CONJ_but('ve_seen(EVENT[4], REF1[1], GROUP[2]),
             died(EVENT[13], REF2[6]) ∧ of(EVENT[13]) = ENTITY[11]))

# ::id 291_fiction_DICK-1952;AT82-3;NE
# ::snt This was killed , seared to death .
∃ EVENT[4] EVENT[3] ENTITY[2] ENTITY[1] (
 death(ENTITY[2]) ∧
  past(EVENT[4]) ∧
   CONJ_and(killed(EVENT[4], _, ENTITY[1]), seared(EVENT[3], ENTITY[1]) ∧ to(EVENT[3]) = ENTITY[2]))

# ::id 292_fiction_DICK-1952;AT82-4;NE
# ::snt This city did n't die --
∃ ENTITY[1] (city(ENTITY[1]) ∧ ¬ ∃ EVENT[2] (past(EVENT[2]) ∧ did_die(EVENT[2], ENTITY[1])))

# ::id 293_fiction_DICK-1952;AT82-5;NE
# ::snt it was murdered . "
∃ REF1[1] EVENT[2] (REF1[1] = it ∧ past(EVENT[2]) ∧ murdered(EVENT[2], _, REF1[1]))

# ::id 294_fiction_DICK-1952;AT83-1;NE
# ::snt " I wonder what the city was called , " Nasha said .
∃ REF1[2] EVENT[3] EVENT[1] ENTITY[5] (
 city(ENTITY[5]) ∧
  REF1[2] = i ∧
   past(EVENT[1]) ∧
    said(EVENT[1], ENTITY[Nasha],
     wonder(EVENT[3], REF1[2],
      QUEST(∃ EVENT[6] ? ENTITY[4] (is_before(EVENT[6], EVENT[3]) ∧ was_called(EVENT[6], ENTITY[5], ENTITY[4]))))))

# ::id 295_fiction_DICK-1952;AT83-2;NE
# ::snt She turned aside , going up the remains of a stairway from one of the foundations .
∃ REF1[1] EVENT[8] EVENT[7] ENTITY[2] GROUP[6] ENTITY[5] ENTITY[4] GROUP[3] (
 foundations(GROUP[6]) ∧
  (CD_one(ENTITY[5]), is_element_of(ENTITY[5], GROUP[6])) ∧
   is_stairway_from(ENTITY[4], ENTITY[5]) ∧
    is_remains_of(GROUP[3], ENTITY[4]) ∧
     REF1[1] = she ∧
      side(ENTITY[2]) ∧
       past(EVENT[8]) ∧
        CONJ_and(turned(EVENT[8], REF1[1]) ∧ a(EVENT[8]) = ENTITY[2],
         going_up(EVENT[7], REF1[1], GROUP[3])))

# ::id 296_fiction_DICK-1952;AT83-3;NE
# ::snt " Do you think we might find a signpost ?
QUEST(∃ REF2[3] REF1[1] EVENT[2] (
      REF1[1] = you ∧
       REF2[3] = we ∧
        do_think(EVENT[2], REF1[1], MD_might(∃ EVENT[5] ENTITY[4] (signpost(ENTITY[4]) ∧ find(EVENT[5], REF2[3], ENTITY[4]))))))

# ::id 297_fiction_DICK-1952;AT83-4;NE
# ::snt Some kind of plaque ? "
SOME ENTITY[2] ENTITY[1] ((plaque(ENTITY[2]) ∧ is_kind_of(ENTITY[1], ENTITY[2])),
 ∃ EVENT[3] (xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[1]))

# ::id 298_fiction_DICK-1952;AT84-1;NE
# ::snt She peered into the ruins .
∃ REF1[1] EVENT[3] GROUP[2] (
 ruins(GROUP[2]) ∧
  REF1[1] = she ∧ past(EVENT[3]) ∧ peered(EVENT[3], REF1[1]) ∧ into(EVENT[3]) = GROUP[2])

# ::id 299_fiction_DICK-1952;AT85-1;NE
# ::snt " There 's nothing there , " Dorle said impatiently .
∃ EVENT[1] (
 ADV_impatiently(EVENT[1]) ∧
  past(EVENT[1]) ∧
   said(EVENT[1], ENTITY[Dorle],
    ¬ ∃ EVENT[3] ENTITY[2] (thing(ENTITY[2]) ∧ LOC_there(EVENT[3]) ∧ copula(EVENT[3], ENTITY[2]))))

# ::id 300_fiction_DICK-1952;AT85-2;NE
# ::snt " Come on . "
IMPERATIVE(∃ EVENT[1] come_on(EVENT[1]))

# ::id 301_fiction_DICK-1952;AT86-1;NE
# ::snt " Wait . "
IMPERATIVE(∃ EVENT[1] wait(EVENT[1]))

# ::id 302_fiction_DICK-1952;AT86-2;NE
# ::snt Nasha bent down , touching a concrete stone .
∃ EVENT[3] EVENT[2] ENTITY[1] (
 concrete_stone(ENTITY[1]) ∧
  past(EVENT[3]) ∧ CONJ_and(bent_down(EVENT[3], ENTITY[Nasha]), touching(EVENT[2], ENTITY[Nasha], ENTITY[1])))

# ::id 303_fiction_DICK-1952;AT86-3;NE
# ::snt " There 's something inscribed on this . "
∃ ENTITY[3] SOME EVENT[4] ENTITY[1] (inscribed(EVENT[4], _, ENTITY[1]) ∧ on(EVENT[4]) = ENTITY[3] ∧ thing(ENTITY[1]),
 ∃ EVENT[5] copula(EVENT[5], ENTITY[1]))

# ::id 304_fiction_DICK-1952;AT87-1;NE
# ::snt " What is it ? "
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = it ∧ copula(EVENT[3], REF1[2], ENTITY[1])))

# ::id 305_fiction_DICK-1952;AT87-2;NE
# ::snt Tance hurried up .
∃ EVENT[1] (past(EVENT[1]) ∧ hurried_up(EVENT[1], ENTITY[Tance]))

# ::id 306_fiction_DICK-1952;AT87-3;NE
# ::snt He squatted in the dust , running his gloved fingers over the surface of the stone .
∃ ATTRIB[5] REF2[4] REF1[1] EVENT[9] EVENT[8] GROUP[3] ENTITY[7] ENTITY[6] ENTITY[2] (
 dust(ENTITY[2]) ∧
  stone(ENTITY[7]) ∧
   is_surface_of(ENTITY[6], ENTITY[7]) ∧
    REF1[1] = he ∧
     REF2[4] = his ∧
      gloved(ATTRIB[5]) ∧
       is_fingers_ATTRIBUTE(GROUP[3], ATTRIB[5]) ∧ is_fingers_POS(GROUP[3], REF2[4]) ∧
        past(EVENT[9]) ∧
         CONJ_and(squatted(EVENT[9], REF1[1]) ∧ in(EVENT[9]) = ENTITY[2],
          running(EVENT[8], REF1[1], GROUP[3]) ∧ over(EVENT[8]) = ENTITY[6]))

# ::id 307_fiction_DICK-1952;AT87-4;NE
# ::snt " Letters , all right . "
∃ EVENT[2] GROUP[1] (Letters(GROUP[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = GROUP[1])

# ::id 308_fiction_DICK-1952;AT87-5;NE
# ::snt He took a writing stick from the pocket of his pressure suit and copied the inscription on a bit of paper .
∃ REF1[1] REF2[5] EVENT[6] EVENT[10] ENTITY[2] ENTITY[9] ENTITY[8] ENTITY[4] ENTITY[3] ENTITY[7] (
 REF2[5] = his ∧
  is_pressure_suit_POS(ENTITY[4], REF2[5]) ∧
   is_pocket_of(ENTITY[3], ENTITY[4]) ∧
    inscription(ENTITY[7]) ∧
     REF1[1] = he ∧
      writing_stick(ENTITY[2]) ∧
       paper(ENTITY[9]) ∧
        is_bit_of(ENTITY[8], ENTITY[9]) ∧
         past(EVENT[6]) ∧
          past(EVENT[10]) ∧
           CONJ_and(took(EVENT[6], REF1[1], ENTITY[2]) ∧ from(EVENT[6]) = ENTITY[3],
            copied(EVENT[10], REF1[1], ENTITY[7]) ∧ on(EVENT[10]) = ENTITY[8]))

# ::id 309_fiction_DICK-1952;AT87-6;NE
# ::snt Dorle glanced over his shoulder .
∃ REF1[2] EVENT[3] ENTITY[1] (
 REF1[2] = his ∧
  is_shoulder_POS(ENTITY[1], REF1[2]) ∧
   past(EVENT[3]) ∧ glanced(EVENT[3], ENTITY[Dorle]) ∧ over(EVENT[3]) = ENTITY[1])

# ::id 310_fiction_DICK-1952;AT87-7;NE
# ::snt The inscription was : FRANKLIN APARTMENTS
∃ EVENT[2] ENTITY[1] (inscription(ENTITY[1]) ∧ past(EVENT[2]) ∧ copula(EVENT[2], ENTITY[1], ENTITY[FRANKLIN_APARTMENTS]))

# ::id 311_fiction_DICK-1952;AT88-1;NE
# ::snt " That 's this city , " Nasha said softly .
∃ SITUATION[5] EVENT[4] EVENT[1] ENTITY[3] ENTITY[2] (
 city(ENTITY[3]) ∧
  ADV_softly(SITUATION[5]) ∧
   past(EVENT[1]) ∧ is_FACT_THAT(SITUATION[5], said(EVENT[1], ENTITY[Nasha], copula(EVENT[4], ENTITY[2], ENTITY[3]))))

# ::id 312_fiction_DICK-1952;AT88-2;NE
# ::snt " That was its name . "
∃ REF1[3] EVENT[4] ENTITY[2] ENTITY[1] (REF1[3] = its ∧ is_name_POS(ENTITY[2], REF1[3]) ∧ past(EVENT[4]) ∧ copula(EVENT[4], ENTITY[1], ENTITY[2]))

# ::id 313_fiction_DICK-1952;AT89-1;NE
# ::snt Tance put the paper in his pocket
∃ REF1[3] EVENT[4] ENTITY[2] ENTITY[1] (
 paper(ENTITY[1]) ∧
  REF1[3] = his ∧
   is_pocket_POS(ENTITY[2], REF1[3]) ∧
    past(EVENT[4]) ∧ put(EVENT[4], ENTITY[Tance], ENTITY[1]) ∧ in(EVENT[4]) = ENTITY[2])

# ::id 314_fiction_DICK-1952;AT89-2;NE
# ::snt and they went on .
∃ REF1[1] EVENT[2] (REF1[1] = they ∧ past(EVENT[2]) ∧ went_on(EVENT[2], REF1[1]))

# ::id 315_fiction_DICK-1952;AT89-3;NE
# ::snt After a time Dorle said , " Nasha , you know , I think we 're being watched .
∃ REF3[7] REF2[5] REF1[3] EVENT[8] EVENT[6] EVENT[4] EVENT[2] ENTITY[1] (
 time(ENTITY[1]) ∧
  REF1[3] = you ∧
   REF2[5] = i ∧
    REF3[7] = we ∧
     past(EVENT[2]) ∧
      said(EVENT[2], ENTITY[Dorle],
       know(EVENT[4], REF1[3], think(EVENT[6], REF2[5], being_watched(EVENT[8], _, REF3[7]))) ∧
        VOC(EVENT[4]) = ENTITY[Nasha]) ∧ After(EVENT[2]) = ENTITY[1])

# ::id 316_fiction_DICK-1952;AT89-4;NE
# ::snt But do n't look around . "
IMPERATIVE(¬ ∃ EVENT[1] (DIR_around(EVENT[1]) ∧ do_look(EVENT[1])))

# ::id 317_fiction_DICK-1952;AT90-1;NE
# ::snt The woman stiffened .
∃ EVENT[2] ENTITY[1] (woman(ENTITY[1]) ∧ past(EVENT[2]) ∧ stiffened(EVENT[2], ENTITY[1]))

# ::id 318_fiction_DICK-1952;AT90-2;NE
# ::snt " Oh ?
∃ EVENT[1] xxx(EVENT[1])

# ::id 319_fiction_DICK-1952;AT90-3;NE
# ::snt Why do you say that ?
∃ ENTITY[3] QUEST(∃ REF1[2] EVENT[4] ? ENTITY[1] (REF1[2] = you ∧ is_ADV(EVENT[4], ENTITY[1]) ∧ do_say(EVENT[4], REF1[2], ENTITY[3])))

# ::id 320_fiction_DICK-1952;AT90-4;NE
# ::snt Did you see something ? "
QUEST(∃ REF1[1] (
      REF1[1] = you ∧
       SOME ENTITY[2] (thing(ENTITY[2]), ∃ EVENT[3] (past(EVENT[3]) ∧ did_see(EVENT[3], REF1[1], ENTITY[2])))))

# ::id 321_fiction_DICK-1952;AT91-1;NE
# ::snt " No . I can feel it , though .
∃ REF1[1] (
 REF1[1] = i ∧
  MD_can(∃ REF2[2] EVENT[3] (REF2[2] = it ∧ ADV_though(EVENT[3]) ∧ feel(EVENT[3], REF1[1], REF2[2]))))

# ::id 322_fiction_DICK-1952;AT91-2;NE
# ::snt Do n't you ? "
IMPERATIVE(¬ ∃ REF1[1] EVENT[2] (REF1[1] = you ∧ do(EVENT[2], _, REF1[1])))

# ::id 323_fiction_DICK-1952;AT92-1;NE
# ::snt Nasha smiled a little .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (little(ATTRIB[2]) ∧ is_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ past(EVENT[3]) ∧ smiled(EVENT[3], ENTITY[Nasha], ENTITY[1]))

# ::id 324_fiction_DICK-1952;AT92-2;NE
# ::snt " I feel nothing ,
∃ REF1[1] (REF1[1] = i ∧ ¬ ∃ EVENT[3] ENTITY[2] (thing(ENTITY[2]) ∧ feel(EVENT[3], REF1[1], ENTITY[2])))

# ::id 325_fiction_DICK-1952;AT92-3;NE
# ::snt but perhaps I 'm more used to being stared at . "
∃ SITUATION[6] SITUATION[3] ATTRIB[2] REF1[1] EVENT[4] EVENT[5] (
 REF1[1] = i ∧
  is_FACT_THAT(SITUATION[3],   being_stared_at(EVENT[4], _, [_])) ∧
   is_more_used_to(ATTRIB[2], SITUATION[3]) ∧ ADV_perhaps(SITUATION[6]) ∧ is_FACT_THAT(SITUATION[6], copula(EVENT[5], REF1[1], ATTRIB[2])))

# ::id 326_fiction_DICK-1952;AT92-4;NE
# ::snt She turned her head slightly .
∃ REF2[3] REF1[1] EVENT[4] ENTITY[2] (
 REF1[1] = she ∧
  REF2[3] = her ∧
   is_head_POS(ENTITY[2], REF2[3]) ∧
    ADV_slightly(EVENT[4]) ∧ past(EVENT[4]) ∧ turned(EVENT[4], REF1[1], ENTITY[2]))

# ::id 327_fiction_DICK-1952;AT92-5;NE
# ::snt " Oh ! "
∃ EVENT[1] xxx(EVENT[1])

# ::id 328_fiction_DICK-1952;AT93-1;NE
# ::snt Dorle reached for his hand weapon .
∃ REF1[2] EVENT[3] ENTITY[1] (
 REF1[2] = his ∧
  is_hand_weapon_POS(ENTITY[1], REF1[2]) ∧
   past(EVENT[3]) ∧ reached(EVENT[3], ENTITY[Dorle]) ∧ for(EVENT[3]) = ENTITY[1])

# ::id 329_fiction_DICK-1952;AT93-2;NE
# ::snt " What is it ?
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = it ∧ copula(EVENT[3], ENTITY[1], REF1[2])))

# ::id 330_fiction_DICK-1952;AT93-3;NE
# ::snt What do you see ? "
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = you ∧ do_see(EVENT[3], REF1[2], ENTITY[1])))

# ::id 331_fiction_DICK-1952;AT93-4;NE
# ::snt Tance had stopped dead in his tracks , his mouth half open .
∃ ATTRIB[6] REF2[5] REF1[3] ATTRIB[1] EVENT[7] GROUP[2] ENTITY[4] (
 REF1[3] = his ∧
  is_tracks_POS(GROUP[2], REF1[3]) ∧
   is_dead_in(ATTRIB[1], GROUP[2]) ∧
    REF2[5] = his ∧
     half_open(ATTRIB[6]) ∧
      is_mouth_ATTRIBUTE(ENTITY[4], ATTRIB[6]) ∧ is_mouth_POS(ENTITY[4], REF2[5]) ∧
       past(EVENT[7]) ∧
        had_stopped(EVENT[7], ENTITY[Tance]) ∧ ADV(EVENT[7]) = ENTITY[4] ∧ ATTRIBUTE(EVENT[7]) = ATTRIB[1])

# ::id 332_fiction_DICK-1952;AT94-1;NE
# ::snt " The gun , " Nasha said .
∃ EVENT[3] EVENT[1] ENTITY[2] (
 gun(ENTITY[2]) ∧
  past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Nasha], xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[2]))

# ::id 333_fiction_DICK-1952;AT94-2;NE
# ::snt " It 's the gun . "
∃ REF1[1] EVENT[3] ENTITY[2] (gun(ENTITY[2]) ∧ REF1[1] = it ∧ copula(EVENT[3], REF1[1], ENTITY[2]))

# ::id 334_fiction_DICK-1952;AT95-1;NE
# ::snt " Look at the size of it .
∃ REF1[2] ENTITY[1] (
 REF1[2] = it ∧
  is_size_of(ENTITY[1], REF1[2]) ∧ IMPERATIVE(∃ EVENT[3] (look(EVENT[3]) ∧ at(EVENT[3]) = ENTITY[1])))

# ::id 335_fiction_DICK-1952;AT95-2;NE
# ::snt The size of the thing . "
∃ EVENT[3] ENTITY[2] ENTITY[1] (thing(ENTITY[2]) ∧ is_size_of(ENTITY[1], ENTITY[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[1])

# ::id 336_fiction_DICK-1952;AT95-3;NE
# ::snt Dorle unfastened his hand weapon slowly .
∃ REF1[2] EVENT[3] ENTITY[1] (
 REF1[2] = his ∧
  is_hand_weapon_POS(ENTITY[1], REF1[2]) ∧ ADV_slowly(EVENT[3]) ∧ past(EVENT[3]) ∧ unfastened(EVENT[3], ENTITY[Dorle], ENTITY[1]))

# ::id 337_fiction_DICK-1952;AT95-4;NE
# ::snt " That 's it , all right . "
∃ REF1[2] EVENT[3] ENTITY[1] (REF1[2] = it ∧ copula(EVENT[3], ENTITY[1], REF1[2]))

# ::id 338_fiction_DICK-1952;AT96-1;NE
# ::snt The gun was huge .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (gun(ENTITY[1]) ∧ huge(ATTRIB[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], ENTITY[1], ATTRIB[2]))

# ::id 339_fiction_DICK-1952;AT96-2;NE
# ::snt Stark and immense it pointed up at the sky ,
∃ ATTRIB[3] ATTRIB[2] REF1[1] EVENT[6] EVENT[4] EVENT[4] ENTITY[5] (
 sky(ENTITY[5]) ∧
  REF1[1] = it ∧
   stark(ATTRIB[2]) ∧
    immense(ATTRIB[3]) ∧
     past(EVENT[6]) ∧
      CONJ_and(pointed_up(EVENT[6], REF1[1]) ∧ at(EVENT[6]) = ENTITY[5],
       CONJ_and(xxx(EVENT[4], REF1[1], ATTRIB[2]), xxx(EVENT[4], REF1[1], ATTRIB[3]))))

# ::id 340_fiction_DICK-1952;AT96-3;NE
# ::snt a mass of steel and glass , set in a huge slab of concrete .
∃ ATTRIB[7] EVENT[9] EVENT[10] ENTITY[8] ENTITY[6] GROUP[2] ENTITY[1] (
 ∃ ENTITY[3] (steel(ENTITY[3]) ∧ is_element_of(ENTITY[3], GROUP[2])) ∧
  ∃ ENTITY[4] (glass(ENTITY[4]) ∧ is_element_of(ENTITY[4], GROUP[2])) ∧
  huge(ATTRIB[7]) ∧
   concrete(ENTITY[8]) ∧
    is_slab_of(ENTITY[6], ENTITY[8]) ∧ is_slab_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧
     set(EVENT[9], _, ENTITY[1]) ∧ in(EVENT[9]) = ENTITY[6] ∧ is_mass_of(ENTITY[1], GROUP[2]) ∧
      xxx(EVENT[10]) ∧ LINK(EVENT[10]) = ENTITY[1])

# ::id 341_fiction_DICK-1952;AT96-4;NE
# ::snt Even as they watched the gun moved on its swivel base , whirring underneath .
∃ REF1[3] SITUATION[2] EVENT[4] ENTITY[5] (
 gun(ENTITY[5]) ∧
  REF1[3] = they ∧
   is_FACT_THAT(SITUATION[2], watched(EVENT[4], REF1[3])) ∧
    past(EVENT[4]) ∧
     EVEN SITUATION[1] (is_of(SITUATION[1], SITUATION[2]),
      ∃ REF2[7] EVENT[10] EVENT[8] ENTITY[6] (
       REF2[7] = its ∧
        is_swivel_base_POS(ENTITY[6], REF2[7]) ∧
         past(EVENT[10]) ∧
          LOC_underneath(EVENT[8]) ∧
           CONJ_and(moved(EVENT[10], ENTITY[5]) ∧ on(EVENT[10]) = ENTITY[6] ∧
                 as(EVENT[10]) = SITUATION[1], whirring(EVENT[8], ENTITY[5])))))

# ::id 342_fiction_DICK-1952;AT96-5;NE
# ::snt A slim vane turned with the wind ,
∃ ATTRIB[2] EVENT[4] ENTITY[1] ENTITY[3] (
 wind(ENTITY[3]) ∧
  slim(ATTRIB[2]) ∧
   is_vane_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
    past(EVENT[4]) ∧ turned(EVENT[4], ENTITY[1]) ∧ with(EVENT[4]) = ENTITY[3])

# ::id 343_fiction_DICK-1952;AT96-6;NE
# ::snt a network of rods atop a high pole .
∃ ATTRIB[4] EVENT[5] ENTITY[3] GROUP[2] ENTITY[1] (
 high(ATTRIB[4]) ∧
  is_pole_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
   is_rods_atop(GROUP[2], ENTITY[3]) ∧
    is_network_of(ENTITY[1], GROUP[2]) ∧ xxx(EVENT[5]) ∧ LINK(EVENT[5]) = ENTITY[1])

# ::id 344_fiction_DICK-1952;AT97-1;NE
# ::snt " It 's alive , " Nasha whispered .
∃ ATTRIB[3] REF1[2] EVENT[4] EVENT[1] (
 REF1[2] = it ∧
  alive(ATTRIB[3]) ∧ past(EVENT[1]) ∧ whispered(EVENT[1], ENTITY[Nasha], copula(EVENT[4], REF1[2], ATTRIB[3])))

# ::id 345_fiction_DICK-1952;AT97-2;NE
# ::snt " It 's listening to us , watching us . "
∃ REF3[3] REF2[2] REF1[1] EVENT[5] EVENT[4] (
 REF1[1] = it ∧
  REF2[2] = us ∧
   REF3[3] = us ∧
    CONJ_and('s_listening(EVENT[5], REF1[1]) ∧ to(EVENT[5]) = REF2[2], watching(EVENT[4], REF1[1], REF3[3])))

# ::id 346_fiction_DICK-1952;AT98-1;NE
# ::snt The gun moved again , this time clockwise .
∃ EVENT[4] ENTITY[3] TIME[2] ENTITY[1] (
 gun(ENTITY[1]) ∧
  time(TIME[2]) ∧
   clockwise(ENTITY[3]) ∧
    ADV_again(EVENT[4]) ∧
     past(EVENT[4]) ∧
      moved(EVENT[4], ENTITY[1]) ∧ DIR(EVENT[4]) = ENTITY[3] ∧ is_contained_in(TMP(EVENT[4]), TIME[2]))

# ::id 347_fiction_DICK-1952;AT98-2;NE
# ::snt It was mounted so that it could make a full circle .
∃ REF2[3] SITUATION[2] REF1[1] EVENT[7] (
 REF1[1] = it ∧
  REF2[3] = it ∧
   is_FACT_THAT(SITUATION[2],
    MD_could(∃ ATTRIB[5] EVENT[6] ENTITY[4] (
          full(ATTRIB[5]) ∧
           is_circle_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧ make(EVENT[6], REF2[3], ENTITY[4])))) ∧
    past(EVENT[7]) ∧ mounted(EVENT[7], _, REF1[1]) ∧ so(EVENT[7]) = SITUATION[2])

# ::id 348_fiction_DICK-1952;AT98-3;NE
# ::snt The barrel lowered a trifle , then resumed its original position .
∃ ATTRIB[5] REF1[4] EVENT[8] EVENT[6] ENTITY[3] DEGREE[2] ENTITY[1] (
 barrel(ENTITY[1]) ∧
  trifle(DEGREE[2]) ∧
   REF1[4] = its ∧
    original(ATTRIB[5]) ∧
     is_position_ATTRIBUTE(ENTITY[3], ATTRIB[5]) ∧ is_position_POS(ENTITY[3], REF1[4]) ∧
      past(EVENT[8]) ∧
       TMP_then(EVENT[6]) ∧
        past(EVENT[6]) ∧
         CONJ_and(lowered(EVENT[8], ENTITY[1]) ∧ MSR(EVENT[8]) = DEGREE[2],
          resumed(EVENT[6], ENTITY[1], ENTITY[3])))

# ::id 349_fiction_DICK-1952;AT99-1;NE
# ::snt " But who fires it ? " Tance said .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  said(EVENT[1], ENTITY[Tance], QUEST(∃ REF1[3] EVENT[4] ? ENTITY[2] (REF1[3] = it ∧ fires(EVENT[4], ENTITY[2], REF1[3])))))

# ::id 350_fiction_DICK-1952;AT100-1;NE
# ::snt Dorle laughed .
∃ EVENT[1] (past(EVENT[1]) ∧ laughed(EVENT[1], ENTITY[Dorle]))

# ::id 351_fiction_DICK-1952;AT100-2;NE
# ::snt " No one .
¬ ∃ EVENT[2] ENTITY[1] (one(ENTITY[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = ENTITY[1])

# ::id 352_fiction_DICK-1952;AT100-3;NE
# ::snt No one fires it . "
¬ ∃ REF1[2] EVENT[3] ENTITY[1] (one(ENTITY[1]) ∧ REF1[2] = it ∧ fires(EVENT[3], ENTITY[1], REF1[2]))

# ::id 353_fiction_DICK-1952;AT101-1;NE
# ::snt They stared at him .
∃ REF2[2] REF1[1] EVENT[3] (
 REF1[1] = they ∧
  REF2[2] = him ∧ past(EVENT[3]) ∧ stared(EVENT[3], REF1[1]) ∧ at(EVENT[3]) = REF2[2])

# ::id 354_fiction_DICK-1952;AT101-2;NE
# ::snt " What do you mean ? "
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = you ∧ do_mean(EVENT[3], REF1[2], ENTITY[1])))

# ::id 355_fiction_DICK-1952;AT102-1;NE
# ::snt " It fires itself . "
∃ REF2[2] REF1[1] EVENT[3] (REF1[1] = it ∧ REF2[2] = itself ∧ fires(EVENT[3], REF1[1], REF2[2]))

# ::id 356_fiction_DICK-1952;AT103-1;NE
# ::snt They could n't believe him .
∃ REF1[1] (REF1[1] = they ∧ MD_could(¬ ∃ REF2[2] EVENT[3] (REF2[2] = him ∧ believe(EVENT[3], REF1[1], REF2[2]))))

# ::id 357_fiction_DICK-1952;AT103-2;NE
# ::snt Nasha came close to him , frowning , looking up at him .
∃ REF2[4] REF1[2] ATTRIB[1] EVENT[6] EVENT[5] EVENT[3] (
 REF1[2] = him ∧
  is_close_to(ATTRIB[1], REF1[2]) ∧
   REF2[4] = him ∧
    past(EVENT[6]) ∧
     CONJ_and(CONJ_and(came(EVENT[6], ENTITY[Nasha]) ∧ DIR(EVENT[6]) = ATTRIB[1],
           looking_up(EVENT[5], ENTITY[Nasha]) ∧ at(EVENT[5]) = REF2[4]), frowning(EVENT[3], ENTITY[Nasha])))

# ::id 358_fiction_DICK-1952;AT103-3;NE
# ::snt " I do n't understand .
∃ REF1[1] (REF1[1] = i ∧ ¬ ∃ EVENT[2] do_understand(EVENT[2], REF1[1]))

# ::id 359_fiction_DICK-1952;AT103-4;NE
# ::snt What do you mean ,
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = you ∧ do_mean(EVENT[3], REF1[2], ENTITY[1])))

# ::id 360_fiction_DICK-1952;AT103-5;NE
# ::snt it fires itself ? "
QUEST(∃ REF2[2] REF1[1] EVENT[3] (REF1[1] = it ∧ REF2[2] = itself ∧ fires(EVENT[3], REF1[1], REF2[2])))

# ::id 361_fiction_DICK-1952;AT104-1;NE
# ::snt " Watch ,
IMPERATIVE(∃ EVENT[1] watch(EVENT[1]))

# ::id 362_fiction_DICK-1952;AT104-2;NE
# ::snt I 'll show you .
∃ REF1[1] (REF1[1] = i ∧ MD'll(∃ REF2[2] EVENT[3] (REF2[2] = you ∧ show(EVENT[3], REF1[1], REF2[2]))))

# ::id 363_fiction_DICK-1952;AT104-3;NE
# ::snt Do n't move . "
IMPERATIVE(¬ ∃ EVENT[1] do_move(EVENT[1]))

# ::id 364_fiction_DICK-1952;AT104-4;NE
# ::snt Dorle picked up a rock from the ground .
∃ EVENT[3] ENTITY[1] ENTITY[2] (
 ground(ENTITY[2]) ∧
  rock(ENTITY[1]) ∧
   past(EVENT[3]) ∧ picked_up(EVENT[3], ENTITY[Dorle], ENTITY[1]) ∧ from(EVENT[3]) = ENTITY[2])

# ::id 365_fiction_DICK-1952;AT104-5;NE
# ::snt He hesitated a moment and then tossed the rock high in the air .
∃ ATTRIB[5] REF1[1] EVENT[3] EVENT[7] ENTITY[2] ENTITY[6] ENTITY[4] (
 rock(ENTITY[4]) ∧
  air(ENTITY[6]) ∧
   REF1[1] = he ∧
    moment(ENTITY[2]) ∧
     is_high_in(ATTRIB[5], ENTITY[6]) ∧
      past(EVENT[3]) ∧
       TMP_then(EVENT[7]) ∧
        past(EVENT[7]) ∧
         CONJ_and(hesitated(EVENT[3], REF1[1], ENTITY[2]),
          tossed(EVENT[7], REF1[1], ENTITY[4]) ∧ LOC(EVENT[7]) = ATTRIB[5]))

# ::id 366_fiction_DICK-1952;AT104-6;NE
# ::snt The rock passed in front of the gun .
∃ EVENT[4] ENTITY[2] ENTITY[3] ENTITY[1] (
 rock(ENTITY[1]) ∧
  gun(ENTITY[3]) ∧
   is_front_of(ENTITY[2], ENTITY[3]) ∧
    past(EVENT[4]) ∧ passed(EVENT[4], ENTITY[1]) ∧ in(EVENT[4]) = ENTITY[2])

# ::id 367_fiction_DICK-1952;AT104-7;NE
# ::snt Instantly the great barrel moved ,
∃ ATTRIB[2] EVENT[3] ENTITY[1] (
 great(ATTRIB[2]) ∧
  is_barrel_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ TMP_instantly(EVENT[3]) ∧ past(EVENT[3]) ∧ moved(EVENT[3], ENTITY[1]))

# ::id 368_fiction_DICK-1952;AT104-8;NE
# ::snt the vanes contracted .
∃ EVENT[2] GROUP[1] (vanes(GROUP[1]) ∧ past(EVENT[2]) ∧ contracted(EVENT[2], GROUP[1]))

# ::id 369_fiction_DICK-1952;AT105-1;NE
# ::snt The rock fell to the ground .
∃ EVENT[3] ENTITY[2] ENTITY[1] (
 rock(ENTITY[1]) ∧
  ground(ENTITY[2]) ∧ past(EVENT[3]) ∧ fell(EVENT[3], ENTITY[1]) ∧ to(EVENT[3]) = ENTITY[2])

# ::id 370_fiction_DICK-1952;AT105-2;NE
# ::snt The gun paused , then resumed its calm swivel , its slow circling .
∃ ATTRIB[4] REF2[3] ATTRIB[7] REF1[6] EVENT[10] EVENT[8] ENTITY[2] ENTITY[5] ENTITY[1] (
 gun(ENTITY[1]) ∧
  REF1[6] = its ∧
   calm(ATTRIB[7]) ∧
    is_swivel_ATTRIBUTE(ENTITY[5], ATTRIB[7]) ∧ is_swivel_POS(ENTITY[5], REF1[6]) ∧
     REF2[3] = its ∧
      slow(ATTRIB[4]) ∧
       is_circling_ATTRIBUTE(ENTITY[2], ATTRIB[4]) ∧ is_circling_POS(ENTITY[2], REF2[3]) ∧
        is_-ENTITY-_namely(ENTITY[5], ENTITY[2]) ∧
         past(EVENT[10]) ∧
          TMP_then(EVENT[8]) ∧
           past(EVENT[8]) ∧ CONJ_and(paused(EVENT[10], ENTITY[1]), resumed(EVENT[8], ENTITY[1], ENTITY[5])))

# ::id 371_fiction_DICK-1952;AT106-1;NE
# ::snt " You see , " Dorle said ,
∃ REF1[2] EVENT[3] EVENT[1] (REF1[2] = you ∧ past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Dorle], see(EVENT[3], REF1[2])))

# ::id 372_fiction_DICK-1952;AT106-2;NE
# ::snt " it noticed the rock , as soon as I threw it up in the air .
∃ SITUATION[11] REF3[6] REF2[5] REF1[1] EVENT[8] EVENT[10] TIME[3] ENTITY[7] ENTITY[2] (
 rock(ENTITY[2]) ∧
  air(ENTITY[7]) ∧
   REF1[1] = it ∧
    REF2[5] = i ∧
     REF3[6] = it ∧
      threw_up(EVENT[8], REF2[5], REF3[6]) ∧ in(EVENT[8]) = ENTITY[7] ∧
       is_TMP(EVENT[8], TIME[3]) ∧
        past(EVENT[8]) ∧
         is_TMP_as_soon_as(SITUATION[11], TIME[3]) ∧
          past(EVENT[10]) ∧ is_FACT_THAT(SITUATION[11], noticed(EVENT[10], REF1[1], ENTITY[2])))

# ::id 373_fiction_DICK-1952;AT106-3;NE
# ::snt It 's alert to anything that flies or moves above the ground level .
∃ ATTRIB[2] REF1[1] EVENT[8] ENTITY[5] (
 ground_level(ENTITY[5]) ∧
  REF1[1] = it ∧
   ANY EVENT[6] EVENT[7] ENTITY[3] (
    CONJ_or(flies(EVENT[6], ENTITY[3]) ∧ above(EVENT[6]) = ENTITY[5],
     moves(EVENT[7], ENTITY[3]) ∧ above(EVENT[7]) = ENTITY[5]) ∧ thing(ENTITY[3]),
    is_alert_to(ATTRIB[2], ENTITY[3])) ∧ copula(EVENT[8], REF1[1], ATTRIB[2]))

# ::id 374_fiction_DICK-1952;AT106-4;NE
# ::snt Probably it detected us as soon as we entered the gravitational field of the planet .
∃ SITUATION[12] SITUATION[13] REF3[5] REF2[2] REF1[1] ATTRIB[7] EVENT[9] EVENT[11] TIME[3] ENTITY[8] ENTITY[6] (
 gravitational(ATTRIB[7]) ∧
  planet(ENTITY[8]) ∧
   is_field_of(ENTITY[6], ENTITY[8]) ∧ is_field_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧
    REF1[1] = it ∧
     REF2[2] = us ∧
      REF3[5] = we ∧
       entered(EVENT[9], REF3[5], ENTITY[6]) ∧
        ADV_probably(SITUATION[13]) ∧
         is_TMP(EVENT[9], TIME[3]) ∧
          past(EVENT[9]) ∧
           is_TMP_as_soon_as(SITUATION[12], TIME[3]) ∧
            past(EVENT[11]) ∧ is_FACT_THAT(SITUATION[13], is_FACT_THAT(SITUATION[12], detected(EVENT[11], REF1[1], REF2[2]))))

# ::id 375_fiction_DICK-1952;AT106-5;NE
# ::snt It probably had a bead on us from the start .
∃ REF2[3] REF1[1] EVENT[5] ENTITY[2] ENTITY[4] (
 start(ENTITY[4]) ∧
  REF1[1] = it ∧
   bead(ENTITY[2]) ∧
    REF2[3] = us ∧
     ADV_probably(EVENT[5]) ∧
      past(EVENT[5]) ∧
       had(EVENT[5], REF1[1], ENTITY[2]) ∧ from(EVENT[5]) = ENTITY[4] ∧ on(EVENT[5]) = REF2[3])

# ::id 376_fiction_DICK-1952;AT106-6;NE
# ::snt We do n't have a chance .
∃ REF1[1] (REF1[1] = we ∧ ¬ ∃ EVENT[3] ENTITY[2] (chance(ENTITY[2]) ∧ do_have(EVENT[3], REF1[1], ENTITY[2])))

# ::id 377_fiction_DICK-1952;AT106-7;NE
# ::snt It knows all about the ship .
∃ REF1[1] EVENT[3] ENTITY[2] (ship(ENTITY[2]) ∧ REF1[1] = it ∧ knows(EVENT[3], REF1[1]) ∧ all_about(EVENT[3]) = ENTITY[2])

# ::id 378_fiction_DICK-1952;AT106-8;NE
# ::snt It 's just waiting for us to take off again . "
∃ SITUATION[7] REF2[3] PRP[2] REF1[1] EVENT[4] EVENT[6] (
 REF1[1] = it ∧
  REF2[3] = us ∧
   is_FACT_THAT(PRP[2], take_off(EVENT[4], REF2[3])) ∧
    ADV_just(SITUATION[7]) ∧
     ADV_again(EVENT[4]) ∧ is_FACT_THAT(SITUATION[7], 's_waiting(EVENT[6], REF1[1]) ∧ PRP(EVENT[6]) = PRP[2]))

# ::id 379_fiction_DICK-1952;AT107-1;NE
# ::snt " I understand about the rock , " Nasha said , nodding .
∃ REF1[3] EVENT[5] EVENT[2] EVENT[1] ENTITY[4] (
 rock(ENTITY[4]) ∧
  past(EVENT[2]) ∧
   REF1[3] = i ∧
    CONJ_and(said(EVENT[2], ENTITY[Nasha], understand(EVENT[5], REF1[3]) ∧ about(EVENT[5]) = ENTITY[4]),
     nodding(EVENT[1], ENTITY[Nasha])))

# ::id 380_fiction_DICK-1952;AT107-2;NE
# ::snt " The gun noticed it , but not us , since we 're on the ground , not above .
∃ REF3[6] SITUATION[5] EVENT[8] EVENT[10] GROUP[2] ENTITY[7] ENTITY[1] (
 gun(ENTITY[1]) ∧
  ground(ENTITY[7]) ∧
   CONJ_but(∃ REF1[3] (REF1[3] = it ∧ is_element_of(REF1[3], GROUP[2])), ¬ ∃ REF2[4] (REF2[4] = us ∧ is_element_of(REF2[4], GROUP[2]))) ∧
    REF3[6] = we ∧
     is_FACT_THAT(SITUATION[5], copula(EVENT[8], REF3[6]) ∧ on(EVENT[8]) = ENTITY[7]) ∧
      ¬ LOC_above(EVENT[8]) ∧
       past(EVENT[10]) ∧ noticed(EVENT[10], ENTITY[1], GROUP[2]) ∧ since(EVENT[10]) = SITUATION[5])

# ::id 381_fiction_DICK-1952;AT107-3;NE
# ::snt It 's only designed to combat objects in the sky .
∃ ENTITY[3] REF1[1] EVENT[7] EVENT[4] GROUP[5] ENTITY[6] (
 sky(ENTITY[6]) ∧
  REF1[1] = it ∧
   is_objects_in(GROUP[5], ENTITY[6]) ∧
    is_VP-FACT_THAT(ENTITY[3], designed(EVENT[4], _, REF1[1], combat(EVENT[7], REF1[1], GROUP[5]))) ∧
     ONLY ENTITY[2] (is_of(ENTITY[2], ENTITY[3]), ∃ EVENT[8] copula(EVENT[8], REF1[1], ENTITY[2])))

# ::id 382_fiction_DICK-1952;AT107-4;NE
# ::snt The ship is safe until it takes off again ,
∃ REF1[4] SITUATION[3] ATTRIB[2] EVENT[5] EVENT[7] ENTITY[1] (
 ship(ENTITY[1]) ∧
  REF1[4] = it ∧
   is_FACT_THAT(SITUATION[3], takes_off(EVENT[5], REF1[4])) ∧
    is_safe_until(ATTRIB[2], SITUATION[3]) ∧ ADV_again(EVENT[5]) ∧ copula(EVENT[7], ENTITY[1], ATTRIB[2]))

# ::id 383_fiction_DICK-1952;AT107-4;NE
# ::snt then the end will come . "
∃ SITUATION[3] ENTITY[1] (end(ENTITY[1]) ∧ TMP_then(SITUATION[3]) ∧ is_FACT_THAT(SITUATION[3], MD_will(∃ EVENT[2] come(EVENT[2], ENTITY[1]))))

# ::id 384_fiction_DICK-1952;AT108-1;NE
# ::snt " But what 's this gun for ? " Tance put in .
∃ EVENT[1] ENTITY[3] (
 gun(ENTITY[3]) ∧
  past(EVENT[1]) ∧
   put_in(EVENT[1], ENTITY[Tance], QUEST(∃ EVENT[4] ? ENTITY[2] (copula(EVENT[4], ENTITY[3]) ∧ for(EVENT[4]) = ENTITY[2]))))

# ::id 385_fiction_DICK-1952;AT108-2;NE
# ::snt " There 's no one alive here .
¬ ∃ ATTRIB[2] EVENT[3] ENTITY[1] (alive(ATTRIB[2]) ∧ is_one_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ LOC_here(EVENT[3]) ∧ copula(EVENT[3], ENTITY[1]))

# ::id 386_fiction_DICK-1952;AT108-3;NE
# ::snt Everyone is dead . "
∀ ENTITY[1] (one(ENTITY[1]) → ∃ ATTRIB[2] EVENT[3] (dead(ATTRIB[2]) ∧ copula(EVENT[3], ENTITY[1], ATTRIB[2])))

# ::id 387_fiction_DICK-1952;AT109-1;NE
# ::snt " It 's a machine , " Dorle said .
∃ REF1[2] EVENT[4] EVENT[1] ENTITY[3] (
 REF1[2] = it ∧
  machine(ENTITY[3]) ∧ past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Dorle], copula(EVENT[4], REF1[2], ENTITY[3])))

# ::id 388_fiction_DICK-1952;AT109-2;NE
# ::snt " A machine that was made to do a job .
∃ EVENT[5] EVENT[3] EVENT[6] ENTITY[4] ENTITY[1] (
 job(ENTITY[4]) ∧
  made(EVENT[3], _, ENTITY[1], do(EVENT[5], ENTITY[1], ENTITY[4])) ∧ machine(ENTITY[1]) ∧
   past(EVENT[3]) ∧ xxx(EVENT[6]) ∧ LINK(EVENT[6]) = ENTITY[1])

# ::id 389_fiction_DICK-1952;AT109-3;NE
# ::snt And it 's doing the job .
∃ REF1[1] EVENT[3] ENTITY[2] (job(ENTITY[2]) ∧ REF1[1] = it ∧ copula_doing(EVENT[3], REF1[1], ENTITY[2]))

# ::id 390_fiction_DICK-1952;AT109-4;NE
# ::snt How it survived the blast I do n't know .
∃ REF2[1] ENTITY[5] (
 blast(ENTITY[5]) ∧
  REF2[1] = i ∧
   ¬ ∃ EVENT[2] do_know(EVENT[2], REF2[1],
         QUEST(∃ REF1[4] EVENT[6] ? ENTITY[3] (
               REF1[4] = it ∧
                is_ADV(EVENT[6], ENTITY[3]) ∧
                 is_before(EVENT[6], EVENT[2]) ∧ survived(EVENT[6], REF1[4], ENTITY[5])))))

# ::id 391_fiction_DICK-1952;AT109-5;NE
# ::snt On it goes , waiting for the enemy .
∃ REF1[1] EVENT[4] EVENT[3] ENTITY[2] (
 enemy(ENTITY[2]) ∧
  REF1[1] = it ∧
   CONJ_and(goes(EVENT[4], REF1[1]), waiting(EVENT[3], REF1[1]) ∧ for(EVENT[3]) = ENTITY[2]))

# ::id 392_fiction_DICK-1952;AT109-6;NE
# ::snt Probably they came by air in some sort of projectiles . "
∃ SITUATION[6] REF1[1] ENTITY[2] (
 REF1[1] = they ∧
  air(ENTITY[2]) ∧
   ADV_probably(SITUATION[6]) ∧
    is_FACT_THAT(SITUATION[6],
     SOME GROUP[4] ENTITY[3] ((projectiles(GROUP[4]) ∧ is_sort_of(ENTITY[3], GROUP[4])),
      ∃ EVENT[5] (
       past(EVENT[5]) ∧
        came(EVENT[5], REF1[1]) ∧ in(EVENT[5]) = ENTITY[3] ∧ by(EVENT[5]) = ENTITY[2]))))

# ::id 393_fiction_DICK-1952;AT110-1;NE
# ::snt " The enemy , " Nasha said .
∃ EVENT[3] EVENT[1] ENTITY[2] (
 enemy(ENTITY[2]) ∧
  past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Nasha], xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[2]))

# ::id 394_fiction_DICK-1952;AT110-2;NE
# ::snt " Their own race .
∃ ATTRIB[3] REF1[2] EVENT[4] ENTITY[1] (
 REF1[2] = their ∧
  own(ATTRIB[3]) ∧
   is_race_ATTRIBUTE(ENTITY[1], ATTRIB[3]) ∧ is_race_POS(ENTITY[1], REF1[2]) ∧
    xxx(EVENT[4]) ∧ LINK(EVENT[4]) = ENTITY[1])

# ::id 395_fiction_DICK-1952;AT110-3;NE
# ::snt It is hard to believe that they really bombed themselves , fired at themselves . "
∃ ATTRIB[9] REF3[7] REF2[4] REF1[3] SITUATION[1] EVENT[5] EVENT[8] EVENT[2] EVENT[10] (
 REF1[3] = they ∧
  REF2[4] = themselves ∧
   REF3[7] = themselves ∧
    is_FACT_THAT(SITUATION[1],
     believe(EVENT[2],
      bombed(EVENT[5], REF1[3], REF2[4]) ∧
       fired(EVENT[8], REF1[3]) ∧ at(EVENT[8]) = REF3[7])) ∧
     hard(ATTRIB[9]) ∧
      ADV_really(EVENT[5]) ∧
       is_before(EVENT[5], EVENT[2]) ∧ is_before(EVENT[8], EVENT[2]) ∧ copula(EVENT[10], SITUATION[1], ATTRIB[9]))

# ::id 396_fiction_DICK-1952;AT111-1;NE
# ::snt " Well , it 's over with .
∃ REF1[1] EVENT[2] (REF1[1] = it ∧ copula_over_with(EVENT[2], REF1[1]))

# ::id 397_fiction_DICK-1952;AT111-2;NE
# ::snt Except right here , where we 're standing .
∃ SITUATION[7] REF1[3] ATTRIB[1] EVENT[4] EVENT[6] (
 ADV_right_here(ATTRIB[1]) ∧
  REF1[3] = we ∧
   is_LOC(EVENT[4], SITUATION[7]) ∧
    're_standing(EVENT[4], REF1[3]) ∧ is_FACT_THAT(SITUATION[7], xxx(EVENT[6]) ∧ Except(EVENT[6]) = ATTRIB[1]))

# ::id 398_fiction_DICK-1952;AT111-3;NE
# ::snt This one gun , still alert , ready to kill .
∃ ATTRIB[3] ATTRIB[2] EVENT[6] EVENT[4] EVENT[5] ENTITY[1] (
 (CD_one(ENTITY[1]), gun(ENTITY[1])) ∧
  still_alert(ATTRIB[2]) ∧
   is_ready_to(ATTRIB[3], kill(EVENT[4])) ∧
    CONJ_and(xxx(EVENT[6], ENTITY[1], ATTRIB[2]), xxx(EVENT[5], ENTITY[1], ATTRIB[3])))

# ::id 399_fiction_DICK-1952;AT111-4;NE
# ::snt It 'll go on until it wears out . "
∃ REF1[1] (
 REF1[1] = it ∧
  MD'll(∃ REF2[3] SITUATION[2] EVENT[4] EVENT[5] (
        REF2[3] = it ∧
         is_FACT_THAT(SITUATION[2], wears_out(EVENT[4], REF2[3])) ∧
          go_on(EVENT[5], REF1[1]) ∧ until(EVENT[5]) = SITUATION[2])))

# ::id 400_fiction_DICK-1952;AT112-1;NE
# ::snt " And by that time we 'll be dead , " Nasha said bitterly .
∃ REF1[3] EVENT[1] ENTITY[2] (
 time(ENTITY[2]) ∧
  REF1[3] = we ∧
   ADV_bitterly(EVENT[1]) ∧
    past(EVENT[1]) ∧
     said(EVENT[1], ENTITY[Nasha],
      MD'll(∃ ATTRIB[4] EVENT[5] (
            dead(ATTRIB[4]) ∧
             copula(EVENT[5], REF1[3], ATTRIB[4]) ∧ by(EVENT[5]) = ENTITY[2]))))

# ::id 401_fiction_DICK-1952;AT113-1;NE
# ::snt " There must have been hundreds of guns like this , " Dorle murmured .
∃ ATTRIB[4] EVENT[1] GROUP[3] GROUP[2] ENTITY[5] (
 is_like_comp(ATTRIB[4], ENTITY[5]) ∧
  is_guns_ATTRIBUTE(GROUP[3], ATTRIB[4]) ∧
   is_hundreds_of(GROUP[2], GROUP[3]) ∧
    past(EVENT[1]) ∧ murmured(EVENT[1], ENTITY[Dorle], MD_must(∃ EVENT[6] have_copula(EVENT[6], GROUP[2]))))

# ::id 402_fiction_DICK-1952;AT113-2;NE
# ::snt " They must have been used to the sight , guns , weapons , uniforms .
∃ REF1[1] GROUP[3] GROUP[4] GROUP[5] GROUP[2] ENTITY[6] (
 sight(ENTITY[6]) ∧
  guns(GROUP[3]) ∧
   weapons(GROUP[4]) ∧
    uniforms(GROUP[5]) ∧
     is_subset_of_or_equal_to(GROUP[3], GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[4], GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[5], GROUP[2]) ∧
      is_-ENTITY-_namely(ENTITY[6], GROUP[2]) ∧
       REF1[1] = they ∧
        MD_must(∃ EVENT[7] (have_used(EVENT[7], _, REF1[1]) ∧ to(EVENT[7]) = ENTITY[6])))

# ::id 403_fiction_DICK-1952;AT113-3;NE
# ::snt Probably they accepted it as a natural thing , part of their lives , like eating and sleeping .
∃ ATTRIB[6] REF3[5] ATTRIB[11] REF2[2] REF1[1] EVENT[12] GROUP[7] GROUP[4] ENTITY[3] ENTITY[10] (
 REF1[1] = they ∧
  REF2[2] = it ∧
   natural(ATTRIB[11]) ∧
    is_thing_ATTRIBUTE(ENTITY[10], ATTRIB[11]) ∧
     REF3[5] = their ∧
      is_lives_POS(GROUP[4], REF3[5]) ∧
       ∃ ENTITY[8] (eating(ENTITY[8]) ∧ is_element_of(ENTITY[8], GROUP[7])) ∧
        ∃ ENTITY[9] (sleeping(ENTITY[9]) ∧ is_element_of(ENTITY[9], GROUP[7])) ∧
        is_like_comp(ATTRIB[6], GROUP[7]) ∧
         is_part_ATTRIBUTE(ENTITY[3], ATTRIB[6]) ∧ is_part_of(ENTITY[3], GROUP[4]) ∧
          is_-ENTITY-_namely(ENTITY[10], ENTITY[3]) ∧
           ADV_probably(EVENT[12]) ∧
            past(EVENT[12]) ∧ accepted(EVENT[12], REF1[1], REF2[2]) ∧ as(EVENT[12]) = ENTITY[10])

# ::id 404_fiction_DICK-1952;AT113-4;NE
# ::snt An institution , like the church and the state .
∃ ATTRIB[2] EVENT[6] GROUP[3] ENTITY[1] ENTITY[4] ENTITY[5] (
 church(ENTITY[4]) ∧
  state(ENTITY[5]) ∧
   is_element_of(ENTITY[4], GROUP[3]) ∧ is_element_of(ENTITY[5], GROUP[3]) ∧
    is_like_comp(ATTRIB[2], GROUP[3]) ∧
     is_institution_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ xxx(EVENT[6]) ∧ LINK(EVENT[6]) = ENTITY[1])

# ::id 405_fiction_DICK-1952;AT113-5;NE
# ::snt Men trained to fight , to lead armies ,
∃ EVENT[3] EVENT[5] EVENT[2] GROUP[4] GROUP[1] (
 Men(GROUP[1]) ∧
  armies(GROUP[4]) ∧
   past(EVENT[2]) ∧
    trained(EVENT[2], GROUP[1], fight(EVENT[3], GROUP[1]) ∧ lead(EVENT[5], GROUP[1], GROUP[4])))

# ::id 406_fiction_DICK-1952;AT113-5;NE
# ::snt a regular profession .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (regular(ATTRIB[2]) ∧ is_profession_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[1])

# ::id 407_fiction_DICK-1952;AT113-6;NE
# ::snt Honored , respected . "
∃ ATTRIB[2] ATTRIB[1] EVENT[3] EVENT[3] (
 honored(ATTRIB[1]) ∧
  respected(ATTRIB[2]) ∧ xxx(EVENT[3], _, ATTRIB[1]) ∧ xxx(EVENT[3], _, ATTRIB[2]))

# ::id 408_fiction_DICK-1952;AT114-1;NE
# ::snt Tance was walking slowly toward the gun , peering nearsightedly up at it .
∃ SITUATION[7] REF1[3] EVENT[6] EVENT[4] ENTITY[1] ENTITY[2] (
 gun(ENTITY[2]) ∧
  Tance(ENTITY[1]) ∧
   REF1[3] = it ∧
    ADV_slowly(SITUATION[7]) ∧
     past(EVENT[6]) ∧
      ADV_nearsightedly(EVENT[4]) ∧
       is_FACT_THAT(SITUATION[7],
        CONJ_and(was_walking(EVENT[6], ENTITY[1]) ∧ toward(EVENT[6]) = ENTITY[2],
         peering_up(EVENT[4], ENTITY[1]) ∧ at(EVENT[4]) = REF1[3])))

# ::id 409_fiction_DICK-1952;AT114-2;NE
# ::snt " Quite complex , is n't it ?
∃ ATTRIB[1] EVENT[2] (quite_complex(ATTRIB[1]) ∧ xxx(EVENT[2], _, ATTRIB[1]))

# ::id 410_fiction_DICK-1952;AT114-3;NE
# ::snt All those vanes and tubes .
∃ GROUP[3] GROUP[4] GROUP[2] (
 vanes(GROUP[3]) ∧
  tubes(GROUP[4]) ∧
   is_subset_of_or_equal_to(GROUP[3], GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[4], GROUP[2]) ∧
    ALL GROUP[1] (is_equals(GROUP[1], GROUP[2]), ∃ EVENT[5] (xxx(EVENT[5]) ∧ LINK(EVENT[5]) = GROUP[1])))

# ::id 411_fiction_DICK-1952;AT114-4;NE
# ::snt I suppose this is some sort of a telescopic sight . "
∃ REF1[1] EVENT[2] ENTITY[3] (
 REF1[1] = i ∧
  suppose(EVENT[2], REF1[1],
   SOME ATTRIB[6] ENTITY[5] ENTITY[4] ((telescopic(ATTRIB[6]) ∧ is_sight_ATTRIBUTE(ENTITY[5], ATTRIB[6]) ∧ is_sort_of(ENTITY[4], ENTITY[5])),
    ∃ EVENT[7] copula(EVENT[7], ENTITY[3], ENTITY[4]))))

# ::id 412_fiction_DICK-1952;AT114-5;NE
# ::snt His gloved hand touched the end of a long tube .
∃ ATTRIB[3] REF1[2] ATTRIB[6] EVENT[7] ENTITY[1] ENTITY[5] ENTITY[4] (
 long(ATTRIB[6]) ∧
  is_tube_ATTRIBUTE(ENTITY[5], ATTRIB[6]) ∧
   is_end_of(ENTITY[4], ENTITY[5]) ∧
    REF1[2] = his ∧
     gloved(ATTRIB[3]) ∧
      is_hand_ATTRIBUTE(ENTITY[1], ATTRIB[3]) ∧ is_hand_POS(ENTITY[1], REF1[2]) ∧
       past(EVENT[7]) ∧ touched(EVENT[7], ENTITY[1], ENTITY[4]))

# ::id 413_fiction_DICK-1952;AT115-1;NE
# ::snt Instantly the gun shifted , the barrel retracting .
∃ SITUATION[5] EVENT[4] EVENT[3] ENTITY[2] ENTITY[1] (
 gun(ENTITY[1]) ∧
  barrel(ENTITY[2]) ∧
   TMP_instantly(SITUATION[5]) ∧
    past(EVENT[4]) ∧ is_FACT_THAT(SITUATION[5], CONJ_and(shifted(EVENT[4], ENTITY[1]), retracting(EVENT[3], ENTITY[2]))))

# ::id 414_fiction_DICK-1952;AT115-2;NE
# ::snt It swung --
∃ REF1[1] EVENT[2] (REF1[1] = it ∧ past(EVENT[2]) ∧ swung(EVENT[2], REF1[1]))

# ::id 415_fiction_DICK-1952;AT116-1;NE
# ::snt " Do n't move ! " Dorle cried .
∃ EVENT[1] (past(EVENT[1]) ∧ cried(EVENT[1], ENTITY[Dorle], IMPERATIVE(¬ ∃ EVENT[2] do_move(EVENT[2]))))

# ::id 416_fiction_DICK-1952;AT116-2;NE
# ::snt The barrel swung past them as they stood , rigid and still .
∃ ATTRIB[6] ATTRIB[5] REF2[4] SITUATION[3] REF1[2] EVENT[8] EVENT[7] EVENT[7] EVENT[9] ENTITY[1] (
 barrel(ENTITY[1]) ∧
  REF1[2] = them ∧
   REF2[4] = they ∧
    rigid(ATTRIB[5]) ∧
     still(ATTRIB[6]) ∧
      is_FACT_THAT(SITUATION[3],
       CONJ_and(stood(EVENT[8], REF2[4]),
        CONJ_and(xxx(EVENT[7], REF2[4], ATTRIB[5]), xxx(EVENT[7], REF2[4], ATTRIB[6])))) ∧
       past(EVENT[8]) ∧
        past(EVENT[9]) ∧
         swung(EVENT[9], ENTITY[1]) ∧ as(EVENT[9]) = SITUATION[3] ∧ past(EVENT[9]) = REF1[2])

# ::id 417_fiction_DICK-1952;AT116-3;NE
# ::snt For one terrible moment it hesitated over their heads , clicking and whirring , settling into position .
∃ REF2[5] REF1[3] ATTRIB[2] EVENT[10] EVENT[9] EVENT[6] EVENT[7] ENTITY[8] GROUP[4] ENTITY[1] (
 terrible(ATTRIB[2]) ∧
  (CD_one(ENTITY[1]), is_moment_ATTRIBUTE(ENTITY[1], ATTRIB[2])) ∧
   REF1[3] = it ∧
    REF2[5] = their ∧
     is_heads_POS(GROUP[4], REF2[5]) ∧
      position(ENTITY[8]) ∧
       past(EVENT[10]) ∧
        CONJ_and(CONJ_and(hesitated(EVENT[10], REF1[3]) ∧ over(EVENT[10]) = GROUP[4] ∧
                   For(EVENT[10]) = ENTITY[1],
              settling(EVENT[9], REF1[3]) ∧ into(EVENT[9]) = ENTITY[8]),
         CONJ_and(clicking(EVENT[6], REF1[3]), whirring(EVENT[7], REF1[3]))))

# ::id 418_fiction_DICK-1952;AT116-4;NE
# ::snt Then the sounds died out
∃ EVENT[2] GROUP[1] (sounds(GROUP[1]) ∧ TMP_then(EVENT[2]) ∧ past(EVENT[2]) ∧ died_out(EVENT[2], GROUP[1]))

# ::id 419_fiction_DICK-1952;AT116-5;NE
# ::snt and the gun became silent .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (gun(ENTITY[1]) ∧ silent(ATTRIB[2]) ∧ past(EVENT[3]) ∧ became(EVENT[3], ENTITY[1], ATTRIB[2]))

# ::id 420_fiction_DICK-1952;AT117-1;NE
# ::snt Tance smiled foolishly inside his helmet .
∃ REF1[2] EVENT[3] ENTITY[1] (
 REF1[2] = his ∧
  is_helmet_POS(ENTITY[1], REF1[2]) ∧
   ADV_foolishly(EVENT[3]) ∧ past(EVENT[3]) ∧ smiled(EVENT[3], ENTITY[Tance]) ∧ inside(EVENT[3]) = ENTITY[1])

# ::id 421_fiction_DICK-1952;AT117-2;NE
# ::snt " I must have put my finger over the lens .
∃ REF1[1] ENTITY[4] (
 lens(ENTITY[4]) ∧
  REF1[1] = i ∧
   MD_must(∃ REF2[3] EVENT[5] ENTITY[2] (
         REF2[3] = my ∧
          is_finger_POS(ENTITY[2], REF2[3]) ∧
           have_put(EVENT[5], REF1[1], ENTITY[2]) ∧ over(EVENT[5]) = ENTITY[4])))

# ::id 422_fiction_DICK-1952;AT117-3;NE
# ::snt I 'll be more careful . "
∃ REF1[1] (REF1[1] = i ∧ MD'll(∃ ATTRIB[2] EVENT[3] (more_careful(ATTRIB[2]) ∧ copula(EVENT[3], REF1[1], ATTRIB[2]))))

# ::id 423_fiction_DICK-1952;AT117-4;NE
# ::snt He made his way up onto the circular slab , stepping gingerly behind the body of the gun .
∃ ATTRIB[6] REF2[3] REF1[1] ATTRIB[5] EVENT[10] EVENT[9] ENTITY[2] ENTITY[4] ENTITY[8] ENTITY[7] (
 circular(ATTRIB[5]) ∧
  is_slab_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
   gun(ENTITY[8]) ∧
    is_body_of(ENTITY[7], ENTITY[8]) ∧
     REF1[1] = he ∧
      REF2[3] = his ∧
       is_way_up_onto(ENTITY[2], ENTITY[4]) ∧ is_way_POS(ENTITY[2], REF2[3]) ∧
        gingerly(ATTRIB[6]) ∧
         past(EVENT[10]) ∧
          CONJ_and(made(EVENT[10], REF1[1], ENTITY[2]),
           stepping(EVENT[9], ENTITY[2], ATTRIB[6]) ∧ behind(EVENT[9]) = ENTITY[7]))

# ::id 424_fiction_DICK-1952;AT117-5;NE
# ::snt He disappeared from view .
∃ REF1[1] EVENT[3] ENTITY[2] (
 REF1[1] = he ∧
  view(ENTITY[2]) ∧ past(EVENT[3]) ∧ disappeared(EVENT[3], REF1[1]) ∧ from(EVENT[3]) = ENTITY[2])

# ::id 425_fiction_DICK-1952;AT118-1;NE
# ::snt " Where did he go ? " Nasha said irritably .
∃ EVENT[1] (
 ADV_irritably(EVENT[1]) ∧
  past(EVENT[1]) ∧
   said(EVENT[1], ENTITY[Nasha],
    QUEST(∃ REF1[3] EVENT[4] ? LOC[2] (
          REF1[3] = he ∧
           is_LOC(EVENT[4], LOC[2]) ∧ is_before(EVENT[4], EVENT[1]) ∧ did_go(EVENT[4], REF1[3])))))

# ::id 426_fiction_DICK-1952;AT118-2;NE
# ::snt " He 'll get us all killed . "
∃ REF1[1] (
 REF1[1] = he ∧
  MD'll(∃ REF2[3] EVENT[4] EVENT[2] (REF2[3] = us ∧ get(EVENT[2], REF1[1], killed(EVENT[4], _, REF2[3])))))

# ::id 427_fiction_DICK-1952;AT119-1;NE
# ::snt " Tance , come back ! " Dorle shouted .
∃ EVENT[2] EVENT[1] (DIR_back(EVENT[2]) ∧ past(EVENT[1]) ∧ shouted(EVENT[1], ENTITY[Dorle], come(EVENT[2], ENTITY[Tance])))

# ::id 428_fiction_DICK-1952;AT119-2;NE
# ::snt " What 's the matter with you ? "
∃ REF1[3] ENTITY[2] (REF1[3] = you ∧ is_matter_with(ENTITY[2], REF1[3]) ∧ QUEST(∃ EVENT[4] ? ENTITY[1] copula(EVENT[4], ENTITY[1], ENTITY[2])))

# ::id 429_fiction_DICK-1952;AT120-1;NE
# ::snt " In a minute . "
∃ EVENT[2] ENTITY[1] (minute(ENTITY[1]) ∧ xxx(EVENT[2]) ∧ In(EVENT[2]) = ENTITY[1])

# ::id 430_fiction_DICK-1952;AT120-2;NE
# ::snt There was a long silence .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (long(ATTRIB[2]) ∧ is_silence_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], ENTITY[1]))

# ::id 431_fiction_DICK-1952;AT120-3;NE
# ::snt At last the archeologist appeared .
∃ ATTRIB[1] EVENT[3] ENTITY[2] (
 archeologist(ENTITY[2]) ∧
  last(ATTRIB[1]) ∧ past(EVENT[3]) ∧ appeared(EVENT[3], ENTITY[2]) ∧ At(EVENT[3]) = ATTRIB[1])

# ::id 432_fiction_DICK-1952;AT120-4;NE
# ::snt " I think I 've found something .
∃ REF2[3] REF1[1] EVENT[2] (
 REF1[1] = i ∧
  REF2[3] = i ∧
   think(EVENT[2], REF1[1],
    SOME ENTITY[4] (thing(ENTITY[4]), ∃ EVENT[5] (is_before(EVENT[5], EVENT[2]) ∧ 've_found(EVENT[5], REF2[3], ENTITY[4])))))

# ::id 433_fiction_DICK-1952;AT120-5;NE
# ::snt Come up
IMPERATIVE(∃ EVENT[1] come_up(EVENT[1]))

# ::id 434_fiction_DICK-1952;AT120-6;NE
# ::snt and I 'll show you . "
∃ REF1[1] (REF1[1] = i ∧ MD'll(∃ REF2[2] EVENT[3] (REF2[2] = you ∧ show(EVENT[3], REF1[1], REF2[2]))))

# ::id 435_fiction_DICK-1952;AT121-1;NE
# ::snt " What is it ? "
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = it ∧ copula(EVENT[3], ENTITY[1], REF1[2])))

# ::id 436_fiction_DICK-1952;AT122-1;NE
# ::snt " Dorle , you said the gun was here to keep the enemy off .
∃ SITUATION[7] REF1[1] EVENT[6] EVENT[4] EVENT[2] ENTITY[5] ENTITY[3] (
 gun(ENTITY[3]) ∧
  enemy(ENTITY[5]) ∧
   REF1[1] = you ∧
    LOC_here(SITUATION[7]) ∧
     is_before(EVENT[4], EVENT[2]) ∧
      past(EVENT[2]) ∧
       said(EVENT[2], REF1[1],
        is_FACT_THAT(SITUATION[7], copula(EVENT[4], ENTITY[3], keep_off(EVENT[6], ENTITY[3], ENTITY[5])))) ∧
        VOC(EVENT[2]) = ENTITY[Dorle])

# ::id 437_fiction_DICK-1952;AT122-2;NE
# ::snt I think I know why they wanted to keep the enemy off . "
∃ REF2[3] REF1[1] EVENT[4] EVENT[2] ENTITY[8] (
 enemy(ENTITY[8]) ∧
  REF1[1] = i ∧
   REF2[3] = i ∧
    think(EVENT[2], REF1[1],
     know(EVENT[4], REF2[3],
      QUEST(∃ SITUATION[10] REF3[6] EVENT[9] EVENT[7] ? ENTITY[5] (
            REF3[6] = they ∧
             is_ADV(SITUATION[10], ENTITY[5]) ∧
              is_before(EVENT[7], EVENT[4]) ∧
               is_FACT_THAT(SITUATION[10], wanted(EVENT[7], REF3[6], keep_off(EVENT[9], REF3[6], ENTITY[8]))))))))

# ::id 438_fiction_DICK-1952;AT123-1;NE
# ::snt They were puzzled .
∃ REF1[1] EVENT[2] (REF1[1] = they ∧ past(EVENT[2]) ∧ puzzled(EVENT[2], _, REF1[1]))

# ::id 439_fiction_DICK-1952;AT124-1;NE
# ::snt " I think I 've found what the gun is supposed to guard .
∃ REF2[3] REF1[1] EVENT[8] EVENT[7] EVENT[9] EVENT[2] ENTITY[4] ENTITY[6] (
 gun(ENTITY[6]) ∧
  REF1[1] = i ∧
   REF2[3] = i ∧
    is_supposed(EVENT[7], ENTITY[6], guard(EVENT[8], ENTITY[6], ENTITY[4])) ∧
     is_before(EVENT[9], EVENT[2]) ∧ think(EVENT[2], REF1[1], 've_found(EVENT[9], REF2[3], ENTITY[4])))

# ::id 440_fiction_DICK-1952;AT124-2;NE
# ::snt Come and give me a hand . "
CONJ_and(IMPERATIVE(∃ EVENT[1] come(EVENT[1])),
 IMPERATIVE(∃ REF1[2] ENTITY[3] EVENT[4] (REF1[2] = me ∧ hand(ENTITY[3]) ∧ give(EVENT[4], _, ENTITY[3], REF1[2]))))

# ::id 441_fiction_DICK-1952;AT125-1;NE
# ::snt " All right , " Dorle said abruptly .
∃ SITUATION[3] EVENT[2] EVENT[1] (ADV_abruptly(SITUATION[3]) ∧ past(EVENT[1]) ∧ is_FACT_THAT(SITUATION[3], said(EVENT[1], ENTITY[Dorle], xxx(EVENT[2]))))

# ::id 442_fiction_DICK-1952;AT125-2;NE
# ::snt " Let 's go . "
IMPERATIVE(∃ REF1[2] EVENT[3] EVENT[1] (REF1[2] = 's ∧ let(EVENT[1], go(EVENT[3], REF1[2]))))

# ::id 443_fiction_DICK-1952;AT125-3;NE
# ::snt He seized Nasha 's hand .
∃ REF1[1] EVENT[3] ENTITY[2] (REF1[1] = he ∧ is_hand_POS(ENTITY[2], ENTITY[Nasha]) ∧ past(EVENT[3]) ∧ seized(EVENT[3], REF1[1], ENTITY[2]))

# ::id 444_fiction_DICK-1952;AT125-4;NE
# ::snt " Come on .
IMPERATIVE(∃ EVENT[1] come_on(EVENT[1]))

# ::id 445_fiction_DICK-1952;AT125-5;NE
# ::snt Let 's see what he 's found .
IMPERATIVE(∃ REF2[5] REF1[2] EVENT[6] EVENT[7] EVENT[1] ENTITY[3] (
      REF1[2] = 's ∧
       REF2[5] = he ∧
        's_found(EVENT[6], REF2[5], ENTITY[3]) ∧ let(EVENT[1], see(EVENT[7], REF1[2], ENTITY[3]))))

# ::id 446_fiction_DICK-1952;AT125-6;NE
# ::snt I thought something like this might happen when I saw that the gun was -- "
∃ SITUATION[7] SITUATION[13] REF2[3] REF1[1] EVENT[6] EVENT[4] EVENT[8] ENTITY[5] ENTITY[11] (
 gun(ENTITY[5]) ∧
  REF1[1] = i ∧
   REF2[3] = i ∧
    is_TMP(SITUATION[7], SITUATION[13]) ∧
     is_before(EVENT[6], EVENT[4]) ∧
      past(EVENT[4]) ∧
       is_FACT_THAT(SITUATION[7], saw(EVENT[4], REF2[3], copula(EVENT[6], ENTITY[5]))) ∧
        past(EVENT[8]) ∧
         is_FACT_THAT(SITUATION[13],
          thought(EVENT[8], REF1[1],
           SOME ATTRIB[10] ENTITY[9] ((is_like_comp(ATTRIB[10], ENTITY[11]) ∧ is_thing_ATTRIBUTE(ENTITY[9], ATTRIB[10])),
            MD_might(∃ EVENT[12] happen(EVENT[12], ENTITY[9]))))))

# ::id 447_fiction_DICK-1952;AT126-1;NE
# ::snt " Like what ? "
QUEST(∃ EVENT[2] ? ENTITY[1] like(EVENT[2], _, ENTITY[1]))

# ::id 448_fiction_DICK-1952;AT126-2;NE
# ::snt Nasha pulled her hand away .
∃ REF1[2] EVENT[3] ENTITY[1] (
 REF1[2] = her ∧
  is_hand_POS(ENTITY[1], REF1[2]) ∧ DIR_away(EVENT[3]) ∧ past(EVENT[3]) ∧ pulled(EVENT[3], ENTITY[Nasha], ENTITY[1]))

# ::id 449_fiction_DICK-1952;AT126-3;NE
# ::snt " What are you talking about ?
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = you ∧ are_talking_about(EVENT[3], REF1[2], ENTITY[1])))

# ::id 450_fiction_DICK-1952;AT126-4;NE
# ::snt You act as if you knew what he 's found . "
∃ REF3[6] REF2[3] SITUATION[2] REF1[1] EVENT[7] EVENT[8] EVENT[9] ENTITY[4] (
 REF1[1] = you ∧
  REF2[3] = you ∧
   REF3[6] = he ∧
    's_found(EVENT[7], REF3[6], ENTITY[4]) ∧
     is_FACT_THAT(SITUATION[2], knew(EVENT[8], REF2[3], ENTITY[4])) ∧
      past(EVENT[8]) ∧ act(EVENT[9], REF1[1]) ∧ as_if(EVENT[9]) = SITUATION[2])

# ::id 451_fiction_DICK-1952;AT127-1;NE
# ::snt " I do . "
∃ REF1[1] EVENT[2] (REF1[1] = i ∧ do(EVENT[2], REF1[1]))

# ::id 452_fiction_DICK-1952;AT127-2;NE
# ::snt Dorle smiled down at her .
∃ REF1[1] EVENT[2] (REF1[1] = her ∧ past(EVENT[2]) ∧ smiled_down(EVENT[2], ENTITY[Dorle]) ∧ at(EVENT[2]) = REF1[1])

# ::id 453_fiction_DICK-1952;AT127-3;NE
# ::snt " Do you remember the legend that all races have the myth of the buried treasure , and the dragon , the serpent that watches it , guards it , keeping everyone away ? "
∃ REF3[11] REF2[9] ATTRIB[5] ENTITY[4] ENTITY[6] ENTITY[7] GROUP[3] ENTITY[2] ENTITY[16] EVENT[19] EVENT[10] EVENT[15] EVENT[13] (
 DIR_away(EVENT[13]) ∧
  ALL GROUP[18] (races(GROUP[18]), have(EVENT[19], GROUP[18], ENTITY[16])) ∧ legend(ENTITY[16]) ∧
   buried(ATTRIB[5]) ∧
    is_treasure_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
     REF2[9] = it ∧
      REF3[11] = it ∧
       watches(EVENT[10], ENTITY[7], REF2[9]) ∧
        CONJ_and(guards(EVENT[15], ENTITY[7], REF3[11]),
         ∀ ENTITY[12] (one(ENTITY[12]) → keeping(EVENT[13], REF3[11], ENTITY[12]))) ∧ dragon(ENTITY[7]) ∧
        serpent(ENTITY[6]) ∧
         is_-ENTITY-_namely(ENTITY[7], ENTITY[6]) ∧
          is_element_of(ENTITY[4], GROUP[3]) ∧ is_element_of(ENTITY[7], GROUP[3]) ∧
           is_myth_of(ENTITY[2], GROUP[3]) ∧
            is_-ENTITY-_namely(ENTITY[16], ENTITY[2]) ∧
             QUEST(∃ REF1[1] EVENT[20] (REF1[1] = you ∧ do_remember(EVENT[20], REF1[1], ENTITY[16]))))

# ::id 454_fiction_DICK-1952;AT128-1;NE
# ::snt She nodded .
∃ REF1[1] EVENT[2] (REF1[1] = she ∧ past(EVENT[2]) ∧ nodded(EVENT[2], REF1[1]))

# ::id 455_fiction_DICK-1952;AT128-2;NE
# ::snt " Well ? "
∃ EVENT[1] xxx(EVENT[1])

# ::id 456_fiction_DICK-1952;AT129-1;NE
# ::snt Dorle pointed up at the gun .
∃ EVENT[2] ENTITY[1] (gun(ENTITY[1]) ∧ past(EVENT[2]) ∧ pointed_up(EVENT[2], ENTITY[Dorle]) ∧ at(EVENT[2]) = ENTITY[1])

# ::id 457_fiction_DICK-1952;AT130-1;NE
# ::snt " That , " he said , " is the dragon .
∃ REF1[1] EVENT[5] EVENT[2] ENTITY[4] ENTITY[3] (
 dragon(ENTITY[4]) ∧
  REF1[1] = he ∧ past(EVENT[2]) ∧ said(EVENT[2], REF1[1], copula(EVENT[5], ENTITY[3], ENTITY[4])))

# ::id 458_fiction_DICK-1952;AT130-2;NE
# ::snt Come on . "
IMPERATIVE(∃ EVENT[1] come_on(EVENT[1]))

# ::id 459_fiction_DICK-1952;AT131-1;NE
# ::snt Between the three of them they managed to pull up the steel cover and lay it to one side .
∃ REF3[7] REF2[3] REF1[2] EVENT[6] EVENT[9] EVENT[4] ENTITY[8] ENTITY[5] ENTITY[1] (
 REF1[2] = them ∧
  (CD_three(ENTITY[1]), is_of(ENTITY[1], REF1[2])) ∧
   steel_cover(ENTITY[5]) ∧
    REF2[3] = they ∧
     REF3[7] = it ∧
      (CD_one(ENTITY[8]), side(ENTITY[8])) ∧
       past(EVENT[4]) ∧
        managed(EVENT[4], REF2[3],
         CONJ_and(pull_up(EVENT[6], REF2[3], ENTITY[5]),
          lay(EVENT[9], REF2[3], REF3[7]) ∧ to(EVENT[9]) = ENTITY[8])) ∧
         Between(EVENT[4]) = ENTITY[1])

# ::id 460_fiction_DICK-1952;AT131-2;NE
# ::snt Dorle was wet with perspiration when they finished .
∃ SITUATION[8] REF1[4] ATTRIB[1] EVENT[5] EVENT[7] ENTITY[2] (
 perspiration(ENTITY[2]) ∧
  is_wet_with(ATTRIB[1], ENTITY[2]) ∧
   REF1[4] = they ∧
    is_TMP(EVENT[5], SITUATION[8]) ∧
     past(EVENT[5]) ∧
      finished(EVENT[5], REF1[4]) ∧
       past(EVENT[7]) ∧ is_FACT_THAT(SITUATION[8], copula(EVENT[7], ENTITY[Dorle], ATTRIB[1])))

# ::id 461_fiction_DICK-1952;AT132-1;NE
# ::snt " It is n't worth it , " he grunted .
∃ REF1[1] EVENT[2] (
 REF1[1] = he ∧
  past(EVENT[2]) ∧
   grunted(EVENT[2], REF1[1],
    ¬ ∃ REF2[4] ATTRIB[3] EVENT[5] (REF2[4] = it ∧ is_worth_comp(ATTRIB[3], REF2[4]) ∧ copula(EVENT[5], _, ATTRIB[3]))))

# ::id 462_fiction_DICK-1952;AT132-2;NE
# ::snt He stared into the dark yawning hole .
∃ REF1[1] ATTRIB[4] ATTRIB[3] EVENT[5] ENTITY[2] (
 dark(ATTRIB[3]) ∧
  yawning(ATTRIB[4]) ∧
   is_hole_ATTRIBUTE(ENTITY[2], ATTRIB[4]) ∧ is_hole_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
    REF1[1] = he ∧ past(EVENT[5]) ∧ stared(EVENT[5], REF1[1]) ∧ into(EVENT[5]) = ENTITY[2])

# ::id 463_fiction_DICK-1952;AT132-3;NE
# ::snt " Or is it ? "
∃ REF1[1] EVENT[2] (REF1[1] = it ∧ copula(EVENT[2], REF1[1]))

# ::id 464_fiction_DICK-1952;AT133-1;NE
# ::snt Nasha clicked on her hand lamp , shining the beam down the stairs .
∃ REF1[2] EVENT[6] EVENT[5] ENTITY[1] GROUP[4] ENTITY[3] (
 beam(ENTITY[3]) ∧
  stairs(GROUP[4]) ∧
   REF1[2] = her ∧
    is_hand_lamp_POS(ENTITY[1], REF1[2]) ∧
     past(EVENT[6]) ∧
      CONJ_and(clicked_on(EVENT[6], ENTITY[Nasha], ENTITY[1]),
       shining(EVENT[5], ENTITY[1], ENTITY[3]) ∧ down(EVENT[5]) = GROUP[4]))

# ::id 465_fiction_DICK-1952;AT133-2;NE
# ::snt The steps were thick with dust and rubble .
∃ ATTRIB[2] EVENT[6] GROUP[3] GROUP[1] (
 steps(GROUP[1]) ∧
  ∃ ENTITY[4] (dust(ENTITY[4]) ∧ is_element_of(ENTITY[4], GROUP[3])) ∧
   ∃ ENTITY[5] (rubble(ENTITY[5]) ∧ is_element_of(ENTITY[5], GROUP[3])) ∧
   is_thick_with(ATTRIB[2], GROUP[3]) ∧ past(EVENT[6]) ∧ copula(EVENT[6], GROUP[1], ATTRIB[2]))

# ::id 466_fiction_DICK-1952;AT133-3;NE
# ::snt At the bottom was a steel door .
∃ EVENT[3] ENTITY[2] ENTITY[1] (
 bottom(ENTITY[1]) ∧
  steel_door(ENTITY[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], ENTITY[2]) ∧ At(EVENT[3]) = ENTITY[1])

# ::id 467_fiction_DICK-1952;AT134-1;NE
# ::snt " Come on , " Tance said excitedly .
∃ EVENT[1] (ADV_excitedly(EVENT[1]) ∧ past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Tance], IMPERATIVE(∃ EVENT[2] come_on(EVENT[2]))))

# ::id 468_fiction_DICK-1952;AT134-2;NE
# ::snt He started down the stairs .
∃ REF1[1] EVENT[3] GROUP[2] (stairs(GROUP[2]) ∧ REF1[1] = he ∧ past(EVENT[3]) ∧ started_down(EVENT[3], REF1[1], GROUP[2]))

# ::id 469_fiction_DICK-1952;AT134-3;NE
# ::snt They watched him reach the door and pull hopefully on it without success .
∃ REF3[6] REF2[3] REF1[1] EVENT[5] EVENT[8] EVENT[2] ENTITY[7] ENTITY[4] (
 door(ENTITY[4]) ∧
  REF1[1] = they ∧
   REF2[3] = him ∧
    REF3[6] = it ∧
     success(ENTITY[7]) ∧
      ADV_hopefully(EVENT[8]) ∧
       past(EVENT[2]) ∧
        watched(EVENT[2], REF1[1],
         CONJ_and(reach(EVENT[5], REF2[3], ENTITY[4]),
          pull(EVENT[8], REF2[3]) ∧ without(EVENT[8]) = ENTITY[7] ∧ on(EVENT[8]) = REF3[6])))

# ::id 470_fiction_DICK-1952;AT134-4;NE
# ::snt " Give a hand ! "
IMPERATIVE(∃ EVENT[2] ENTITY[1] (hand(ENTITY[1]) ∧ give(EVENT[2], _, ENTITY[1])))

# ::id 471_fiction_DICK-1952;AT135-1;NE
# ::snt " All right . "
∃ EVENT[1] xxx(EVENT[1])

# ::id 472_fiction_DICK-1952;AT135-2;NE
# ::snt They came gingerly after him .
∃ REF2[2] REF1[1] EVENT[3] (
 REF1[1] = they ∧
  REF2[2] = him ∧
   ADV_gingerly(EVENT[3]) ∧ past(EVENT[3]) ∧ came(EVENT[3], REF1[1]) ∧ after(EVENT[3]) = REF2[2])

# ::id 473_fiction_DICK-1952;AT135-3;NE
# ::snt Dorle examined the door .
∃ EVENT[2] ENTITY[1] (door(ENTITY[1]) ∧ past(EVENT[2]) ∧ examined(EVENT[2], ENTITY[Dorle], ENTITY[1]))

# ::id 474_fiction_DICK-1952;AT135-4;NE
# ::snt It was bolted shut , locked .
∃ REF1[1] EVENT[3] EVENT[2] (
 REF1[1] = it ∧
  past(EVENT[3]) ∧ CONJ_and(bolted_shut(EVENT[3], _, REF1[1]), locked(EVENT[2], _, REF1[1])))

# ::id 475_fiction_DICK-1952;AT135-5;NE
# ::snt There was an inscription on the door
∃ EVENT[3] ENTITY[1] ENTITY[2] (door(ENTITY[2]) ∧ is_inscription_on(ENTITY[1], ENTITY[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], ENTITY[1]))

# ::id 476_fiction_DICK-1952;AT135-6;NE
# ::snt but he could not read it .
∃ REF1[1] (REF1[1] = he ∧ MD_could(¬ ∃ REF2[2] EVENT[3] (REF2[2] = it ∧ read(EVENT[3], REF1[1], REF2[2]))))

# ::id 477_fiction_DICK-1952;AT136-1;NE
# ::snt " Now what ? " Nasha said .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  said(EVENT[1], ENTITY[Nasha],
   QUEST(∃ ENTITY[3] ? ENTITY[2] (TMP_now(ENTITY[3]) ∧ xxx(ENTITY[3]) ∧ T(ENTITY[3]) = ENTITY[2]))))

# ::id 478_fiction_DICK-1952;AT137-1;NE
# ::snt Dorle took out his hand weapon .
∃ REF1[2] EVENT[3] ENTITY[1] (REF1[2] = his ∧ is_hand_weapon_POS(ENTITY[1], REF1[2]) ∧ past(EVENT[3]) ∧ took_out(EVENT[3], ENTITY[Dorle], ENTITY[1]))

# ::id 479_fiction_DICK-1952;AT137-2;NE
# ::snt " Stand back .
IMPERATIVE(∃ EVENT[1] (DIR_back(EVENT[1]) ∧ stand(EVENT[1])))

# ::id 480_fiction_DICK-1952;AT137-3;NE
# ::snt I can n't think of any other way . "
∃ REF1[1] (
 REF1[1] = i ∧
  MD_can(¬ ANY ATTRIB[3] ENTITY[2] ((other(ATTRIB[3]) ∧ is_way_ATTRIBUTE(ENTITY[2], ATTRIB[3])),
             ∃ EVENT[4] (think(EVENT[4], REF1[1]) ∧ of(EVENT[4]) = ENTITY[2]))))

# ::id 481_fiction_DICK-1952;AT137-4;NE
# ::snt He pressed the switch .
∃ REF1[1] EVENT[3] ENTITY[2] (switch(ENTITY[2]) ∧ REF1[1] = he ∧ past(EVENT[3]) ∧ pressed(EVENT[3], REF1[1], ENTITY[2]))

# ::id 482_fiction_DICK-1952;AT137-5;NE
# ::snt The bottom of the door glowed red .
∃ ATTRIB[3] EVENT[4] ENTITY[2] ENTITY[1] (
 door(ENTITY[2]) ∧
  is_bottom_of(ENTITY[1], ENTITY[2]) ∧ red(ATTRIB[3]) ∧ past(EVENT[4]) ∧ glowed(EVENT[4], ENTITY[1], ATTRIB[3]))

# ::id 483_fiction_DICK-1952;AT137-6;NE
# ::snt Presently it began to crumble .
∃ SITUATION[4] REF1[1] EVENT[3] EVENT[2] (
 REF1[1] = it ∧
  TMP_presently(SITUATION[4]) ∧
   past(EVENT[2]) ∧ is_FACT_THAT(SITUATION[4], began(EVENT[2], REF1[1], crumble(EVENT[3], REF1[1]))))

# ::id 484_fiction_DICK-1952;AT137-7;NE
# ::snt Dorle clicked the weapon off .
∃ EVENT[2] ENTITY[1] (weapon(ENTITY[1]) ∧ past(EVENT[2]) ∧ clicked_off(EVENT[2], ENTITY[Dorle], ENTITY[1]))

# ::id 485_fiction_DICK-1952;AT137-8;NE
# ::snt " I think we can get through .
∃ REF2[3] REF1[1] EVENT[2] (REF1[1] = i ∧ REF2[3] = we ∧ think(EVENT[2], REF1[1], MD_can(∃ EVENT[4] get_through(EVENT[4], REF2[3]))))

# ::id 486_fiction_DICK-1952;AT137-9;NE
# ::snt Let 's try . "
IMPERATIVE(∃ REF1[2] EVENT[3] EVENT[1] (REF1[2] = 's ∧ let(EVENT[1], try(EVENT[3], REF1[2]))))

# ::id 487_fiction_DICK-1952;AT138-1;NE
# ::snt The door came apart easily .
∃ EVENT[2] ENTITY[1] (
 door(ENTITY[1]) ∧
  ADV_apart(EVENT[2]) ∧ ADV_easily(EVENT[2]) ∧ past(EVENT[2]) ∧ came(EVENT[2], ENTITY[1]))

# ::id 488_fiction_DICK-1952;AT138-2;NE
# ::snt In a few minutes they had carried it away in pieces and stacked the pieces on the first step .
∃ ATTRIB[9] ENTITY[8] GROUP[7] (
 pieces(GROUP[7]) ∧
  first(ATTRIB[9]) ∧
   is_step_ATTRIBUTE(ENTITY[8], ATTRIB[9]) ∧
    FEW GROUP[1] (minutes(GROUP[1]),
     ∃ REF2[3] REF1[2] EVENT[5] EVENT[10] GROUP[4] (
      REF1[2] = they ∧
       REF2[3] = it ∧
        pieces(GROUP[4]) ∧
         DIR_away(EVENT[5]) ∧
          past(EVENT[5]) ∧
           past(EVENT[10]) ∧
            CONJ_and(had_carried(EVENT[5], REF1[2], REF2[3]) ∧ in(EVENT[5]) = GROUP[4] ∧
                  In(EVENT[5]) = GROUP[1],
             had_stacked(EVENT[10], REF1[2], GROUP[7]) ∧ on(EVENT[10]) = ENTITY[8] ∧
              In(EVENT[10]) = GROUP[1]))))

# ::id 489_fiction_DICK-1952;AT138-3;NE
# ::snt Then they went on , flashing the light ahead of them .
∃ SITUATION[6] REF2[3] REF1[1] EVENT[5] EVENT[4] ENTITY[2] (
 light(ENTITY[2]) ∧
  REF1[1] = they ∧
   REF2[3] = them ∧
    TMP_then(SITUATION[6]) ∧
     past(EVENT[5]) ∧
      is_FACT_THAT(SITUATION[6],
       CONJ_and(went_on(EVENT[5], REF1[1]),
        flashing(EVENT[4], REF1[1], ENTITY[2]) ∧ ahead_of(EVENT[4]) = REF2[3])))

# ::id 490_fiction_DICK-1952;AT139-1;NE
# ::snt They were in a vault .
∃ REF1[1] EVENT[3] ENTITY[2] (
 REF1[1] = they ∧
  vault(ENTITY[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], REF1[1]) ∧ in(EVENT[3]) = ENTITY[2])

# ::id 491_fiction_DICK-1952;AT139-2;NE
# ::snt Dust lay everywhere , on everything , inches thick .
∃ SITUATION[7] ENTITY[1] (
 Dust(ENTITY[1]) ∧
  LOC_everywhere(SITUATION[7]) ∧
   is_FACT_THAT(SITUATION[7],
    ∀ ENTITY[2] (thing(ENTITY[2]) →
     ∃ ATTRIB[3] EVENT[6] EVENT[5] GROUP[4] (
      inches(GROUP[4]) ∧
       is_thick_MSR(ATTRIB[3], GROUP[4]) ∧
        past(EVENT[6]) ∧
         CONJ_and(lay(EVENT[6], ENTITY[1]) ∧ on(EVENT[6]) = ENTITY[2],
          xxx(EVENT[5], ENTITY[1], ATTRIB[3]))))))

# ::id 492_fiction_DICK-1952;AT139-3;NE
# ::snt Wood crates lined the walls , huge boxes and crates , packages and containers .
∃ EVENT[9] GROUP[1] GROUP[7] GROUP[8] (
 walls(GROUP[8]) ∧
  Wood_crates(GROUP[7]) ∧
   ∃ GROUP[2] (
    ∃ ATTRIB[4] GROUP[3] (huge(ATTRIB[4]) ∧ is_boxes_ATTRIBUTE(GROUP[3], ATTRIB[4]) ∧ is_subset_of_or_equal_to(GROUP[3], GROUP[2])) ∧
     ∃ GROUP[5] (crates(GROUP[5]) ∧ is_subset_of_or_equal_to(GROUP[5], GROUP[2])) ∧ is_subset_of_or_equal_to(GROUP[2], GROUP[1])) ∧
    ∃ GROUP[6] (packages(GROUP[6]) ∧ is_subset_of_or_equal_to(GROUP[6], GROUP[1])) ∧
    is_-GROUP-_namely(GROUP[7], GROUP[1]) ∧ past(EVENT[9]) ∧ lined(EVENT[9], GROUP[7], GROUP[8]))

# ::id 493_fiction_DICK-1952;AT139-4;NE
# ::snt Tance looked around curiously , his eyes bright .
∃ ATTRIB[3] REF1[2] EVENT[4] GROUP[1] (
 REF1[2] = his ∧
  bright(ATTRIB[3]) ∧
   is_eyes_ATTRIBUTE(GROUP[1], ATTRIB[3]) ∧ is_eyes_POS(GROUP[1], REF1[2]) ∧
    DIR_around(EVENT[4]) ∧
     ADV_curiously(EVENT[4]) ∧ past(EVENT[4]) ∧ looked(EVENT[4], ENTITY[Tance]) ∧ ADV(EVENT[4]) = GROUP[1])

# ::id 494_fiction_DICK-1952;AT140-1;NE
# ::snt " What exactly are all these ? " he murmured .
∃ REF1[1] EVENT[2] (
 past(EVENT[2]) ∧
  REF1[1] = he ∧
   murmured(EVENT[2], REF1[1], QUEST(? ENTITY[3] (ADV_exactly(ENTITY[3]) ∧ ALL GROUP[4] ∃ EVENT[5] copula(EVENT[5], GROUP[4], ENTITY[3])))))

# ::id 495_fiction_DICK-1952;AT140-2;NE
# ::snt " Something valuable , I would think . "
SOME ATTRIB[2] ENTITY[1] ((valuable(ATTRIB[2]) ∧ is_thing_ATTRIBUTE(ENTITY[1], ATTRIB[2])),
 ∃ REF1[3] (REF1[3] = i ∧ MD_would(∃ EVENT[4] think(EVENT[4], REF1[3], ENTITY[1]))))

# ::id 496_fiction_DICK-1952;AT140-3;NE
# ::snt He picked up a round drum and opened it .
∃ REF2[5] ATTRIB[3] REF1[1] EVENT[4] EVENT[6] ENTITY[2] (
 REF1[1] = he ∧
  round(ATTRIB[3]) ∧
   is_drum_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
    REF2[5] = it ∧
     past(EVENT[4]) ∧
      past(EVENT[6]) ∧ CONJ_and(picked_up(EVENT[4], REF1[1], ENTITY[2]), opened(EVENT[6], REF1[1], REF2[5])))

# ::id 497_fiction_DICK-1952;AT140-4;NE
# ::snt A spool fell to the floor , unwinding a black ribbon .
∃ ATTRIB[4] EVENT[6] EVENT[5] ENTITY[3] ENTITY[1] ENTITY[2] (
 floor(ENTITY[2]) ∧
  spool(ENTITY[1]) ∧
   black(ATTRIB[4]) ∧
    is_ribbon_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
     past(EVENT[6]) ∧
      CONJ_and(fell(EVENT[6], ENTITY[1]) ∧ to(EVENT[6]) = ENTITY[2], unwinding(EVENT[5], ENTITY[1], ENTITY[3])))

# ::id 498_fiction_DICK-1952;AT140-5;NE
# ::snt He examined it , holding it up to the light .
∃ REF3[3] REF2[2] REF1[1] EVENT[6] EVENT[5] ENTITY[4] (
 light(ENTITY[4]) ∧
  REF1[1] = he ∧
   REF2[2] = it ∧
    REF3[3] = it ∧
     past(EVENT[6]) ∧
      CONJ_and(examined(EVENT[6], REF1[1], REF2[2]),
       holding_up(EVENT[5], REF2[2], REF3[3]) ∧ to(EVENT[5]) = ENTITY[4]))

# ::id 499_fiction_DICK-1952;AT141-1;NE
# ::snt " Look at this ! "
∃ ENTITY[1] IMPERATIVE(∃ EVENT[2] (look(EVENT[2]) ∧ at(EVENT[2]) = ENTITY[1]))

# ::id 500_fiction_DICK-1952;AT142-1;NE
# ::snt They came around him .
∃ REF2[2] REF1[1] EVENT[3] (
 REF1[1] = they ∧
  REF2[2] = him ∧ past(EVENT[3]) ∧ came(EVENT[3], REF1[1]) ∧ around(EVENT[3]) = REF2[2])

# ::id 501_fiction_DICK-1952;AT142-2;NE
# ::snt " Pictures , " Nasha said .
∃ EVENT[3] EVENT[1] GROUP[2] (
 Pictures(GROUP[2]) ∧
  past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Nasha], xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[2]))

# ::id 502_fiction_DICK-1952;AT142-3;NE
# ::snt " Tiny pictures . "
∃ ATTRIB[2] EVENT[3] GROUP[1] (tiny(ATTRIB[2]) ∧ is_pictures_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[1])

# ::id 503_fiction_DICK-1952;AT143-1;NE
# ::snt " Records of some kind . "
∃ EVENT[3] GROUP[1] (SOME ENTITY[2] (kind(ENTITY[2]), is_Records_of(GROUP[1], ENTITY[2])) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = GROUP[1])

# ::id 504_fiction_DICK-1952;AT143-2;NE
# ::snt Tance closed the spool up in the drum again .
∃ EVENT[3] ENTITY[2] ENTITY[1] (
 spool(ENTITY[1]) ∧
  drum(ENTITY[2]) ∧
   ADV_again(EVENT[3]) ∧
    past(EVENT[3]) ∧ closed_up(EVENT[3], ENTITY[Tance], ENTITY[1]) ∧ in(EVENT[3]) = ENTITY[2])

# ::id 505_fiction_DICK-1952;AT143-3;NE
# ::snt " Look , hundreds of drums . "
IMPERATIVE(∃ EVENT[3] GROUP[2] GROUP[1] (
      drums(GROUP[2]) ∧
       is_hundreds_of(GROUP[1], GROUP[2]) ∧ look(EVENT[3]) ∧ MSR(EVENT[3]) = GROUP[1]))

# ::id 506_fiction_DICK-1952;AT143-4;NE
# ::snt He flashed the light around .
∃ REF1[1] EVENT[3] ENTITY[2] (
 light(ENTITY[2]) ∧
  REF1[1] = he ∧ DIR_around(EVENT[3]) ∧ past(EVENT[3]) ∧ flashed(EVENT[3], REF1[1], ENTITY[2]))

# ::id 507_fiction_DICK-1952;AT143-5;NE
# ::snt " And those crates .
∃ EVENT[2] GROUP[1] (crates(GROUP[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = GROUP[1])

# ::id 508_fiction_DICK-1952;AT143-6;NE
# ::snt Let 's open one . "
IMPERATIVE(∃ REF1[2] EVENT[4] EVENT[1] ENTITY[3] (REF1[2] = 's ∧ CD_one(ENTITY[3]) ∧ let(EVENT[1], open(EVENT[4], REF1[2], ENTITY[3]))))

# ::id 509_fiction_DICK-1952;AT144-1;NE
# ::snt Dorle was already prying at the wood .
∃ EVENT[2] ENTITY[1] (
 wood(ENTITY[1]) ∧
  TMP_already(EVENT[2]) ∧ past(EVENT[2]) ∧ was_prying(EVENT[2], ENTITY[Dorle]) ∧ at(EVENT[2]) = ENTITY[1])

# ::id 510_fiction_DICK-1952;AT144-2;NE
# ::snt The wood had turned brittle and dry .
∃ ATTRIB[3] ATTRIB[2] EVENT[4] EVENT[4] ENTITY[1] (
 wood(ENTITY[1]) ∧
  brittle(ATTRIB[2]) ∧
   dry(ATTRIB[3]) ∧
    past(EVENT[4]) ∧
     past(EVENT[4]) ∧ CONJ_and(had_turned(EVENT[4], ENTITY[1], ATTRIB[2]), had_turned(EVENT[4], ENTITY[1], ATTRIB[3])))

# ::id 511_fiction_DICK-1952;AT144-3;NE
# ::snt He managed to pull a section away .
∃ REF1[1] EVENT[4] EVENT[2] ENTITY[3] (
 REF1[1] = he ∧
  section(ENTITY[3]) ∧
   DIR_away(EVENT[4]) ∧ past(EVENT[2]) ∧ managed(EVENT[2], REF1[1], pull(EVENT[4], REF1[1], ENTITY[3])))

# ::id 512_fiction_DICK-1952;AT145-1;NE
# ::snt It was a picture .
∃ REF1[1] EVENT[3] ENTITY[2] (REF1[1] = it ∧ picture(ENTITY[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], REF1[1], ENTITY[2]))

# ::id 513_fiction_DICK-1952;AT145-2;NE
# ::snt A boy in a blue garment , smiling pleasantly , staring ahead , young and handsome .
∃ ATTRIB[12] ATTRIB[11] ATTRIB[3] EVENT[5] EVENT[9] EVENT[13] EVENT[13] EVENT[14] ENTITY[8] ENTITY[2] ENTITY[1] (
 blue(ATTRIB[3]) ∧
  is_garment_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
   head(ENTITY[8]) ∧
    young(ATTRIB[11]) ∧
     handsome(ATTRIB[12]) ∧
      smiling(EVENT[5], ENTITY[1]) ∧
       staring(EVENT[9], ENTITY[1]) ∧ a(EVENT[9]) = ENTITY[8] ∧
        CONJ_and(xxx(EVENT[13], ENTITY[1], ATTRIB[11]), xxx(EVENT[13], ENTITY[1], ATTRIB[12])) ∧
         is_boy_in(ENTITY[1], ENTITY[2]) ∧
       ADV_pleasantly(EVENT[5]) ∧ xxx(EVENT[14]) ∧ LINK(EVENT[14]) = ENTITY[1])

# ::id 514_fiction_DICK-1952;AT145-3;NE
# ::snt He seemed almost alive , ready to move toward them in the light of the hand lamp .
∃ REF2[4] ATTRIB[3] ATTRIB[2] REF1[1] EVENT[8] EVENT[7] EVENT[8] ENTITY[6] ENTITY[5] (
 hand_lamp(ENTITY[6]) ∧
  is_light_of(ENTITY[5], ENTITY[6]) ∧
   REF1[1] = he ∧
    almost_alive(ATTRIB[2]) ∧
     REF2[4] = them ∧
      is_ready_to(ATTRIB[3],
       move(EVENT[7]) ∧ in(EVENT[7]) = ENTITY[5] ∧ toward(EVENT[7]) = REF2[4]) ∧
       past(EVENT[8]) ∧
        past(EVENT[8]) ∧ seemed(EVENT[8], REF1[1], ATTRIB[2]) ∧ seemed(EVENT[8], REF1[1], ATTRIB[3]))

# ::id 515_fiction_DICK-1952;AT145-4;NE
# ::snt It was one of them ,
∃ REF2[3] REF1[1] EVENT[4] ENTITY[2] (
 REF1[1] = it ∧
  REF2[3] = them ∧ is_one_of(ENTITY[2], REF2[3]) ∧ past(EVENT[4]) ∧ copula(EVENT[4], REF1[1], ENTITY[2]))

# ::id 516_fiction_DICK-1952;AT145-4;NE
# ::snt one of the ruined race , the race that had perished .
∃ ATTRIB[6] EVENT[7] ENTITY[1] EVENT[4] ENTITY[2] ENTITY[5] (
 ruined(ATTRIB[6]) ∧
  is_race_ATTRIBUTE(ENTITY[5], ATTRIB[6]) ∧
   had_perished(EVENT[4], ENTITY[2]) ∧ race(ENTITY[2]) ∧
    is_-ENTITY-_namely(ENTITY[5], ENTITY[2]) ∧
     past(EVENT[4]) ∧ is_one_of(ENTITY[1], ENTITY[5]) ∧ xxx(EVENT[7]) ∧ LINK(EVENT[7]) = ENTITY[1])

# ::id 517_fiction_DICK-1952;AT146-1;NE
# ::snt For a long time they stared at the picture .
∃ REF1[3] ATTRIB[2] EVENT[5] ENTITY[1] ENTITY[4] (
 picture(ENTITY[4]) ∧
  long(ATTRIB[2]) ∧
   is_time_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
    REF1[3] = they ∧
     past(EVENT[5]) ∧
      stared(EVENT[5], REF1[3]) ∧ at(EVENT[5]) = ENTITY[4] ∧ For(EVENT[5]) = ENTITY[1])

# ::id 518_fiction_DICK-1952;AT146-2;NE
# ::snt At last Dorle replaced the board .
∃ ATTRIB[1] EVENT[3] ENTITY[2] (
 board(ENTITY[2]) ∧
  ADV_last(ATTRIB[1]) ∧
   past(EVENT[3]) ∧ replaced(EVENT[3], ENTITY[Dorle], ENTITY[2]) ∧ At(EVENT[3]) = ATTRIB[1])

# ::id 519_fiction_DICK-1952;AT147-1;NE
# ::snt " All these other crates , " Nasha said .
∃ ATTRIB[3] EVENT[1] (
 other(ATTRIB[3]) ∧
  past(EVENT[1]) ∧
   said(EVENT[1], ENTITY[Nasha],
    ALL GROUP[2] (is_crates_ATTRIBUTE(GROUP[2], ATTRIB[3]), ∃ EVENT[4] (xxx(EVENT[4]) ∧ LINK(EVENT[4]) = GROUP[2]))))

# ::id 520_fiction_DICK-1952;AT147-2;NE
# ::snt " More pictures .
MORE GROUP[1] (pictures(GROUP[1]), ∃ EVENT[2] (xxx(EVENT[2]) ∧ LINK(EVENT[2]) = GROUP[1]))

# ::id 521_fiction_DICK-1952;AT147-3;NE
# ::snt And these drums .
∃ EVENT[2] GROUP[1] (drums(GROUP[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = GROUP[1])

# ::id 522_fiction_DICK-1952;AT147-4;NE
# ::snt What are in the boxes ? "
∃ GROUP[2] (boxes(GROUP[2]) ∧ QUEST(∃ EVENT[3] ? ENTITY[1] (copula(EVENT[3], ENTITY[1]) ∧ in(EVENT[3]) = GROUP[2])))

# ::id 523_fiction_DICK-1952;AT148-1;NE
# ::snt " This is their treasure , " Tance said , almost to himself .
∃ REF2[5] REF1[1] EVENT[6] EVENT[2] ENTITY[4] ENTITY[3] (
 REF1[1] = himself ∧
  REF2[5] = their ∧
   is_treasure_POS(ENTITY[4], REF2[5]) ∧
    past(EVENT[2]) ∧
     said(EVENT[2], ENTITY[Tance], copula(EVENT[6], ENTITY[3], ENTITY[4])) ∧ almost_to(EVENT[2]) = REF1[1])

# ::id 524_fiction_DICK-1952;AT148-2;NE
# ::snt " Here are their pictures , their records .
∃ REF2[2] REF1[4] EVENT[5] ENTITY[1] GROUP[3] (
 REF1[4] = their ∧
  is_pictures_POS(GROUP[3], REF1[4]) ∧
   REF2[2] = their ∧
    is_records_POS(ENTITY[1], REF2[2]) ∧
     is_-GROUP-_namely(GROUP[3], ENTITY[1]) ∧ LOC_here(EVENT[5]) ∧ copula(EVENT[5], GROUP[3]))

# ::id 525_fiction_DICK-1952;AT148-3;NE
# ::snt Probably all their literature is here , their stories , their myths , their ideas about the universe . "
∃ SITUATION[13] ENTITY[8] (
 universe(ENTITY[8]) ∧
  ADV_probably(SITUATION[13]) ∧
   is_FACT_THAT(SITUATION[13],
    ALL REF1[10] group[9] ((REF1[10] = their ∧ is_literature_POS(group[9], REF1[10])), ∃ EVENT[11] GROUP[1] (
      ∃ REF2[3] GROUP[2] (REF2[3] = their ∧ is_stories_POS(GROUP[2], REF2[3]) ∧ is_subset_of_or_equal_to(GROUP[2], GROUP[1])) ∧
       ∃ REF3[5] GROUP[4] (REF3[5] = their ∧ is_myths_POS(GROUP[4], REF3[5]) ∧ is_subset_of_or_equal_to(GROUP[4], GROUP[1])) ∧
       ∃ REF4[7] GROUP[6] (
        REF4[7] = their ∧
         is_ideas_POS(GROUP[6], REF4[7]) ∧ is_ideas_about(GROUP[6], ENTITY[8]) ∧ is_subset_of_or_equal_to(GROUP[6], GROUP[1])) ∧
       is_-group-_namely(group[9], GROUP[1]) ∧ LOC_here(EVENT[11]) ∧ copula(EVENT[11], group[9])))))

# ::id 526_fiction_DICK-1952;AT149-1;NE
# ::snt " And their history , " Nasha said .
∃ REF1[3] EVENT[4] EVENT[1] ENTITY[2] (
 REF1[3] = their ∧
  is_history_POS(ENTITY[2], REF1[3]) ∧
   past(EVENT[1]) ∧ said(EVENT[1], ENTITY[Nasha], xxx(EVENT[4]) ∧ LINK(EVENT[4]) = ENTITY[2]))

# ::id 527_fiction_DICK-1952;AT149-2;NE
# ::snt " We 'll be able to trace their development and find out what it was that made them become what they were . "
∃ REF1[1] (
 REF1[1] = we ∧
  MD'll(∃ REF4[14] REF3[11] REF2[4] ATTRIB[2] EVENT[5] EVENT[15] EVENT[16] EVENT[10] EVENT[17] EVENT[18] EVENT[19] ENTITY[3] ENTITY[12] ENTITY[8] ENTITY[6] (
        REF2[4] = their ∧
         is_development_POS(ENTITY[3], REF2[4]) ∧
          REF3[11] = them ∧
           REF4[14] = they ∧
            copula(EVENT[15], REF4[14], ENTITY[12]) ∧
             made(EVENT[10], ENTITY[8], become(EVENT[16], REF3[11], ENTITY[12])) ∧
              copula(EVENT[17], ENTITY[8]) ∧ HIGH(EVENT[17]) = ENTITY[6] ∧
               is_able_to(ATTRIB[2],
                CONJ_and(trace(EVENT[5], _, ENTITY[3]), find_out(EVENT[18], _, ENTITY[6]))) ∧
                is_before(EVENT[15], EVENT[10]) ∧
                 past(EVENT[10]) ∧ past(EVENT[17]) ∧ copula(EVENT[19], REF1[1], ATTRIB[2]))))

# ::id 528_fiction_DICK-1952;AT150-1;NE
# ::snt Dorle was wandering around the vault .
∃ EVENT[2] ENTITY[1] (vault(ENTITY[1]) ∧ past(EVENT[2]) ∧ was_wandering(EVENT[2], ENTITY[Dorle]) ∧ around(EVENT[2]) = ENTITY[1])

# ::id 529_fiction_DICK-1952;AT150-2;NE
# ::snt " Odd , " he murmured . " Even at the end , even after they had begun to fight they still knew , someplace down inside them , that their real treasure was this , their books and pictures , their myths .
∃ REF1[1] REF7[22] REF6[17] EVENT[2] GROUP[19] GROUP[20] GROUP[18] ENTITY[16] GROUP[21] GROUP[15] ENTITY[23] ENTITY[4] (
 end(ENTITY[4]) ∧
  REF6[17] = their ∧
   books(GROUP[19]) ∧
    pictures(GROUP[20]) ∧
     is_subset_of_or_equal_to(GROUP[19], GROUP[18]) ∧ is_subset_of_or_equal_to(GROUP[20], GROUP[18]) ∧
      is_equals(ENTITY[16], GROUP[18]) ∧ is_POS(ENTITY[16], REF6[17]) ∧
       REF7[22] = their ∧
        is_myths_POS(GROUP[21], REF7[22]) ∧
         is_element_of(ENTITY[16], GROUP[15]) ∧ is_subset_of_or_equal_to(GROUP[21], GROUP[15]) ∧
          is_-ENTITY-_namely(ENTITY[23], GROUP[15]) ∧
           REF1[1] = he ∧
            past(EVENT[2]) ∧
             murmured(EVENT[2], REF1[1],
              EVEN ENTITY[3] (is_of(ENTITY[3], ENTITY[4]),
               ∃ SITUATION[25] REF3[8] REF2[5] EVENT[7] EVENT[6] (
                REF2[5] = they ∧
                 REF3[8] = they ∧
                  is_before(EVENT[6], EVENT[2]) ∧
                   TMP_still(SITUATION[25]) ∧
                    CRD_even_after(had_begun(EVENT[6], REF2[5], fight(EVENT[7], REF2[5])),
                     is_FACT_THAT(SITUATION[25],
                      SOME REF4[10] ENTITY[9] ((REF4[10] = them ∧ is_place_down_inside(ENTITY[9], REF4[10])), ∃ ATTRIB[14] REF5[13] EVENT[24] EVENT[11] ENTITY[12] (
                        REF5[13] = their ∧
                         real(ATTRIB[14]) ∧
                          is_treasure_POS(ENTITY[12], REF5[13]) ∧ is_treasure_ATTRIBUTE(ENTITY[12], ATTRIB[14]) ∧
                           is_before(EVENT[24], EVENT[11]) ∧
                            is_before(EVENT[11], EVENT[2]) ∧
                             knew(EVENT[11], REF3[8], copula(EVENT[24], ENTITY[12], ENTITY[23])) ∧
                              ADV(EVENT[11]) = ENTITY[9] ∧
                              at(EVENT[11]) = ENTITY[3]))))))))

# ::id 530_fiction_DICK-1952;AT150-3;NE
# ::snt Even after their big cities and buildings and industries were destroyed they probably hoped to come back and find this .
∃ SITUATION[14] REF2[8] EVENT[7] EVENT[10] EVENT[13] EVENT[9] GROUP[1] ENTITY[12] (
 ∃ ATTRIB[4] REF1[3] GROUP[2] (
  REF1[3] = their ∧
   big(ATTRIB[4]) ∧
    is_cities_ATTRIBUTE(GROUP[2], ATTRIB[4]) ∧ is_cities_POS(GROUP[2], REF1[3]) ∧ is_subset_of_or_equal_to(GROUP[2], GROUP[1])) ∧
  ∃ GROUP[5] (buildings(GROUP[5]) ∧ is_subset_of_or_equal_to(GROUP[5], GROUP[1])) ∧
  ∃ GROUP[6] (industries(GROUP[6]) ∧ is_subset_of_or_equal_to(GROUP[6], GROUP[1])) ∧
  REF2[8] = they ∧
   past(EVENT[7]) ∧
    ADV_probably(SITUATION[14]) ∧
     DIR_back(EVENT[10]) ∧
      past(EVENT[9]) ∧
       CRD_Even_after(destroyed(EVENT[7], _, GROUP[1]),
        is_FACT_THAT(SITUATION[14],
         hoped(EVENT[9], REF2[8],
          CONJ_and(come(EVENT[10], REF2[8]), find(EVENT[13], REF2[8], ENTITY[12]))))))

# ::id 531_fiction_DICK-1952;AT150-4;NE
# ::snt After everything else was gone . "
∀ ENTITY[1] ((ADV_else(ENTITY[1]) ∧ thing(ENTITY[1])) →
 ∃ ATTRIB[2] EVENT[3] (gone(ATTRIB[2]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], ENTITY[1], ATTRIB[2])))

# ::id 532_fiction_DICK-1952;AT151-1;NE
# ::snt " When we get back home we can agitate for a mission to come here , " Tance said .
∃ REF2[6] REF1[2] EVENT[4] EVENT[1] ENTITY[3] (
 REF1[2] = we ∧
  home(ENTITY[3]) ∧
   REF2[6] = we ∧
    is_DIR_back_of(EVENT[4], ENTITY[3]) ∧
     past(EVENT[1]) ∧
      said(EVENT[1], ENTITY[Tance],
       CRD_When(get(EVENT[4], REF1[2]),
        MD_can(∃ EVENT[9] EVENT[7] ENTITY[8] (
              mission(ENTITY[8]) ∧
               LOC_here(EVENT[9]) ∧ agitate(EVENT[7], REF2[6], come(EVENT[9], ENTITY[8])))))))

# ::id 533_fiction_DICK-1952;AT151-2;NE
# ::snt " All this can be loaded up and taken back .
ALL ENTITY[1] MD_can(∃ EVENT[2] EVENT[3] (
      DIR_back(EVENT[3]) ∧ CONJ_and(loaded_up(EVENT[2], _, ENTITY[1]), taken(EVENT[3], _, ENTITY[1]))))

# ::id 534_fiction_DICK-1952;AT151-3;NE
# ::snt We 'll be leaving about -- "
∃ REF1[1] (REF1[1] = we ∧ MD'll(∃ EVENT[2] be_leaving_about(EVENT[2], REF1[1])))

# ::id 535_fiction_DICK-1952;AT152-1;NE
# ::snt He stopped .
∃ REF1[1] EVENT[2] (REF1[1] = he ∧ past(EVENT[2]) ∧ stopped(EVENT[2], REF1[1]))

# ::id 536_fiction_DICK-1952;AT153-1;NE
# ::snt " Yes , " Dorle said dryly . We 'll be leaving about three day-periods from now .
∃ REF1[2] EVENT[1] (
 REF1[2] = we ∧
  ADV_dryly(EVENT[1]) ∧
   past(EVENT[1]) ∧
    said(EVENT[1], ENTITY[Dorle],
     MD'll(∃ EVENT[5] ENTITY[4] GROUP[3] (
           (CD_about_three(GROUP[3]), day-periods(GROUP[3])) ∧
            ADV_now(ENTITY[4]) ∧
             be_leaving(EVENT[5], REF1[2], GROUP[3]) ∧ from(EVENT[5]) = ENTITY[4]))))

# ::id 537_fiction_DICK-1952;AT153-2;NE
# ::snt We 'll fix the ship , then take off .
∃ REF1[1] ENTITY[2] (
 ship(ENTITY[2]) ∧
  REF1[1] = we ∧
   MD'll(∃ EVENT[3] EVENT[4] (TMP_then(EVENT[4]) ∧ fix(EVENT[3], REF1[1], ENTITY[2]) ∧ take_off(EVENT[4], REF1[1]))))

# ::id 538_fiction_DICK-1952;AT153-3;NE
# ::snt Soon we 'll be home ,
∃ SITUATION[4] REF1[1] (
 REF1[1] = we ∧
  TMP_soon(SITUATION[4]) ∧
   is_FACT_THAT(SITUATION[4], MD'll(∃ EVENT[3] ENTITY[2] (home(ENTITY[2]) ∧ copula(EVENT[3], REF1[1], ENTITY[2])))))

# ::id 539_fiction_DICK-1952;AT153-4;NE
# ::snt that is , if nothing happens .
∃ ENTITY[1] CND_if(¬ ∃ EVENT[3] ENTITY[2] (thing(ENTITY[2]) ∧ happens(EVENT[3], ENTITY[2])), ∃ EVENT[4] copula(EVENT[4], ENTITY[1]))

# ::id 540_fiction_DICK-1952;AT153-5;NE
# ::snt Like being shot down by that -- "
∃ SITUATION[1] EVENT[3] EVENT[4] ENTITY[2] (
 is_FACT_THAT(SITUATION[1], being_shot_down(EVENT[3]) ∧ by(EVENT[3]) = ENTITY[2]) ∧
  xxx(EVENT[4]) ∧ Like(EVENT[4]) = SITUATION[1])

# ::id 541_fiction_DICK-1952;AT154-1;NE
# ::snt " Oh , stop it ! " Nasha said impatiently .
∃ EVENT[1] (
 ADV_impatiently(EVENT[1]) ∧
  past(EVENT[1]) ∧
   said(EVENT[1], ENTITY[Nasha], IMPERATIVE(∃ REF1[2] EVENT[3] (REF1[2] = it ∧ stop(EVENT[3], _, REF1[2])))))

# ::id 542_fiction_DICK-1952;AT154-2;NE
# ::snt " Leave him alone .
IMPERATIVE(∃ ATTRIB[2] REF1[1] EVENT[4] EVENT[3] (
      REF1[1] = him ∧
       alone(ATTRIB[2]) ∧
        CONJ_and(leave(EVENT[4], _, REF1[1]), xxx(EVENT[3], REF1[1], ATTRIB[2]))))

# ::id 543_fiction_DICK-1952;AT154-3;NE
# ::snt He 's right :
∃ ATTRIB[2] REF1[1] EVENT[3] (REF1[1] = he ∧ right(ATTRIB[2]) ∧ copula(EVENT[3], REF1[1], ATTRIB[2]))

# ::id 544_fiction_DICK-1952;AT154-4;NE
# ::snt all this must be taken back home , sooner or later .
ALL ENTITY[1] MD_must(∃ EVENT[3] ENTITY[2] (
      home(ENTITY[2]) ∧
       is_DIR_back_of(EVENT[3], ENTITY[2]) ∧
        CONJ_or(TMP_sooner(EVENT[3]), TMP_later(EVENT[3])) ∧ be_taken(EVENT[3], ENTITY[1])))

# ::id 545_fiction_DICK-1952;AT154-5;NE
# ::snt We 'll have to solve the problem of the gun .
∃ REF1[1] ENTITY[4] ENTITY[3] (
 gun(ENTITY[4]) ∧
  is_problem_of(ENTITY[3], ENTITY[4]) ∧
   REF1[1] = we ∧ MD'll(∃ EVENT[5] EVENT[2] have(EVENT[2], REF1[1], solve(EVENT[5], REF1[1], ENTITY[3]))))

# ::id 546_fiction_DICK-1952;AT154-6;NE
# ::snt We have no choice . "
∃ REF1[1] (REF1[1] = we ∧ ¬ ∃ EVENT[3] ENTITY[2] (choice(ENTITY[2]) ∧ have(EVENT[3], REF1[1], ENTITY[2])))

# ::id 547_fiction_DICK-1952;AT155-1;NE
# ::snt Dorle nodded .
∃ EVENT[1] (past(EVENT[1]) ∧ nodded(EVENT[1], ENTITY[Dorle]))

# ::id 548_fiction_DICK-1952;AT155-2;NE
# ::snt " What 's your solution , then ?
QUEST(∃ REF1[3] EVENT[4] ENTITY[2] ? ENTITY[1] (
      REF1[3] = your ∧
       is_solution_POS(ENTITY[2], REF1[3]) ∧ ADV_then(EVENT[4]) ∧ copula(EVENT[4], ENTITY[1], ENTITY[2])))

# ::id 549_fiction_DICK-1952;AT155-3;NE
# ::snt As soon as we leave the ground we 'll be shot down . "
∃ SITUATION[9] REF2[7] REF1[3] EVENT[5] TIME[1] ENTITY[4] (
 ground(ENTITY[4]) ∧
  REF1[3] = we ∧
   leave(EVENT[5], REF1[3], ENTITY[4]) ∧
    REF2[7] = we ∧
     is_TMP(EVENT[5], TIME[1]) ∧
      is_TMP_as_soon_as(SITUATION[9], TIME[1]) ∧ is_FACT_THAT(SITUATION[9], MD'll(∃ EVENT[8] be_shot_down(EVENT[8], REF2[7]))))

# ::id 550_fiction_DICK-1952;AT155-4;NE
# ::snt His face twisted bitterly .
∃ REF1[2] EVENT[3] ENTITY[1] (REF1[2] = his ∧ is_face_POS(ENTITY[1], REF1[2]) ∧ ADV_bitterly(EVENT[3]) ∧ twisted(EVENT[3], ENTITY[1]))

# ::id 551_fiction_DICK-1952;AT155-5;NE
# ::snt " They 've guarded their treasure too well .
∃ REF2[3] REF1[1] EVENT[4] ENTITY[2] (
 REF1[1] = they ∧
  REF2[3] = their ∧
   is_treasure_POS(ENTITY[2], REF2[3]) ∧
    ADV_too_well(EVENT[4]) ∧ past(EVENT[4]) ∧ 've_guarded(EVENT[4], REF1[1], ENTITY[2]))

# ::id 552_fiction_DICK-1952;AT155-6;NE
# ::snt Instead of being preserved it will lie here until it rots .
∃ SITUATION[2] REF1[1] EVENT[3] (
 REF1[1] = it ∧
  is_FACT_THAT(SITUATION[2], being_preserved(EVENT[3], _, REF1[1])) ∧
   MD_will(∃ SITUATION[8] REF2[5] SITUATION[4] EVENT[6] EVENT[7] (
         REF2[5] = it ∧
          is_FACT_THAT(SITUATION[4], rots(EVENT[6], REF2[5])) ∧
           LOC_here(SITUATION[8]) ∧
            is_FACT_THAT(SITUATION[8],
             lie(EVENT[7], REF1[1]) ∧ until(EVENT[7]) = SITUATION[4] ∧
              Instead_of(EVENT[7]) = SITUATION[2]))))

# ::id 553_fiction_DICK-1952;AT155-7;NE
# ::snt It serves them right . "
∃ ATTRIB[4] REF2[3] REF1[1] EVENT[5] EVENT[2] (
 REF1[1] = it ∧
  REF2[3] = them ∧ right(ATTRIB[4]) ∧ serves(EVENT[2], REF1[1], xxx(EVENT[5], REF2[3], ATTRIB[4])))

# ::id 554_fiction_DICK-1952;AT156-1;NE
# ::snt " How ? "
QUEST(∃ ENTITY[2] ? ENTITY[1] (is_ADV(ENTITY[2], ENTITY[1]) ∧ xxx(ENTITY[2])))

# ::id 555_fiction_DICK-1952;AT157-1;NE
# ::snt " Do n't you see ?
¬ ∃ REF1[1] EVENT[2] (REF1[1] = you ∧ do_see(EVENT[2], REF1[1]))

# ::id 556_fiction_DICK-1952;AT157-2;NE
# ::snt This was the only way they knew , building a gun and setting it up to shoot anything that came along .
∃ REF1[5] EVENT[6] ENTITY[3] ENTITY[1] (
 REF1[5] = they ∧
  knew(EVENT[6], REF1[5], ENTITY[3]) ∧ way(ENTITY[3]) ∧
   past(EVENT[6]) ∧
    ONLY ENTITY[2] (is_of(ENTITY[2], ENTITY[3]),
     ∃ PRP[10] REF2[9] EVENT[17] EVENT[8] EVENT[16] ENTITY[7] (
      gun(ENTITY[7]) ∧
       REF2[9] = it ∧
        is_FACT_THAT(PRP[10],
         ANY EVENT[13] ENTITY[11] (
          (came(EVENT[13], ENTITY[11]) ∧ thing(ENTITY[11]) ∧ ADV_along(EVENT[13]) ∧ past(EVENT[13])),
          ∃ EVENT[15] shoot(EVENT[15], REF2[9], ENTITY[11]))) ∧
         past(EVENT[17]) ∧
          CONJ_and(copula(EVENT[17], ENTITY[1], ENTITY[2]),
           CONJ_and(building(EVENT[8], ENTITY[2], ENTITY[7]),
            setting_up(EVENT[16], ENTITY[2], REF2[9]) ∧ PRP(EVENT[16]) = PRP[10])))))

# ::id 557_fiction_DICK-1952;AT157-3;NE
# ::snt They were so certain that everything was hostile , the enemy , coming to take their possessions away from them .
∃ REF3[10] REF2[9] PRP[7] ATTRIB[2] REF1[1] EVENT[14] EVENT[11] EVENT[13] GROUP[8] ENTITY[6] (
 enemy(ENTITY[6]) ∧
  REF1[1] = they ∧
   is_so_certain_THAT(ATTRIB[2],
    ∀ ENTITY[3] (thing(ENTITY[3]) →
     ∃ ATTRIB[4] EVENT[5] (hostile(ATTRIB[4]) ∧ past(EVENT[5]) ∧ copula(EVENT[5], ENTITY[3], ATTRIB[4])))) ∧
    REF2[9] = their ∧
     is_possessions_POS(GROUP[8], REF2[9]) ∧
      REF3[10] = them ∧
       is_FACT_THAT(PRP[7], take(EVENT[11], ENTITY[6], GROUP[8]) ∧ from(EVENT[11]) = REF3[10]) ∧
        past(EVENT[14]) ∧
         DIR_away(EVENT[11]) ∧
          CONJ_and(copula(EVENT[14], REF1[1], ATTRIB[2]),
           coming(EVENT[13], ENTITY[6]) ∧ PRP(EVENT[13]) = PRP[7]))

# ::id 558_fiction_DICK-1952;AT157-4;NE
# ::snt Well , they can keep them . "
∃ SITUATION[4] REF1[1] (
 REF1[1] = they ∧
  ADV_well(SITUATION[4]) ∧
   is_FACT_THAT(SITUATION[4], MD_can(∃ REF2[2] EVENT[3] (REF2[2] = them ∧ keep(EVENT[3], REF1[1], REF2[2])))))

# ::id 559_fiction_DICK-1952;AT158-1;NE
# ::snt Nasha was deep in thought , her mind far away .
∃ ATTRIB[6] REF1[4] ATTRIB[1] EVENT[7] ENTITY[2] DEGREE[5] ENTITY[3] (
 thought(ENTITY[2]) ∧
  is_deep_in(ATTRIB[1], ENTITY[2]) ∧
   REF1[4] = her ∧
    far(ATTRIB[6]) ∧
     is_ATTRIBUTE(DEGREE[5], ATTRIB[6]) ∧
      is_DIR_away_MSR(ENTITY[3], DEGREE[5]) ∧ is_mind_POS(ENTITY[3], REF1[4]) ∧
       past(EVENT[7]) ∧
        copula(EVENT[7], ENTITY[Nasha]) ∧ ADV(EVENT[7]) = ENTITY[3] ∧ ATTRIBUTE(EVENT[7]) = ATTRIB[1])

# ::id 560_fiction_DICK-1952;AT158-2;NE
# ::snt Suddenly she gasped .
∃ REF1[1] EVENT[2] (REF1[1] = she ∧ ADV_suddenly(EVENT[2]) ∧ past(EVENT[2]) ∧ gasped(EVENT[2], REF1[1]))

# ::id 561_fiction_DICK-1952;AT158-3;NE
# ::snt " Dorle , " she said . What 's the matter with us ?
∃ REF1[1] REF2[5] EVENT[2] ENTITY[4] (
 REF2[5] = us ∧
  is_matter_with(ENTITY[4], REF2[5]) ∧
   REF1[1] = she ∧
    past(EVENT[2]) ∧ said(EVENT[2], REF1[1], QUEST(∃ EVENT[6] ? ENTITY[3] copula(EVENT[6], ENTITY[4], ENTITY[3]))))

# ::id 562_fiction_DICK-1952;AT158-4;NE
# ::snt We have no problem .
∃ REF1[1] (REF1[1] = we ∧ ¬ ∃ EVENT[3] ENTITY[2] (problem(ENTITY[2]) ∧ have(EVENT[3], REF1[1], ENTITY[2])))

# ::id 563_fiction_DICK-1952;AT158-5;NE
# ::snt The gun is no menace at all . "
∃ ENTITY[1] (gun(ENTITY[1]) ∧ ¬ ∃ EVENT[4] ENTITY[2] (ALL ENTITY[3] is_menace_at(ENTITY[2], ENTITY[3]) ∧ copula(EVENT[4], ENTITY[1], ENTITY[2])))

# ::id 564_fiction_DICK-1952;AT159-1;NE
# ::snt The two men stared at her .
∃ REF1[2] EVENT[3] GROUP[1] (
 (CD_two(GROUP[1]), men(GROUP[1])) ∧
  REF1[2] = her ∧ past(EVENT[3]) ∧ stared(EVENT[3], GROUP[1]) ∧ at(EVENT[3]) = REF1[2])

# ::id 565_fiction_DICK-1952;AT160-1;NE
# ::snt " No menace ? " Dorle said .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  said(EVENT[1], ENTITY[Dorle],
   ¬ ∃ EVENT[3] ENTITY[2] (menace(ENTITY[2]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[2])))

# ::id 566_fiction_DICK-1952;AT160-2;NE
# ::snt " It 's already shot us down once .
∃ REF2[2] REF1[1] EVENT[3] (
 REF1[1] = it ∧
  REF2[2] = us ∧ TMP_already(EVENT[3]) ∧ TMP_once(EVENT[3]) ∧ 's_shot_down(EVENT[3], REF1[1], REF2[2]))

# ::id 567_fiction_DICK-1952;AT160-3;NE
# ::snt And as soon as we take off again -- "
∃ SITUATION[8] REF1[3] EVENT[4] EVENT[7] TIME[1] (
 REF1[3] = we ∧
  take_off(EVENT[4], REF1[3]) ∧
   is_TMP(EVENT[4], TIME[1]) ∧
    ADV_again(EVENT[4]) ∧ is_TMP_as_soon_as(SITUATION[8], TIME[1]) ∧ is_FACT_THAT(SITUATION[8], xxx(EVENT[7])))

# ::id 568_fiction_DICK-1952;AT161-1;NE
# ::snt " Do n't you see ? "
QUEST(¬ ∃ REF1[1] EVENT[2] (REF1[1] = you ∧ do_see(EVENT[2], REF1[1])))

# ::id 569_fiction_DICK-1952;AT161-2;NE
# ::snt Nasha began to laugh .
∃ EVENT[2] EVENT[1] (past(EVENT[1]) ∧ began(EVENT[1], ENTITY[Nasha], laugh(EVENT[2], ENTITY[Nasha])))

# ::id 570_fiction_DICK-1952;AT161-3;NE
# ::snt " The poor foolish gun , it 's completely harmless .
∃ ATTRIB[5] REF1[4] ATTRIB[3] ATTRIB[2] EVENT[6] ENTITY[1] (
 poor(ATTRIB[2]) ∧
  foolish(ATTRIB[3]) ∧
   is_gun_ATTRIBUTE(ENTITY[1], ATTRIB[3]) ∧ is_gun_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
    REF1[4] = it ∧
     completely_harmless(ATTRIB[5]) ∧ copula(EVENT[6], REF1[4], ATTRIB[5]) ∧ VOC(EVENT[6]) = ENTITY[1])

# ::id 571_fiction_DICK-1952;AT161-4;NE
# ::snt Even I could deal with it alone . "
∃ REF1[2] (
 REF1[2] = i ∧
  EVEN REF1[1] (is_of(REF1[1], REF1[2]),
   MD_could(∃ ATTRIB[4] REF2[3] EVENT[6] EVENT[5] (
         REF2[3] = it ∧
          alone(ATTRIB[4]) ∧
           CONJ_and(deal(EVENT[6], REF1[1]) ∧ with(EVENT[6]) = REF2[3],
            xxx(EVENT[5], REF1[1], ATTRIB[4]))))))

# ::id 572_fiction_DICK-1952;AT162-1;NE
# ::snt " You ? "
∃ REF1[1] EVENT[2] (REF1[1] = you ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = REF1[1])

# ::id 573_fiction_DICK-1952;AT163-1;NE
# ::snt Her eyes were flashing .
∃ REF1[2] EVENT[3] GROUP[1] (REF1[2] = her ∧ is_eyes_POS(GROUP[1], REF1[2]) ∧ past(EVENT[3]) ∧ were_flashing(EVENT[3], GROUP[1]))

# ::id 574_fiction_DICK-1952;AT163-2;NE
# ::snt " With a crowbar .
∃ EVENT[2] ENTITY[1] (crowbar(ENTITY[1]) ∧ xxx(EVENT[2]) ∧ With(EVENT[2]) = ENTITY[1])

# ::id 575_fiction_DICK-1952;AT163-3;NE
# ::snt With a hammer or a stick of wood .
∃ EVENT[5] GROUP[1] (
 CONJ_or(∃ ENTITY[2] (hammer(ENTITY[2]) ∧ is_element_of(ENTITY[2], GROUP[1])),
  ∃ ENTITY[4] ENTITY[3] (wood(ENTITY[4]) ∧ is_stick_of(ENTITY[3], ENTITY[4]) ∧ is_element_of(ENTITY[3], GROUP[1]))) ∧
  xxx(EVENT[5]) ∧ With(EVENT[5]) = GROUP[1])

# ::id 576_fiction_DICK-1952;AT163-4;NE
# ::snt Let 's go back to the ship and load up .
∃ ENTITY[3] (
 ship(ENTITY[3]) ∧
  IMPERATIVE(∃ REF1[2] EVENT[4] EVENT[6] EVENT[1] (
        REF1[2] = 's ∧
         is_DIR_back_to(EVENT[4], ENTITY[3]) ∧
          let(EVENT[1], CONJ_and(go(EVENT[4], REF1[2]), load_up(EVENT[6], REF1[2]))))))

# ::id 577_fiction_DICK-1952;AT163-5;NE
# ::snt Of course we 're at its mercy in the air :
∃ REF2[4] REF1[2] EVENT[6] ENTITY[3] ENTITY[1] ENTITY[5] (
 air(ENTITY[5]) ∧
  course(ENTITY[1]) ∧
   REF1[2] = we ∧
    REF2[4] = its ∧
     is_mercy_POS(ENTITY[3], REF2[4]) ∧
      copula(EVENT[6], REF1[2]) ∧ in(EVENT[6]) = ENTITY[5] ∧ at(EVENT[6]) = ENTITY[3] ∧
       Of(EVENT[6]) = ENTITY[1])

# ::id 578_fiction_DICK-1952;AT163-6;NE
# ::snt that 's the way it was made .
∃ REF1[3] EVENT[5] EVENT[4] ENTITY[2] ENTITY[1] (
 REF1[3] = it ∧
  is_way_THAT(ENTITY[2], made(EVENT[4], _, REF1[3])) ∧
   past(EVENT[4]) ∧ copula(EVENT[5], ENTITY[1], ENTITY[2]))

# ::id 579_fiction_DICK-1952;AT163-7;NE
# ::snt It can fire into the sky , shoot down anything that flies .
∃ REF1[1] ENTITY[2] (
 sky(ENTITY[2]) ∧
  REF1[1] = it ∧
   MD_can(∃ EVENT[3] (
         fire(EVENT[3], REF1[1]) ∧ into(EVENT[3]) = ENTITY[2] ∧
          ANY EVENT[6] ENTITY[4] (flies(EVENT[6], ENTITY[4]) ∧ thing(ENTITY[4]), ∃ EVENT[7] shoot_down(EVENT[7], REF1[1], ENTITY[4])))))

# ::id 580_fiction_DICK-1952;AT163-8;NE
# ::snt But that 's all !
∃ ENTITY[1] ALL ENTITY[2] ∃ EVENT[3] copula(EVENT[3], ENTITY[1], ENTITY[2])

# ::id 581_fiction_DICK-1952;AT163-9;NE
# ::snt Against something on the ground it has no defenses .
∃ ENTITY[2] (
 ground(ENTITY[2]) ∧
  SOME ENTITY[1] (is_thing_on(ENTITY[1], ENTITY[2]),
   ∃ REF1[3] (
    REF1[3] = it ∧
     ¬ ∃ EVENT[5] GROUP[4] (
           defenses(GROUP[4]) ∧
            has(EVENT[5], REF1[3], GROUP[4]) ∧ Against(EVENT[5]) = ENTITY[1]))))

# ::id 582_fiction_DICK-1952;AT163-10;NE
# ::snt Is n't that right ? "
∃ ENTITY[1] QUEST(¬ ∃ ATTRIB[2] EVENT[3] (right(ATTRIB[2]) ∧ copula(EVENT[3], ENTITY[1], ATTRIB[2])))

# ::id 583_fiction_DICK-1952;AT164-1;NE
# ::snt Dorle nodded slowly .
∃ EVENT[1] (ADV_slowly(EVENT[1]) ∧ past(EVENT[1]) ∧ nodded(EVENT[1], ENTITY[Dorle]))

# ::id 584_fiction_DICK-1952;AT164-2;NE
# ::snt " The soft underbelly of the dragon .
∃ ATTRIB[2] EVENT[4] ENTITY[3] ENTITY[1] (
 soft(ATTRIB[2]) ∧
  dragon(ENTITY[3]) ∧
   is_underbelly_of(ENTITY[1], ENTITY[3]) ∧ is_underbelly_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
    xxx(EVENT[4]) ∧ LINK(EVENT[4]) = ENTITY[1])

# ::id 585_fiction_DICK-1952;AT164-3;NE
# ::snt In the legend , the dragon 's armor does n't cover its stomach . "
∃ ENTITY[2] ENTITY[3] ENTITY[1] (
 legend(ENTITY[1]) ∧
  dragon(ENTITY[3]) ∧
   is_armor_POS(ENTITY[2], ENTITY[3]) ∧
    ¬ ∃ REF1[5] EVENT[6] ENTITY[4] (
          REF1[5] = its ∧
           is_stomach_POS(ENTITY[4], REF1[5]) ∧
            does_cover(EVENT[6], ENTITY[2], ENTITY[4]) ∧ In(EVENT[6]) = ENTITY[1]))

# ::id 586_fiction_DICK-1952;AT164-4;NE
# ::snt He began to laugh .
∃ REF1[1] EVENT[3] EVENT[2] (REF1[1] = he ∧ past(EVENT[2]) ∧ began(EVENT[2], REF1[1], laugh(EVENT[3], REF1[1])))

# ::id 587_fiction_DICK-1952;AT164-5;NE
# ::snt " That 's right .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (right(ATTRIB[2]) ∧ copula(EVENT[3], ENTITY[1], ATTRIB[2]))

# ::id 588_fiction_DICK-1952;AT164-6;NE
# ::snt That 's perfectly right . "
∃ ATTRIB[2] EVENT[3] ENTITY[1] (perfectly_right(ATTRIB[2]) ∧ copula(EVENT[3], ENTITY[1], ATTRIB[2]))

# ::id 589_fiction_DICK-1952;AT165-1;NE
# ::snt " Let 's go , then , " Nasha said .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  said(EVENT[1], ENTITY[Nasha],
   IMPERATIVE(∃ REF1[3] EVENT[4] EVENT[2] (REF1[3] = 's ∧ ADV_then(EVENT[4]) ∧ let(EVENT[2], go(EVENT[4], REF1[3]))))))

# ::id 590_fiction_DICK-1952;AT165-2;NE
# ::snt " Let 's get back to the ship .
∃ ENTITY[3] (
 ship(ENTITY[3]) ∧
  IMPERATIVE(∃ REF1[2] EVENT[4] EVENT[1] (
        REF1[2] = 's ∧
         is_DIR_back_to(EVENT[4], ENTITY[3]) ∧ let(EVENT[1], get(EVENT[4], REF1[2])))))

# ::id 591_fiction_DICK-1952;AT165-3;NE
# ::snt We have work to do here . "
∃ REF1[1] EVENT[4] EVENT[6] ENTITY[2] (
 REF1[1] = we ∧
  do(EVENT[4], _, ENTITY[2]) ∧ work(ENTITY[2]) ∧
   LOC_here(EVENT[4]) ∧ have(EVENT[6], REF1[1], ENTITY[2]))

# ::id 592_fiction_DICK-1952;AT166-1;NE
# ::snt It was early the next morning when they reached the ship .
∃ REF1[5] ATTRIB[2] EVENT[7] EVENT[9] TIME[3] ENTITY[6] ENTITY[1] (
 next(ATTRIB[2]) ∧
  is_morning_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
   ship(ENTITY[6]) ∧
    REF1[5] = they ∧
     reached(EVENT[7], REF1[5], ENTITY[6]) ∧
      is_TMP(EVENT[7], TIME[3]) ∧
       past(EVENT[7]) ∧ TMP_early(EVENT[9]) ∧ past(EVENT[9]) ∧ copula(EVENT[9], TIME[3], ENTITY[1]))

# ::id 593_fiction_DICK-1952;AT166-2;NE
# ::snt During the night the Captain had died ,
∃ EVENT[3] ENTITY[2] ENTITY[1] (
 night(ENTITY[1]) ∧
  Captain(ENTITY[2]) ∧ past(EVENT[3]) ∧ had_died(EVENT[3], ENTITY[2]) ∧ During(EVENT[3]) = ENTITY[1])

# ::id 594_fiction_DICK-1952;AT166-3;NE
# ::snt and the crew had ignited his body , according to custom .
∃ REF1[3] EVENT[6] EVENT[5] ENTITY[4] ENTITY[2] ENTITY[1] (
 crew(ENTITY[1]) ∧
  REF1[3] = his ∧
   is_body_POS(ENTITY[2], REF1[3]) ∧
    custom(ENTITY[4]) ∧
     past(EVENT[6]) ∧
      CONJ_and(had_ignited(EVENT[6], ENTITY[1], ENTITY[2]), according(EVENT[5], ENTITY[2]) ∧ to(EVENT[5]) = ENTITY[4]))

# ::id 595_fiction_DICK-1952;AT166-4;NE
# ::snt They had stood solemnly around it until the last ember died .
∃ SITUATION[8] SITUATION[3] REF2[2] REF1[1] ATTRIB[5] EVENT[6] EVENT[7] ENTITY[4] (
 last(ATTRIB[5]) ∧
  is_ember_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
   REF1[1] = they ∧
    REF2[2] = it ∧
     is_FACT_THAT(SITUATION[3], died(EVENT[6], ENTITY[4])) ∧
      ADV_solemnly(SITUATION[8]) ∧
       past(EVENT[6]) ∧
        past(EVENT[7]) ∧
         is_FACT_THAT(SITUATION[8],
          had_stood(EVENT[7], REF1[1]) ∧ until(EVENT[7]) = SITUATION[3] ∧ around(EVENT[7]) = REF2[2]))

# ::id 596_fiction_DICK-1952;AT166-5;NE
# ::snt As they were going back to their work the woman and the two men appeared , dirty and tired , still excited .
∃ ATTRIB[16] ATTRIB[13] ATTRIB[12] REF2[4] REF1[2] SITUATION[1] EVENT[5] EVENT[14] EVENT[14] EVENT[17] EVENT[18] ENTITY[3] GROUP[8] ENTITY[7] ENTITY[9] GROUP[10] (
 woman(ENTITY[9]) ∧
  (CD_two(GROUP[10]), men(GROUP[10])) ∧
   REF1[2] = they ∧
    REF2[4] = their ∧
     is_work_POS(ENTITY[3], REF2[4]) ∧
      is_FACT_THAT(SITUATION[1], were_going(EVENT[5], REF1[2])) ∧
       is_element_of(ENTITY[9], GROUP[8]) ∧ is_subset_of_or_equal_to(GROUP[10], GROUP[8]) ∧
        dirty(ATTRIB[12]) ∧
         tired(ATTRIB[13]) ∧
          still_excited(ATTRIB[16]) ∧
           CONJ_and(xxx(EVENT[14], ENTITY[7], ATTRIB[12]), xxx(EVENT[14], ENTITY[7], ATTRIB[13])) ∧
            xxx(EVENT[17], ENTITY[7], ATTRIB[16]) ∧ is_equals(ENTITY[7], GROUP[8]) ∧
            is_DIR_back_to(EVENT[5], ENTITY[3]) ∧
             past(EVENT[5]) ∧
              past(EVENT[18]) ∧ appeared(EVENT[18], ENTITY[7]) ∧ As(EVENT[18]) = SITUATION[1])

# ::id 597_fiction_DICK-1952;AT167-1;NE
# ::snt And presently , from the ship , a line of people came , each carrying something in his hands .
∃ EVENT[8] GROUP[3] ENTITY[2] ENTITY[1] (
 ship(ENTITY[1]) ∧
  people(GROUP[3]) ∧
   is_line_of(ENTITY[2], GROUP[3]) ∧
    TMP_presently(EVENT[8]) ∧
     past(EVENT[8]) ∧
      CONJ_and(came(EVENT[8], ENTITY[2]) ∧ from(EVENT[8]) = ENTITY[1],
       EACH ENTITY[4] ∃ REF1[6] EVENT[7] GROUP[5] (
        REF1[6] = his ∧
         is_hands_POS(GROUP[5], REF1[6]) ∧ carrying(EVENT[7], ENTITY[4]) ∧ in(EVENT[7]) = GROUP[5])))

# ::id 598_fiction_DICK-1952;AT167-2;NE
# ::snt The line marched across the gray slag , the eternal expanse of fused metal .
∃ ATTRIB[5] ATTRIB[3] ATTRIB[7] EVENT[8] ENTITY[4] ENTITY[2] ENTITY[6] ENTITY[1] (
 line(ENTITY[1]) ∧
  gray(ATTRIB[7]) ∧
   is_slag_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧
    eternal(ATTRIB[3]) ∧
     fused(ATTRIB[5]) ∧
      is_metal_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
       is_expanse_of(ENTITY[2], ENTITY[4]) ∧ is_expanse_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
        is_-ENTITY-_namely(ENTITY[6], ENTITY[2]) ∧
         past(EVENT[8]) ∧ marched(EVENT[8], ENTITY[1]) ∧ across(EVENT[8]) = ENTITY[6])

# ::id 599_fiction_DICK-1952;AT167-3;NE
# ::snt When they reached the weapon they all fell on the gun at once , with crowbars , hammers , anything that was heavy and hard .
∃ SITUATION[18] REF2[6] REF1[2] EVENT[4] EVENT[17] GROUP[9] ENTITY[8] ENTITY[3] ENTITY[7] (
 weapon(ENTITY[3]) ∧
  gun(ENTITY[7]) ∧
   REF1[2] = they ∧
    REF2[6] = they ∧
     ADV_once(ENTITY[8]) ∧
      ∃ GROUP[10] (crowbars(GROUP[10]) ∧ is_subset_of_or_equal_to(GROUP[10], GROUP[9])) ∧
       ∃ GROUP[11] (hammers(GROUP[11]) ∧ is_subset_of_or_equal_to(GROUP[11], GROUP[9])) ∧
       ANY ATTRIB[15] ATTRIB[14] EVENT[16] EVENT[16] ENTITY[12] (
        (heavy(ATTRIB[14]) ∧ hard(ATTRIB[15]) ∧
         CONJ_and(copula(EVENT[16], ENTITY[12], ATTRIB[14]), copula(EVENT[16], ENTITY[12], ATTRIB[15])) ∧
          thing(ENTITY[12]) ∧ past(EVENT[16]) ∧ past(EVENT[16])), is_element_of(ENTITY[12], GROUP[9])) ∧
       is_TMP(EVENT[4], SITUATION[18]) ∧
        past(EVENT[4]) ∧
         reached(EVENT[4], REF1[2], ENTITY[3]) ∧
          past(EVENT[17]) ∧
           is_FACT_THAT(SITUATION[18],
            fell(EVENT[17], REF2[6]) ∧ with(EVENT[17]) = GROUP[9] ∧
             at(EVENT[17]) = ENTITY[8] ∧ on(EVENT[17]) = ENTITY[7]))

# ::id 600_fiction_DICK-1952;AT168-1;NE
# ::snt The telescopic sights shattered into bits .
∃ ATTRIB[2] EVENT[4] GROUP[3] GROUP[1] (
 telescopic(ATTRIB[2]) ∧
  is_sights_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧
   bits(GROUP[3]) ∧ shattered(EVENT[4], _, GROUP[1]) ∧ into(EVENT[4]) = GROUP[3])

# ::id 601_fiction_DICK-1952;AT168-2;NE
# ::snt The wiring was pulled out , torn to shreds .
∃ GROUP[3] EVENT[2] EVENT[4] ENTITY[1] (
 wiring(ENTITY[1]) ∧
  past(EVENT[2]) ∧
   past(EVENT[4]) ∧
    shreds(GROUP[3]) ∧
     pulled_out(EVENT[2], _, ENTITY[1]) ∧
      torn(EVENT[4], _, ENTITY[1]) ∧ to(EVENT[4]) = GROUP[3])

# ::id 602_fiction_DICK-1952;AT168-3;NE
# ::snt The delicate gears were smashed , dented .
∃ ATTRIB[2] EVENT[3] EVENT[4] GROUP[1] (
 delicate(ATTRIB[2]) ∧
  is_gears_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧
   past(EVENT[3]) ∧
    past(EVENT[4]) ∧ smashed(EVENT[3], _, GROUP[1]) ∧ were_dented(EVENT[4], GROUP[1]))

# ::id 603_fiction_DICK-1952;AT169-1;NE
# ::snt Finally the warheads themselves were carried off
∃ REF1[2] EVENT[3] GROUP[1] (
 REF1[2] = themselves ∧
  is_warheads_RFL(GROUP[1], REF1[2]) ∧ ADV_finally(EVENT[3]) ∧ past(EVENT[3]) ∧ carried_off(EVENT[3], _, GROUP[1]))

# ::id 604_fiction_DICK-1952;AT169-2;NE
# ::snt and the firing pins removed .
∃ EVENT[2] GROUP[1] (firing_pins(GROUP[1]) ∧ removed(EVENT[2], _, GROUP[1]))

# ::id 605_fiction_DICK-1952;AT170-1;NE
# ::snt The gun was smashed ,
∃ EVENT[2] ENTITY[1] (gun(ENTITY[1]) ∧ past(EVENT[2]) ∧ was_smashed(EVENT[2], ENTITY[1]))

# ::id 606_fiction_DICK-1952;AT170-1;NE
# ::snt the great weapon destroyed .
∃ ATTRIB[2] EVENT[3] ENTITY[1] (great(ATTRIB[2]) ∧ is_weapon_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧ past(EVENT[3]) ∧ destroyed(EVENT[3], _, ENTITY[1]))

# ::id 607_fiction_DICK-1952;AT170-2;NE
# ::snt The people went down into the vault and examined the treasure .
∃ EVENT[3] EVENT[5] ENTITY[2] ENTITY[4] GROUP[1] (
 people(GROUP[1]) ∧
  vault(ENTITY[2]) ∧
   treasure(ENTITY[4]) ∧
    past(EVENT[3]) ∧
     past(EVENT[5]) ∧
      CONJ_and(went_down(EVENT[3], GROUP[1]) ∧ into(EVENT[3]) = ENTITY[2], examined(EVENT[5], GROUP[1], ENTITY[4])))

# ::id 608_fiction_DICK-1952;AT170-3;NE
# ::snt With its metal-armored guardian dead there was no danger any longer .
∃ ATTRIB[4] ATTRIB[3] REF1[2] ENTITY[1] (
 REF1[2] = its ∧
  metal-armored(ATTRIB[3]) ∧
   dead(ATTRIB[4]) ∧
    is_guardian_ATTRIBUTE(ENTITY[1], ATTRIB[4]) ∧ is_guardian_ATTRIBUTE(ENTITY[1], ATTRIB[3]) ∧ is_guardian_POS(ENTITY[1], REF1[2]) ∧
     ¬ ∃ TIME[6] EVENT[7] ENTITY[5] (
           danger(ENTITY[5]) ∧
            any_longer(TIME[6]) ∧
             past(EVENT[7]) ∧
              copula(EVENT[7], ENTITY[5]) ∧ is_contained_in(TMP(EVENT[7]), TIME[6]) ∧
               With(EVENT[7]) = ENTITY[1]))

# ::id 609_fiction_DICK-1952;AT170-4;NE
# ::snt They studied the pictures , the films , the crates of books , the jeweled crowns , the cups , the statues .
∃ REF1[1] ATTRIB[8] EVENT[11] GROUP[2] GROUP[3] GROUP[4] GROUP[6] GROUP[5] GROUP[7] GROUP[9] GROUP[10] (
 pictures(GROUP[3]) ∧
  films(GROUP[4]) ∧
   books(GROUP[6]) ∧
    is_crates_of(GROUP[5], GROUP[6]) ∧
     jeweled(ATTRIB[8]) ∧
      is_crowns_ATTRIBUTE(GROUP[7], ATTRIB[8]) ∧
       cups(GROUP[9]) ∧
        statues(GROUP[10]) ∧
         REF1[1] = they ∧
          is_subset_of_or_equal_to(GROUP[3], GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[4], GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[5], GROUP[2]) ∧
           is_subset_of_or_equal_to(GROUP[7], GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[9], GROUP[2]) ∧ is_subset_of_or_equal_to(GROUP[10], GROUP[2]) ∧
           past(EVENT[11]) ∧ studied(EVENT[11], REF1[1], GROUP[2]))

# ::id 610_fiction_DICK-1952;AT171-1;NE
# ::snt At last , as the sun was dipping into the gray mists that drifted across the planet they came back up the stairs again .
∃ REF1[10] SITUATION[2] ATTRIB[1] ATTRIB[5] EVENT[9] EVENT[12] EVENT[8] ENTITY[7] GROUP[4] ENTITY[3] GROUP[11] (
 sun(ENTITY[3]) ∧
  gray(ATTRIB[5]) ∧
   planet(ENTITY[7]) ∧
    drifted(EVENT[8], GROUP[4]) ∧ across(EVENT[8]) = ENTITY[7] ∧ is_mists_ATTRIBUTE(GROUP[4], ATTRIB[5]) ∧
     stairs(GROUP[11]) ∧
      past(EVENT[8]) ∧
       last(ATTRIB[1]) ∧
        is_FACT_THAT(SITUATION[2], was_dipping(EVENT[9], ENTITY[3]) ∧ into(EVENT[9]) = GROUP[4]) ∧
         REF1[10] = they ∧
          past(EVENT[9]) ∧
           is_DIR_back_up(EVENT[12], GROUP[11]) ∧
            ADV_again(EVENT[12]) ∧
             past(EVENT[12]) ∧
              came(EVENT[12], REF1[10]) ∧ as(EVENT[12]) = SITUATION[2] ∧ At(EVENT[12]) = ATTRIB[1])

# ::id 611_fiction_DICK-1952;AT171-2;NE
# ::snt For a moment they stood around the wrecked gun looking at the unmoving outline of it .
∃ REF1[2] REF2[7] ATTRIB[6] ATTRIB[4] EVENT[9] EVENT[8] ENTITY[1] ENTITY[5] ENTITY[3] (
 wrecked(ATTRIB[4]) ∧
  is_gun_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
   unmoving(ATTRIB[6]) ∧
    REF2[7] = it ∧
     is_outline_of(ENTITY[5], REF2[7]) ∧ is_outline_ATTRIBUTE(ENTITY[5], ATTRIB[6]) ∧
      moment(ENTITY[1]) ∧
       REF1[2] = they ∧
        past(EVENT[9]) ∧
         CONJ_and(stood(EVENT[9], REF1[2]) ∧ around(EVENT[9]) = ENTITY[3] ∧ For(EVENT[9]) = ENTITY[1],
          looking(EVENT[8], REF1[2]) ∧ at(EVENT[8]) = ENTITY[5]))

# ::id 612_fiction_DICK-1952;AT172-1;NE
# ::snt Then they started back to the ship .
∃ REF1[1] EVENT[3] ENTITY[2] (
 ship(ENTITY[2]) ∧
  REF1[1] = they ∧
   TMP_then(EVENT[3]) ∧
    to(EVENT[3]) ∧ is_DIR_back_of(EVENT[3], ENTITY[2]) ∧ past(EVENT[3]) ∧ started(EVENT[3], REF1[1]))

# ::id 613_fiction_DICK-1952;AT172-2;NE
# ::snt There was still much work to be done .
MUCH EVENT[3] ENTITY[1] (done(EVENT[3], _, ENTITY[1]) ∧ work(ENTITY[1]),
 ∃ EVENT[4] (TMP_still(EVENT[4]) ∧ past(EVENT[4]) ∧ copula(EVENT[4], ENTITY[1])))

# ::id 614_fiction_DICK-1952;AT172-3;NE
# ::snt The ship had been badly hurt ,
∃ EVENT[2] ENTITY[1] (ship(ENTITY[1]) ∧ ADV_badly(EVENT[2]) ∧ past(EVENT[2]) ∧ had_hurt(EVENT[2], _, ENTITY[1]))

# ::id 615_fiction_DICK-1952;AT172-4;NE
# ::snt much had been damaged and lost .
MUCH ENTITY[1] ∃ EVENT[2] EVENT[3] (
 past(EVENT[2]) ∧
  past(EVENT[3]) ∧ CONJ_and(had_damaged(EVENT[2], _, ENTITY[1]), had_lost(EVENT[3], _, ENTITY[1])))

# ::id 616_fiction_DICK-1952;AT172-5;NE
# ::snt The important thing was to repair it as quickly as possible , to get it into the air .
∃ SITUATION[10] REF2[7] ATTRIB[5] REF1[4] ATTRIB[2] EVENT[9] EVENT[6] EVENT[3] ENTITY[8] ENTITY[1] (
 important(ATTRIB[2]) ∧
  is_thing_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
   air(ENTITY[8]) ∧
    REF1[4] = it ∧
     possible(ATTRIB[5]) ∧
      REF2[7] = it ∧
       is_TMP_as_quickly_as(SITUATION[10], ATTRIB[5]) ∧
        past(EVENT[3]) ∧
         copula(EVENT[3], ENTITY[1],
          is_FACT_THAT(SITUATION[10],
           repair(EVENT[6], ENTITY[1], REF1[4],
            get(EVENT[9], REF1[4], REF2[7]) ∧ into(EVENT[9]) = ENTITY[8]))))

# ::id 617_fiction_DICK-1952;AT173-1;NE
# ::snt With all of them working together it took just five more days to make it spaceworthy .
∃ ATTRIB[9] REF2[8] SITUATION[6] SITUATION[1] EVENT[10] EVENT[7] (
 is_FACT_THAT(SITUATION[1],
  ALL REF1[3] ENTITY[2] ((REF1[3] = them ∧ is_of(ENTITY[2], REF1[3])), ∃ EVENT[4] (ADV_together(EVENT[4]) ∧ working(EVENT[4], ENTITY[2])))) ∧
  REF2[8] = it ∧
   spaceworthy(ATTRIB[9]) ∧
    is_FACT_THAT(SITUATION[6], make(EVENT[7], xxx(EVENT[10], REF2[8], ATTRIB[9]))) ∧
     JUST_FIVE_MORE GROUP[11] (days(GROUP[11]),
      ∃ EVENT[12] (past(EVENT[12]) ∧ took(EVENT[12], SITUATION[6], GROUP[11]) ∧ With(EVENT[12]) = SITUATION[1])))

# ::id 618_fiction_DICK-1952;AT174-1;NE
# ::snt Nasha stood in the control room , watching the planet fall away behind them .
∃ REF1[4] EVENT[7] EVENT[5] EVENT[2] ENTITY[3] ENTITY[1] (
 control_room(ENTITY[1]) ∧
  planet(ENTITY[3]) ∧
   REF1[4] = them ∧
    past(EVENT[7]) ∧
     DIR_away(EVENT[5]) ∧
      CONJ_and(stood(EVENT[7], ENTITY[Nasha]) ∧ in(EVENT[7]) = ENTITY[1],
       watching(EVENT[2], ENTITY[Nasha], fall(EVENT[5], ENTITY[3]) ∧ behind(EVENT[5]) = REF1[4])))

# ::id 619_fiction_DICK-1952;AT174-2;NE
# ::snt She folded her arms , sitting down on the edge of the table .
∃ REF2[3] REF1[1] EVENT[7] EVENT[6] GROUP[2] ENTITY[5] ENTITY[4] (
 table(ENTITY[5]) ∧
  is_edge_of(ENTITY[4], ENTITY[5]) ∧
   REF1[1] = she ∧
    REF2[3] = her ∧
     is_arms_POS(GROUP[2], REF2[3]) ∧
      past(EVENT[7]) ∧
       CONJ_and(folded(EVENT[7], REF1[1], GROUP[2]),
        sitting_down(EVENT[6], GROUP[2]) ∧ on(EVENT[6]) = ENTITY[4]))

# ::id 620_fiction_DICK-1952;AT175-1;NE
# ::snt " What are you thinking ? "
QUEST(∃ REF1[2] EVENT[3] ? ENTITY[1] (REF1[2] = you ∧ are_thinking(EVENT[3], REF1[2], ENTITY[1])))

# ::id 621_fiction_DICK-1952;AT176-1;NE
# ::snt Dorle . " I ?
∃ REF1[1] EVENT[2] (REF1[1] = i ∧ xxx(EVENT[2], REF1[1]))

# ::id 622_fiction_DICK-1952;AT176-2;NE
# ::snt Nothing . "
¬ ∃ EVENT[2] ENTITY[1] (thing(ENTITY[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = ENTITY[1])

# ::id 623_fiction_DICK-1952;AT177-1;NE
# ::snt " Are you sure ? "
∃ ATTRIB[2] REF1[1] EVENT[3] (REF1[1] = you ∧ sure(ATTRIB[2]) ∧ copula(EVENT[3], REF1[1], ATTRIB[2]))

# ::id 624_fiction_DICK-1952;AT178-1;NE
# ::snt " I was thinking that there must have been a time when this planet was quite different , when there was life on it . "
∃ REF2[11] ATTRIB[6] REF1[1] EVENT[7] EVENT[12] EVENT[2] ENTITY[10] ENTITY[3] ENTITY[5] (
 planet(ENTITY[5]) ∧
  REF1[1] = i ∧
   quite_different(ATTRIB[6]) ∧
    REF2[11] = it ∧
     is_life_on(ENTITY[10], REF2[11]) ∧
      copula(EVENT[7], ENTITY[5], ATTRIB[6]) ∧ copula(EVENT[12], ENTITY[10]) ∧ time(ENTITY[3]) ∧
       is_TMP(EVENT[7], ENTITY[3]) ∧
        is_before(EVENT[7], EVENT[2]) ∧
         is_TMP(EVENT[12], ENTITY[3]) ∧
          is_before(EVENT[12], EVENT[2]) ∧
           past(EVENT[2]) ∧ was_thinking(EVENT[2], REF1[1], MD_must(∃ EVENT[14] have_copula(EVENT[14], ENTITY[3]))))

# ::id 625_fiction_DICK-1952;AT179-1;NE
# ::snt " I suppose there was .
∃ REF1[1] EVENT[2] (
 REF1[1] = i ∧ suppose(EVENT[2], REF1[1], THERE ENTITY[3] ∃ EVENT[4] (is_before(EVENT[4], EVENT[2]) ∧ copula(EVENT[4], ENTITY[3]))))

# ::id 626_fiction_DICK-1952;AT179-2;NE
# ::snt It 's unfortunate that no ships from our system came this far ,
∃ ATTRIB[2] REF1[1] ATTRIB[7] EVENT[9] ENTITY[6] (
 far(ATTRIB[7]) ∧
  is_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧
   REF1[1] = it ∧
    is_unfortunate_THAT(ATTRIB[2],
     ¬ ∃ REF2[5] EVENT[8] ENTITY[4] GROUP[3] (
           REF2[5] = our ∧
            is_system_POS(ENTITY[4], REF2[5]) ∧
             is_ships_from(GROUP[3], ENTITY[4]) ∧
              past(EVENT[8]) ∧ came(EVENT[8], GROUP[3]) ∧ LOC(EVENT[8]) = ENTITY[6])) ∧
     copula(EVENT[9], REF1[1], ATTRIB[2]))

# ::id 627_fiction_DICK-1952;AT179-3;NE
# ::snt but then we had no reason to suspect intelligent life until we saw the fission glow in the sky . "
∃ SITUATION[13] REF1[1] ENTITY[10] ENTITY[9] (
 fission(ENTITY[9]) ∧
  sky(ENTITY[10]) ∧
   REF1[1] = we ∧
    TMP_then(SITUATION[13]) ∧
     is_FACT_THAT(SITUATION[13],
      ¬ ∃ REF2[7] SITUATION[6] ATTRIB[4] EVENT[5] EVENT[11] EVENT[8] EVENT[12] ENTITY[3] ENTITY[2] (
            intelligent(ATTRIB[4]) ∧
             is_life_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
              is_reason_to(ENTITY[2], suspect(EVENT[5], _, ENTITY[3])) ∧
               REF2[7] = we ∧
                is_FACT_THAT(SITUATION[6],
                 saw(EVENT[8], REF2[7],
                  glow(EVENT[11], ENTITY[9]) ∧ in(EVENT[11]) = ENTITY[10])) ∧
                 past(EVENT[8]) ∧
                  past(EVENT[12]) ∧
                   had(EVENT[12], REF1[1], ENTITY[2]) ∧ until(EVENT[12]) = SITUATION[6])))

# ::id 628_fiction_DICK-1952;AT180-1;NE
# ::snt " And then it was too late . "
∃ ATTRIB[2] REF1[1] EVENT[3] (
 REF1[1] = it ∧
  too_late(ATTRIB[2]) ∧ TMP_then(EVENT[3]) ∧ past(EVENT[3]) ∧ copula(EVENT[3], REF1[1], ATTRIB[2]))

# ::id 629_fiction_DICK-1952;AT181-1;NE
# ::snt " Not quite too late .
∃ ATTRIB[1] EVENT[2] (¬ ADV_quite_too(ATTRIB[1]) ∧ late(ATTRIB[1]) ∧ xxx(EVENT[2], _, ATTRIB[1]))

# ::id 630_fiction_DICK-1952;AT181-2;NE
# ::snt After all , their possessions , their music , books , their pictures , all of that will survive .
∃ ENTITY[11] ALL ENTITY[1] ALL group[10] (is_of(group[10], ENTITY[11]),
 ∃ GROUP[2] (
  ∃ REF1[4] GROUP[3] (REF1[4] = their ∧ is_possessions_POS(GROUP[3], REF1[4]) ∧ is_subset_of_or_equal_to(GROUP[3], GROUP[2])) ∧
   ∃ REF2[6] ENTITY[5] (REF2[6] = their ∧ is_music_POS(ENTITY[5], REF2[6]) ∧ is_element_of(ENTITY[5], GROUP[2])) ∧
   ∃ GROUP[7] (books(GROUP[7]) ∧ is_subset_of_or_equal_to(GROUP[7], GROUP[2])) ∧
   ∃ REF3[9] GROUP[8] (REF3[9] = their ∧ is_pictures_POS(GROUP[8], REF3[9]) ∧ is_subset_of_or_equal_to(GROUP[8], GROUP[2])) ∧
   is_-group-_namely(group[10], GROUP[2]) ∧ MD_will(∃ EVENT[12] (survive(EVENT[12], group[10]) ∧ After(EVENT[12]) = ENTITY[1]))))

# ::id 631_fiction_DICK-1952;AT181-3;NE
# ::snt We 'll take them home and study them ,
∃ REF1[1] (
 REF1[1] = we ∧
  MD'll(∃ REF3[5] REF2[2] EVENT[4] EVENT[6] ENTITY[3] (
        REF2[2] = them ∧
         home(ENTITY[3]) ∧
          REF3[5] = them ∧
           CONJ_and(take(EVENT[4], REF1[1], REF2[2]) ∧ DIR(EVENT[4]) = ENTITY[3],
            study(EVENT[6], REF1[1], REF3[5])))))

# ::id 632_fiction_DICK-1952;AT181-4;NE
# ::snt and they 'll change us .
∃ REF1[1] (REF1[1] = they ∧ MD'll(∃ REF2[2] EVENT[3] (REF2[2] = us ∧ change(EVENT[3], REF1[1], REF2[2]))))

# ::id 633_fiction_DICK-1952;AT181-5;NE
# ::snt We wo n't be the same afterwards .
∃ REF1[1] ATTRIB[3] ENTITY[2] (
 same(ATTRIB[3]) ∧
  is_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
   REF1[1] = we ∧ MD_wo(¬ ∃ EVENT[4] (TMP_afterwards(EVENT[4]) ∧ copula(EVENT[4], REF1[1], ENTITY[2]))))

# ::id 634_fiction_DICK-1952;AT181-6;NE
# ::snt Their sculpturing , especially .
∃ REF1[2] EVENT[3] ENTITY[1] (
 REF1[2] = their ∧
  is_sculpturing_POS(ENTITY[1], REF1[2]) ∧ ADV_especially(EVENT[3]) ∧ xxx(EVENT[3]) ∧ LINK(EVENT[3]) = ENTITY[1])

# ::id 635_fiction_DICK-1952;AT181-7;NE
# ::snt Did you see the one of the great winged creature , without a head or arms ?
∃ ATTRIB[4] ENTITY[3] ENTITY[2] (
 great(ATTRIB[4]) ∧
  is_winged_creature_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
   is_one_of(ENTITY[2], ENTITY[3]) ∧
    QUEST(∃ REF1[1] EVENT[8] GROUP[5] (
          REF1[1] = you ∧
           CONJ_or(∃ ENTITY[6] (head(ENTITY[6]) ∧ is_element_of(ENTITY[6], GROUP[5])),
            ∃ GROUP[7] (arms(GROUP[7]) ∧ is_subset_of_or_equal_to(GROUP[7], GROUP[5]))) ∧
            past(EVENT[8]) ∧ did_see(EVENT[8], REF1[1], ENTITY[2]) ∧ without(EVENT[8]) = GROUP[5])))

# ::id 636_fiction_DICK-1952;AT181-8;NE
# ::snt Broken off , I suppose .
∃ REF1[3] REF2[1] EVENT[4] EVENT[2] (REF2[1] = i ∧ REF1[3] = *pro* ∧ suppose(EVENT[2], REF2[1], broken_off(EVENT[4], _, REF1[3])))

# ::id 637_fiction_DICK-1952;AT181-9;NE
# ::snt But those wings --
∃ EVENT[2] GROUP[1] (wings(GROUP[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = GROUP[1])

# ::id 638_fiction_DICK-1952;AT181-10;NE
# ::snt It looked very old .
∃ ATTRIB[2] REF1[1] EVENT[3] (REF1[1] = it ∧ very_old(ATTRIB[2]) ∧ past(EVENT[3]) ∧ looked(EVENT[3], REF1[1], ATTRIB[2]))

# ::id 639_fiction_DICK-1952;AT181-11;NE
# ::snt It will change us a great deal . "
∃ REF1[1] (
 REF1[1] = it ∧
  MD_will(∃ ATTRIB[4] REF2[2] EVENT[5] DEGREE[3] (
        REF2[2] = us ∧
         great(ATTRIB[4]) ∧
          is_deal_ATTRIBUTE(DEGREE[3], ATTRIB[4]) ∧
           change(EVENT[5], REF1[1], REF2[2]) ∧ MSR(EVENT[5]) = DEGREE[3])))

# ::id 640_fiction_DICK-1952;AT182-1;NE
# ::snt " When we come back we wo n't find the gun waiting for us , " Nasha said .
∃ REF2[5] REF1[2] EVENT[3] EVENT[1] ENTITY[7] (
 gun(ENTITY[7]) ∧
  REF1[2] = we ∧
   REF2[5] = we ∧
    DIR_back(EVENT[3]) ∧
     past(EVENT[1]) ∧
      said(EVENT[1], ENTITY[Nasha],
       CRD_When(come(EVENT[3], REF1[2]),
        MD_wo(¬ ∃ REF3[8] SITUATION[6] EVENT[9] EVENT[10] (
                   REF3[8] = us ∧
                    is_FACT_THAT(SITUATION[6], waiting(EVENT[9], ENTITY[7]) ∧ for(EVENT[9]) = REF3[8]) ∧
                     find(EVENT[10], REF2[5], SITUATION[6]))))))

# ::id 641_fiction_DICK-1952;AT182-2;NE
# ::snt " Next time it wo n't be there to shoot us down .
∃ REF1[2] TIME[1] (
 ADV_next(TIME[1]) ∧ time(TIME[1]) ∧
  REF1[2] = it ∧
   MD_wo(¬ ∃ SITUATION[6] REF2[4] EVENT[5] EVENT[3] (
              REF2[4] = us ∧
               LOC_there(SITUATION[6]) ∧
                is_FACT_THAT(SITUATION[6],
                 copula(EVENT[3], REF1[2], shoot_down(EVENT[5], REF1[2], REF2[4])) ∧
                  is_contained_in(TMP(EVENT[3]), TIME[1])))))

# ::id 642_fiction_DICK-1952;AT182-3;NE
# ::snt We can land and take the treasure , as you call it . "
∃ REF1[1] ENTITY[3] (
 treasure(ENTITY[3]) ∧
  REF1[1] = we ∧
   MD_can(∃ REF3[6] REF2[5] SITUATION[4] EVENT[2] EVENT[7] EVENT[8] (
         REF2[5] = you ∧
          REF3[6] = it ∧
           is_FACT_THAT(SITUATION[4], call(EVENT[7], REF2[5], REF3[6])) ∧
            CONJ_and(land(EVENT[2], REF1[1]),
             take(EVENT[8], REF1[1], ENTITY[3]) ∧ as(EVENT[8]) = SITUATION[4]))))

# ::id 643_fiction_DICK-1952;AT182-4;NE
# ::snt She smiled up at Dorle .
∃ REF1[1] EVENT[2] (REF1[1] = she ∧ past(EVENT[2]) ∧ smiled_up(EVENT[2], REF1[1]) ∧ at(EVENT[2]) = ENTITY[Dorle])

# ::id 644_fiction_DICK-1952;AT182-5;NE
# ::snt " You 'll lead us back there , as a good captain should . "
∃ REF1[1] (
 REF1[1] = you ∧
  MD'll(∃ ATTRIB[5] SITUATION[3] REF2[2] EVENT[7] ENTITY[4] (
        REF2[2] = us ∧
         good(ATTRIB[5]) ∧
          is_captain_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
           is_FACT_THAT(SITUATION[3], MD_should(∃ EVENT[6] xxx(EVENT[6], ENTITY[4]))) ∧
            LOC_back_there(EVENT[7]) ∧ lead(EVENT[7], REF1[1], REF2[2]) ∧ as(EVENT[7]) = SITUATION[3])))

# ::id 645_fiction_DICK-1952;AT183-1;NE
# ::snt " Captain ? "
∃ EVENT[2] ENTITY[1] (Captain(ENTITY[1]) ∧ xxx(EVENT[2]) ∧ LINK(EVENT[2]) = ENTITY[1])

# ::id 646_fiction_DICK-1952;AT183-2;NE
# ::snt Dorle grinned .
∃ EVENT[1] (past(EVENT[1]) ∧ grinned(EVENT[1], ENTITY[Dorle]))

# ::id 647_fiction_DICK-1952;AT183-3;NE
# ::snt " Then you 've decided . "
∃ REF1[1] EVENT[2] (REF1[1] = you ∧ TMP_then(EVENT[2]) ∧ past(EVENT[2]) ∧ 've_decided(EVENT[2], REF1[1]))

# ::id 648_fiction_DICK-1952;AT184-1;NE
# ::snt Nasha shrugged .
∃ EVENT[1] (past(EVENT[1]) ∧ shrugged(EVENT[1], ENTITY[Nasha]))

# ::id 649_fiction_DICK-1952;AT184-2;NE
# ::snt " Fomar argues with me too much .
∃ REF1[1] (
 REF1[1] = me ∧
  TOO_MUCH DEGREE[2] ∃ EVENT[3] (argues(EVENT[3], ENTITY[Fomar]) ∧ MSR(EVENT[3]) = DEGREE[2] ∧ with(EVENT[3]) = REF1[1]))

# ::id 650_fiction_DICK-1952;AT184-3;NE
# ::snt I think , all in all , I really prefer you . "
∃ REF1[1] (
 REF1[1] = i ∧
  ALL ENTITY[2] (ALL ENTITY[3] is_in(ENTITY[2], ENTITY[3]),
   ∃ REF3[6] REF2[5] EVENT[7] EVENT[4] (
    REF2[5] = i ∧
     REF3[6] = you ∧
      ADV_really(EVENT[7]) ∧
       think(EVENT[4], REF1[1], prefer(EVENT[7], REF2[5], REF3[6])) ∧ ADV(EVENT[4]) = ENTITY[2])))

# ::id 651_fiction_DICK-1952;AT185-1;NE
# ::snt " Then let 's go , " Dorle said .
∃ EVENT[1] (
 past(EVENT[1]) ∧
  said(EVENT[1], ENTITY[Dorle],
   IMPERATIVE(∃ SITUATION[5] REF1[3] EVENT[4] EVENT[2] (
         REF1[3] = 's ∧
          TMP_then(SITUATION[5]) ∧ is_FACT_THAT(SITUATION[5], let(EVENT[2], go(EVENT[4], REF1[3])))))))

# ::id 652_fiction_DICK-1952;AT185-2;NE
# ::snt " Let 's go back home . "
IMPERATIVE(∃ REF1[2] EVENT[4] EVENT[1] ENTITY[3] (
      REF1[2] = 's ∧
       home(ENTITY[3]) ∧ is_ADV_back_of(EVENT[4], ENTITY[3]) ∧ let(EVENT[1], go(EVENT[4], REF1[2]))))

# ::id 653_fiction_DICK-1952;AT186-1;NE
# ::snt The ship roared up , flying over the ruins of the city .
∃ EVENT[5] EVENT[4] ENTITY[3] GROUP[2] ENTITY[1] (
 ship(ENTITY[1]) ∧
  city(ENTITY[3]) ∧
   is_ruins_of(GROUP[2], ENTITY[3]) ∧
    past(EVENT[5]) ∧
     CONJ_and(roared_up(EVENT[5], ENTITY[1]), flying(EVENT[4], ENTITY[1]) ∧ over(EVENT[4]) = GROUP[2]))

# ::id 654_fiction_DICK-1952;AT186-2;NE
# ::snt It turned in a huge arc and then shot off beyond the horizon , heading into outer space .
∃ SITUATION[10] ATTRIB[7] ATTRIB[3] REF1[1] EVENT[4] EVENT[9] EVENT[8] ENTITY[2] ENTITY[6] ENTITY[5] (
 horizon(ENTITY[5]) ∧
  REF1[1] = it ∧
   huge(ATTRIB[3]) ∧
    is_arc_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
     outer(ATTRIB[7]) ∧
      is_space_ATTRIBUTE(ENTITY[6], ATTRIB[7]) ∧
       past(EVENT[4]) ∧
        TMP_then(SITUATION[10]) ∧
         past(EVENT[9]) ∧
          CONJ_and(turned(EVENT[4], REF1[1]) ∧ in(EVENT[4]) = ENTITY[2],
           is_FACT_THAT(SITUATION[10],
            CONJ_and(shot_off(EVENT[9], REF1[1]) ∧ beyond(EVENT[9]) = ENTITY[5],
             heading(EVENT[8], REF1[1]) ∧ into(EVENT[8]) = ENTITY[6]))))

# ::id 655_fiction_DICK-1952;AT187-1;NE
# ::snt Down below , in the center of the ruined city , a single half-broken detector vane moved slightly , catching the roar of the ship .
∃ SITUATION[11] SITUATION[12] ATTRIB[6] ATTRIB[5] ATTRIB[3] EVENT[10] EVENT[9] ENTITY[4] ENTITY[2] ENTITY[1] ENTITY[8] ENTITY[7] (
 ruined(ATTRIB[3]) ∧
  is_city_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
   is_center_of(ENTITY[1], ENTITY[2]) ∧
    ship(ENTITY[8]) ∧
     is_roar_of(ENTITY[7], ENTITY[8]) ∧
      single(ATTRIB[5]) ∧
       half-broken(ATTRIB[6]) ∧
        is_detector_vane_ATTRIBUTE(ENTITY[4], ATTRIB[6]) ∧ is_detector_vane_ATTRIBUTE(ENTITY[4], ATTRIB[5]) ∧
         is_LOC_down_below_in(SITUATION[12], ENTITY[1]) ∧
          ADV_slightly(SITUATION[11]) ∧
           past(EVENT[10]) ∧
            is_FACT_THAT(SITUATION[12],
             is_FACT_THAT(SITUATION[11], CONJ_and(moved(EVENT[10], ENTITY[4]), catching(EVENT[9], ENTITY[4], ENTITY[7])))))

# ::id 656_fiction_DICK-1952;AT187-2;NE
# ::snt The base of the great gun throbbed painfully , straining to turn .
∃ SITUATION[7] ATTRIB[3] EVENT[6] EVENT[5] EVENT[4] ENTITY[2] ENTITY[1] (
 great(ATTRIB[3]) ∧
  is_gun_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
   is_base_of(ENTITY[1], ENTITY[2]) ∧
    ADV_painfully(SITUATION[7]) ∧
     past(EVENT[6]) ∧
      is_FACT_THAT(SITUATION[7],
       CONJ_and(throbbed(EVENT[6], ENTITY[1]), straining(EVENT[4], ENTITY[1], turn(EVENT[5], ENTITY[1])))))

# ::id 657_fiction_DICK-1952;AT187-3;NE
# ::snt After a moment a red warning light flashed on down inside its destroyed works .
∃ ATTRIB[6] REF1[5] ATTRIB[3] EVENT[7] GROUP[4] ENTITY[2] ENTITY[1] (
 moment(ENTITY[1]) ∧
  red(ATTRIB[3]) ∧
   is_warning_light_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
    REF1[5] = its ∧
     destroyed(ATTRIB[6]) ∧
      is_works_ATTRIBUTE(GROUP[4], ATTRIB[6]) ∧ is_works_POS(GROUP[4], REF1[5]) ∧
       past(EVENT[7]) ∧
        flashed_on(EVENT[7], ENTITY[2]) ∧ down_inside(EVENT[7]) = GROUP[4] ∧ After(EVENT[7]) = ENTITY[1])

# ::id 658_fiction_DICK-1952;AT188-1;NE
# ::snt And a long way off , a hundred miles from the city , another warning light flashed on , far underground .
∃ ATTRIB[2] GROUP[3] ENTITY[1] ENTITY[4] (
 city(ENTITY[4]) ∧
  long(ATTRIB[2]) ∧
   is_way_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
    (CD_hundred(GROUP[3]), is_miles_from(GROUP[3], ENTITY[4])) ∧
     ANOTHER ENTITY[5] (warning_light(ENTITY[5]),
      ∃ EVENT[7] ENTITY[6] (
       ADV_far(ENTITY[6]) ∧ underground(ENTITY[6]) ∧
        past(EVENT[7]) ∧
         flashed_on(EVENT[7], ENTITY[5]) ∧ LOC(EVENT[7]) = ENTITY[6] ∧ ADV(EVENT[7]) = GROUP[3] ∧
          off(EVENT[7]) = ENTITY[1])))

# ::id 659_fiction_DICK-1952;AT188-2;NE
# ::snt Automatic relays flew into action .
∃ ATTRIB[2] EVENT[4] ENTITY[3] GROUP[1] (
 automatic(ATTRIB[2]) ∧
  is_relays_ATTRIBUTE(GROUP[1], ATTRIB[2]) ∧
   action(ENTITY[3]) ∧ past(EVENT[4]) ∧ flew(EVENT[4], GROUP[1]) ∧ into(EVENT[4]) = ENTITY[3])

# ::id 660_fiction_DICK-1952;AT188-3;NE
# ::snt Gears turned ,
∃ EVENT[2] GROUP[1] (Gears(GROUP[1]) ∧ past(EVENT[2]) ∧ turned(EVENT[2], GROUP[1]))

# ::id 661_fiction_DICK-1952;AT188-4;NE
# ::snt belts whined .
∃ EVENT[2] GROUP[1] (belts(GROUP[1]) ∧ past(EVENT[2]) ∧ whined(EVENT[2], GROUP[1]))

# ::id 662_fiction_DICK-1952;AT188-5;NE
# ::snt On the ground above a section of metal slag slipped back .
∃ EVENT[5] ENTITY[4] ENTITY[3] ENTITY[2] ENTITY[1] (
 metal(ENTITY[3]) ∧
  is_section_of(ENTITY[2], ENTITY[3]) ∧
   is_ground_above(ENTITY[1], ENTITY[2]) ∧
    slag(ENTITY[4]) ∧
     DIR_back(EVENT[5]) ∧ past(EVENT[5]) ∧ slipped(EVENT[5], ENTITY[4]) ∧ On(EVENT[5]) = ENTITY[1])

# ::id 663_fiction_DICK-1952;AT188-6;NE
# ::snt A ramp appeared .
∃ EVENT[2] ENTITY[1] (ramp(ENTITY[1]) ∧ past(EVENT[2]) ∧ appeared(EVENT[2], ENTITY[1]))

# ::id 664_fiction_DICK-1952;AT189-1;NE
# ::snt A moment later a small cart rushed to the surface .
∃ ATTRIB[3] EVENT[5] TIME[1] ENTITY[2] ENTITY[4] (
 surface(ENTITY[4]) ∧
  moment(TIME[1]) ∧
   small(ATTRIB[3]) ∧
    is_cart_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
     is_TMP_later_TMP(EVENT[5], TIME[1]) ∧
      past(EVENT[5]) ∧ rushed(EVENT[5], ENTITY[2]) ∧ to(EVENT[5]) = ENTITY[4])

# ::id 665_fiction_DICK-1952;AT190-1;NE
# ::snt The cart turned toward the city .
∃ EVENT[3] ENTITY[2] ENTITY[1] (
 cart(ENTITY[1]) ∧
  city(ENTITY[2]) ∧ past(EVENT[3]) ∧ turned(EVENT[3], ENTITY[1]) ∧ toward(EVENT[3]) = ENTITY[2])

# ::id 666_fiction_DICK-1952;AT190-1;NE
# ::snt A second cart appeared behind it .
∃ REF1[3] ATTRIB[2] EVENT[4] ENTITY[1] (
 second(ATTRIB[2]) ∧
  is_cart_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
   REF1[3] = it ∧ past(EVENT[4]) ∧ appeared(EVENT[4], ENTITY[1]) ∧ behind(EVENT[4]) = REF1[3])

# ::id 667_fiction_DICK-1952;AT190-1;NE
# ::snt It was loaded with wiring cables .
∃ REF1[1] EVENT[3] GROUP[2] (
 REF1[1] = it ∧
  wiring_cables(GROUP[2]) ∧
   past(EVENT[3]) ∧ loaded(EVENT[3], _, REF1[1]) ∧ with(EVENT[3]) = GROUP[2])

# ::id 668_fiction_DICK-1952;AT190-1;NE
# ::snt Behind it a third cart came , loaded with telescopic tube sights .
∃ ATTRIB[5] ATTRIB[3] REF1[1] EVENT[7] EVENT[6] GROUP[4] ENTITY[2] (
 REF1[1] = it ∧
  third(ATTRIB[3]) ∧
   is_cart_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
    telescopic(ATTRIB[5]) ∧
     is_tube_sights_ATTRIBUTE(GROUP[4], ATTRIB[5]) ∧
      past(EVENT[7]) ∧
       CONJ_and(came(EVENT[7], ENTITY[2]) ∧ Behind(EVENT[7]) = REF1[1],
        loaded(EVENT[6], _, ENTITY[2]) ∧ with(EVENT[6]) = GROUP[4]))

# ::id 669_fiction_DICK-1952;AT190-2;NE
# ::snt And behind came more carts , some with relays , some with firing controls , some with tools and parts , screws and bolts , pins and nuts .
∃ SITUATION[19] (
 LOC_behind(SITUATION[19]) ∧
  is_FACT_THAT(SITUATION[19],
   MORE group[17] (carts(group[17]),
    ∃ EVENT[18] GROUP[1] (
     SOME GROUP[3] ENTITY[2] ((relays(GROUP[3]) ∧ is_with(ENTITY[2], GROUP[3])), is_element_of(ENTITY[2], GROUP[1])) ∧
      SOME GROUP[5] ENTITY[4] ((firing_controls(GROUP[5]) ∧ is_with(ENTITY[4], GROUP[5])), is_element_of(ENTITY[4], GROUP[1])) ∧
      SOME GROUP[7] ENTITY[6] (
       (∃ GROUP[8] (
          ∃ GROUP[9] (tools(GROUP[9]) ∧ is_subset_of_or_equal_to(GROUP[9], GROUP[8])) ∧
           ∃ GROUP[10] (parts(GROUP[10]) ∧ is_subset_of_or_equal_to(GROUP[10], GROUP[8])) ∧ is_subset_of_or_equal_to(GROUP[8], GROUP[7])) ∧
          ∃ GROUP[11] (
           ∃ GROUP[12] (screws(GROUP[12]) ∧ is_subset_of_or_equal_to(GROUP[12], GROUP[11])) ∧
            ∃ GROUP[13] (bolts(GROUP[13]) ∧ is_subset_of_or_equal_to(GROUP[13], GROUP[11])) ∧ is_subset_of_or_equal_to(GROUP[11], GROUP[7])) ∧
          ∃ GROUP[14] (
           ∃ GROUP[15] (pins(GROUP[15]) ∧ is_subset_of_or_equal_to(GROUP[15], GROUP[14])) ∧
            ∃ GROUP[16] (nuts(GROUP[16]) ∧ is_subset_of_or_equal_to(GROUP[16], GROUP[14])) ∧ is_subset_of_or_equal_to(GROUP[14], GROUP[7])) ∧
        is_with(ENTITY[6], GROUP[7])), is_element_of(ENTITY[6], GROUP[1])) ∧
      is_-group-_namely(group[17], GROUP[1]) ∧ past(EVENT[18]) ∧ came(EVENT[18], group[17])))))

# ::id 670_fiction_DICK-1952;AT190-3;NE
# ::snt The final one contained atomic warheads .
∃ ATTRIB[4] ATTRIB[2] EVENT[5] GROUP[3] ENTITY[1] (
 final(ATTRIB[2]) ∧
  is_one_ATTRIBUTE(ENTITY[1], ATTRIB[2]) ∧
   atomic(ATTRIB[4]) ∧
    is_warheads_ATTRIBUTE(GROUP[3], ATTRIB[4]) ∧ past(EVENT[5]) ∧ contained(EVENT[5], ENTITY[1], GROUP[3]))

# ::id 671_fiction_DICK-1952;AT191-1;NE
# ::snt The carts lined up behind the first one , the lead cart .
∃ ATTRIB[4] EVENT[5] ENTITY[2] ENTITY[3] GROUP[1] (
 carts(GROUP[1]) ∧
  first(ATTRIB[4]) ∧
   is_one_ATTRIBUTE(ENTITY[3], ATTRIB[4]) ∧
    lead_cart(ENTITY[2]) ∧
     is_-ENTITY-_namely(ENTITY[3], ENTITY[2]) ∧
      past(EVENT[5]) ∧ lined_up(EVENT[5], GROUP[1]) ∧ behind(EVENT[5]) = ENTITY[3])

# ::id 672_fiction_DICK-1952;AT191-2;NE
# ::snt The lead cart started off , across the frozen ground , bumping calmly along , followed by the others . Moving toward the city . To the damaged gun .
∃ ATTRIB[10] ATTRIB[3] EVENT[12] EVENT[11] EVENT[7] EVENT[4] ENTITY[9] ENTITY[8] GROUP[6] ENTITY[2] ENTITY[1] (
 lead_cart(ENTITY[1]) ∧
  frozen(ATTRIB[3]) ∧
   is_ground_ATTRIBUTE(ENTITY[2], ATTRIB[3]) ∧
    city(ENTITY[8]) ∧
     damaged(ATTRIB[10]) ∧
      is_gun_ATTRIBUTE(ENTITY[9], ATTRIB[10]) ∧
       others(GROUP[6]) ∧
        past(EVENT[12]) ∧
         ADV_calmly_along(EVENT[4]) ∧
          CONJ_and(CONJ_and(CONJ_and(started_off(EVENT[12], ENTITY[1]) ∧ across(EVENT[12]) = ENTITY[2],
                     moving(EVENT[11], ENTITY[1]) ∧ To(EVENT[11]) = ENTITY[9] ∧
                      toward(EVENT[11]) = ENTITY[8]), followed(EVENT[7], GROUP[6], ENTITY[1])),
           bumping(EVENT[4], ENTITY[1])))
